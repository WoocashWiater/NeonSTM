
NEON_STM_v2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d40  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08003e00  08003e00  00013e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ee0  08003ee0  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08003ee0  08003ee0  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ee0  08003ee0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ee0  08003ee0  00013ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ee4  08003ee4  00013ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000018  08003f00  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08003f00  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b0b  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001742  00000000  00000000  00029b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  0002b290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a58  00000000  00000000  0002bda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000bdae  00000000  00000000  0002c7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ac77  00000000  00000000  000385a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00046566  00000000  00000000  0004321d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00089783  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027d8  00000000  00000000  000897d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003de8 	.word	0x08003de8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	08003de8 	.word	0x08003de8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f001 fa9e 	bl	8001764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f9e0 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 fc6e 	bl	8000b0c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000230:	f000 fa1c 	bl	800066c <MX_SPI1_Init>
  MX_TIM3_Init();
 8000234:	f000 fa5a 	bl	80006ec <MX_TIM3_Init>
  MX_TIM16_Init();
 8000238:	f000 fb5c 	bl	80008f4 <MX_TIM16_Init>
  MX_TIM17_Init();
 800023c:	f000 fbe0 	bl	8000a00 <MX_TIM17_Init>
  MX_TIM6_Init();
 8000240:	f000 fab6 	bl	80007b0 <MX_TIM6_Init>
  MX_TIM14_Init();
 8000244:	f000 fad8 	bl	80007f8 <MX_TIM14_Init>
  MX_TIM15_Init();
 8000248:	f000 fafc 	bl	8000844 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  // Turning on all peripherals ---------------------------
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800024c:	4bb8      	ldr	r3, [pc, #736]	; (8000530 <main+0x310>)
 800024e:	213c      	movs	r1, #60	; 0x3c
 8000250:	0018      	movs	r0, r3
 8000252:	f002 feab 	bl	8002fac <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000256:	4bb7      	ldr	r3, [pc, #732]	; (8000534 <main+0x314>)
 8000258:	2100      	movs	r1, #0
 800025a:	0018      	movs	r0, r3
 800025c:	f002 fdc6 	bl	8002dec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8000260:	4bb5      	ldr	r3, [pc, #724]	; (8000538 <main+0x318>)
 8000262:	2100      	movs	r1, #0
 8000264:	0018      	movs	r0, r3
 8000266:	f002 fdc1 	bl	8002dec <HAL_TIM_PWM_Start>

  // Startup procedure ------------------------------------
  LB_Startup();
 800026a:	f001 f80f 	bl	800128c <LB_Startup>

  // state = 2 settings -----------------------------------
  if(mode==0)
 800026e:	4bb3      	ldr	r3, [pc, #716]	; (800053c <main+0x31c>)
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	b25b      	sxtb	r3, r3
 8000274:	2b00      	cmp	r3, #0
 8000276:	d110      	bne.n	800029a <main+0x7a>
  {
	  TIM16->CCR1=brightness_level;
 8000278:	4bb1      	ldr	r3, [pc, #708]	; (8000540 <main+0x320>)
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	b2da      	uxtb	r2, r3
 800027e:	4bb1      	ldr	r3, [pc, #708]	; (8000544 <main+0x324>)
 8000280:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM17->CCR1=brightness_level;
 8000282:	4baf      	ldr	r3, [pc, #700]	; (8000540 <main+0x320>)
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	b2da      	uxtb	r2, r3
 8000288:	4baf      	ldr	r3, [pc, #700]	; (8000548 <main+0x328>)
 800028a:	635a      	str	r2, [r3, #52]	; 0x34
	  SPI_SendWord(LB_ALL,2);
 800028c:	4baf      	ldr	r3, [pc, #700]	; (800054c <main+0x32c>)
 800028e:	2102      	movs	r1, #2
 8000290:	0018      	movs	r0, r3
 8000292:	f000 ff33 	bl	80010fc <SPI_SendWord>
	  SPI_LatchData();
 8000296:	f000 ff47 	bl	8001128 <SPI_LatchData>
  }

  // state = 1 settings -----------------------------------
  pulse_count=TIM3->CNT;
 800029a:	4bad      	ldr	r3, [pc, #692]	; (8000550 <main+0x330>)
 800029c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800029e:	b29a      	uxth	r2, r3
 80002a0:	4bac      	ldr	r3, [pc, #688]	; (8000554 <main+0x334>)
 80002a2:	801a      	strh	r2, [r3, #0]
  position=pulse_count/2;
 80002a4:	4bab      	ldr	r3, [pc, #684]	; (8000554 <main+0x334>)
 80002a6:	881b      	ldrh	r3, [r3, #0]
 80002a8:	b29b      	uxth	r3, r3
 80002aa:	085b      	lsrs	r3, r3, #1
 80002ac:	b29a      	uxth	r2, r3
 80002ae:	4baa      	ldr	r3, [pc, #680]	; (8000558 <main+0x338>)
 80002b0:	801a      	strh	r2, [r3, #0]
  prev_position=position;
 80002b2:	4ba9      	ldr	r3, [pc, #676]	; (8000558 <main+0x338>)
 80002b4:	881b      	ldrh	r3, [r3, #0]
 80002b6:	b29a      	uxth	r2, r3
 80002b8:	4ba8      	ldr	r3, [pc, #672]	; (800055c <main+0x33c>)
 80002ba:	801a      	strh	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  while(state==0)			// normalna praca neonu
 80002bc:	e006      	b.n	80002cc <main+0xac>
	  {
		  switch(mode)
 80002be:	4b9f      	ldr	r3, [pc, #636]	; (800053c <main+0x31c>)
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	b25b      	sxtb	r3, r3
 80002c4:	2b03      	cmp	r3, #3
 80002c6:	d000      	beq.n	80002ca <main+0xaa>
 80002c8:	e000      	b.n	80002cc <main+0xac>
		  	  case 1:
		  		  break;
		  	  case 2:
		  		  break;
		  	  case 3:
		  		  break;
 80002ca:	46c0      	nop			; (mov r8, r8)
	  while(state==0)			// normalna praca neonu
 80002cc:	4ba4      	ldr	r3, [pc, #656]	; (8000560 <main+0x340>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d0f3      	beq.n	80002be <main+0x9e>
		  HAL_Delay(100);
		  */

	  }

	  while(state==1)			// stan wyboru konkretnego trybu
 80002d6:	e07b      	b.n	80003d0 <main+0x1b0>
	  {
		  prev_position=position;
 80002d8:	4b9f      	ldr	r3, [pc, #636]	; (8000558 <main+0x338>)
 80002da:	881b      	ldrh	r3, [r3, #0]
 80002dc:	b29a      	uxth	r2, r3
 80002de:	4b9f      	ldr	r3, [pc, #636]	; (800055c <main+0x33c>)
 80002e0:	801a      	strh	r2, [r3, #0]
		  pulse_count=TIM3->CNT;
 80002e2:	4b9b      	ldr	r3, [pc, #620]	; (8000550 <main+0x330>)
 80002e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002e6:	b29a      	uxth	r2, r3
 80002e8:	4b9a      	ldr	r3, [pc, #616]	; (8000554 <main+0x334>)
 80002ea:	801a      	strh	r2, [r3, #0]
		  position=pulse_count/2;
 80002ec:	4b99      	ldr	r3, [pc, #612]	; (8000554 <main+0x334>)
 80002ee:	881b      	ldrh	r3, [r3, #0]
 80002f0:	b29b      	uxth	r3, r3
 80002f2:	085b      	lsrs	r3, r3, #1
 80002f4:	b29a      	uxth	r2, r3
 80002f6:	4b98      	ldr	r3, [pc, #608]	; (8000558 <main+0x338>)
 80002f8:	801a      	strh	r2, [r3, #0]

		  if(position!=prev_position)
 80002fa:	4b97      	ldr	r3, [pc, #604]	; (8000558 <main+0x338>)
 80002fc:	881b      	ldrh	r3, [r3, #0]
 80002fe:	b29a      	uxth	r2, r3
 8000300:	4b96      	ldr	r3, [pc, #600]	; (800055c <main+0x33c>)
 8000302:	881b      	ldrh	r3, [r3, #0]
 8000304:	b29b      	uxth	r3, r3
 8000306:	429a      	cmp	r2, r3
 8000308:	d062      	beq.n	80003d0 <main+0x1b0>
		  {
			  //HAL_Delay(50);

			  if(position==0&&prev_position==100)
 800030a:	4b93      	ldr	r3, [pc, #588]	; (8000558 <main+0x338>)
 800030c:	881b      	ldrh	r3, [r3, #0]
 800030e:	b29b      	uxth	r3, r3
 8000310:	2b00      	cmp	r3, #0
 8000312:	d10e      	bne.n	8000332 <main+0x112>
 8000314:	4b91      	ldr	r3, [pc, #580]	; (800055c <main+0x33c>)
 8000316:	881b      	ldrh	r3, [r3, #0]
 8000318:	b29b      	uxth	r3, r3
 800031a:	2b64      	cmp	r3, #100	; 0x64
 800031c:	d109      	bne.n	8000332 <main+0x112>
				  --temp_mode;
 800031e:	4b91      	ldr	r3, [pc, #580]	; (8000564 <main+0x344>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	b25b      	sxtb	r3, r3
 8000324:	b2db      	uxtb	r3, r3
 8000326:	3b01      	subs	r3, #1
 8000328:	b2db      	uxtb	r3, r3
 800032a:	b25a      	sxtb	r2, r3
 800032c:	4b8d      	ldr	r3, [pc, #564]	; (8000564 <main+0x344>)
 800032e:	701a      	strb	r2, [r3, #0]
 8000330:	e036      	b.n	80003a0 <main+0x180>
			  else if(position==100&&prev_position==0)
 8000332:	4b89      	ldr	r3, [pc, #548]	; (8000558 <main+0x338>)
 8000334:	881b      	ldrh	r3, [r3, #0]
 8000336:	b29b      	uxth	r3, r3
 8000338:	2b64      	cmp	r3, #100	; 0x64
 800033a:	d10e      	bne.n	800035a <main+0x13a>
 800033c:	4b87      	ldr	r3, [pc, #540]	; (800055c <main+0x33c>)
 800033e:	881b      	ldrh	r3, [r3, #0]
 8000340:	b29b      	uxth	r3, r3
 8000342:	2b00      	cmp	r3, #0
 8000344:	d109      	bne.n	800035a <main+0x13a>
				  ++temp_mode;
 8000346:	4b87      	ldr	r3, [pc, #540]	; (8000564 <main+0x344>)
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	b25b      	sxtb	r3, r3
 800034c:	b2db      	uxtb	r3, r3
 800034e:	3301      	adds	r3, #1
 8000350:	b2db      	uxtb	r3, r3
 8000352:	b25a      	sxtb	r2, r3
 8000354:	4b83      	ldr	r3, [pc, #524]	; (8000564 <main+0x344>)
 8000356:	701a      	strb	r2, [r3, #0]
 8000358:	e022      	b.n	80003a0 <main+0x180>
			  else if(position<prev_position)
 800035a:	4b7f      	ldr	r3, [pc, #508]	; (8000558 <main+0x338>)
 800035c:	881b      	ldrh	r3, [r3, #0]
 800035e:	b29a      	uxth	r2, r3
 8000360:	4b7e      	ldr	r3, [pc, #504]	; (800055c <main+0x33c>)
 8000362:	881b      	ldrh	r3, [r3, #0]
 8000364:	b29b      	uxth	r3, r3
 8000366:	429a      	cmp	r2, r3
 8000368:	d209      	bcs.n	800037e <main+0x15e>
				  ++temp_mode;
 800036a:	4b7e      	ldr	r3, [pc, #504]	; (8000564 <main+0x344>)
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	b25b      	sxtb	r3, r3
 8000370:	b2db      	uxtb	r3, r3
 8000372:	3301      	adds	r3, #1
 8000374:	b2db      	uxtb	r3, r3
 8000376:	b25a      	sxtb	r2, r3
 8000378:	4b7a      	ldr	r3, [pc, #488]	; (8000564 <main+0x344>)
 800037a:	701a      	strb	r2, [r3, #0]
 800037c:	e010      	b.n	80003a0 <main+0x180>
			  else if(position>prev_position)
 800037e:	4b76      	ldr	r3, [pc, #472]	; (8000558 <main+0x338>)
 8000380:	881b      	ldrh	r3, [r3, #0]
 8000382:	b29a      	uxth	r2, r3
 8000384:	4b75      	ldr	r3, [pc, #468]	; (800055c <main+0x33c>)
 8000386:	881b      	ldrh	r3, [r3, #0]
 8000388:	b29b      	uxth	r3, r3
 800038a:	429a      	cmp	r2, r3
 800038c:	d908      	bls.n	80003a0 <main+0x180>
				  --temp_mode;
 800038e:	4b75      	ldr	r3, [pc, #468]	; (8000564 <main+0x344>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	b25b      	sxtb	r3, r3
 8000394:	b2db      	uxtb	r3, r3
 8000396:	3b01      	subs	r3, #1
 8000398:	b2db      	uxtb	r3, r3
 800039a:	b25a      	sxtb	r2, r3
 800039c:	4b71      	ldr	r3, [pc, #452]	; (8000564 <main+0x344>)
 800039e:	701a      	strb	r2, [r3, #0]

			  if(temp_mode>3)
 80003a0:	4b70      	ldr	r3, [pc, #448]	; (8000564 <main+0x344>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	b25b      	sxtb	r3, r3
 80003a6:	2b03      	cmp	r3, #3
 80003a8:	dd03      	ble.n	80003b2 <main+0x192>
				  temp_mode=0;
 80003aa:	4b6e      	ldr	r3, [pc, #440]	; (8000564 <main+0x344>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	701a      	strb	r2, [r3, #0]
 80003b0:	e007      	b.n	80003c2 <main+0x1a2>
			  else if(temp_mode<0)
 80003b2:	4b6c      	ldr	r3, [pc, #432]	; (8000564 <main+0x344>)
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	b25b      	sxtb	r3, r3
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	da02      	bge.n	80003c2 <main+0x1a2>
				  temp_mode=3;
 80003bc:	4b69      	ldr	r3, [pc, #420]	; (8000564 <main+0x344>)
 80003be:	2203      	movs	r2, #3
 80003c0:	701a      	strb	r2, [r3, #0]

			  LED_TurnOnSingle(temp_mode);
 80003c2:	4b68      	ldr	r3, [pc, #416]	; (8000564 <main+0x344>)
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	b25b      	sxtb	r3, r3
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	0018      	movs	r0, r3
 80003cc:	f000 fee6 	bl	800119c <LED_TurnOnSingle>
	  while(state==1)			// stan wyboru konkretnego trybu
 80003d0:	4b63      	ldr	r3, [pc, #396]	; (8000560 <main+0x340>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d100      	bne.n	80003dc <main+0x1bc>
 80003da:	e77d      	b.n	80002d8 <main+0xb8>
		  }
		  //HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
	  }

	  while(state==2)			// stan zmiany parametru dotyczacego wybranego wczesniej trybu
 80003dc:	e0f4      	b.n	80005c8 <main+0x3a8>
	  {
		  prev_position=position;
 80003de:	4b5e      	ldr	r3, [pc, #376]	; (8000558 <main+0x338>)
 80003e0:	881b      	ldrh	r3, [r3, #0]
 80003e2:	b29a      	uxth	r2, r3
 80003e4:	4b5d      	ldr	r3, [pc, #372]	; (800055c <main+0x33c>)
 80003e6:	801a      	strh	r2, [r3, #0]
  		  pulse_count=TIM3->CNT;
 80003e8:	4b59      	ldr	r3, [pc, #356]	; (8000550 <main+0x330>)
 80003ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003ec:	b29a      	uxth	r2, r3
 80003ee:	4b59      	ldr	r3, [pc, #356]	; (8000554 <main+0x334>)
 80003f0:	801a      	strh	r2, [r3, #0]
  		  position=pulse_count/2;
 80003f2:	4b58      	ldr	r3, [pc, #352]	; (8000554 <main+0x334>)
 80003f4:	881b      	ldrh	r3, [r3, #0]
 80003f6:	b29b      	uxth	r3, r3
 80003f8:	085b      	lsrs	r3, r3, #1
 80003fa:	b29a      	uxth	r2, r3
 80003fc:	4b56      	ldr	r3, [pc, #344]	; (8000558 <main+0x338>)
 80003fe:	801a      	strh	r2, [r3, #0]

  		  if(position!=prev_position)
 8000400:	4b55      	ldr	r3, [pc, #340]	; (8000558 <main+0x338>)
 8000402:	881b      	ldrh	r3, [r3, #0]
 8000404:	b29a      	uxth	r2, r3
 8000406:	4b55      	ldr	r3, [pc, #340]	; (800055c <main+0x33c>)
 8000408:	881b      	ldrh	r3, [r3, #0]
 800040a:	b29b      	uxth	r3, r3
 800040c:	429a      	cmp	r2, r3
 800040e:	d100      	bne.n	8000412 <main+0x1f2>
 8000410:	e0d9      	b.n	80005c6 <main+0x3a6>
  		  {
			  switch(mode)
 8000412:	4b4a      	ldr	r3, [pc, #296]	; (800053c <main+0x31c>)
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	b25b      	sxtb	r3, r3
 8000418:	2b03      	cmp	r3, #3
 800041a:	d100      	bne.n	800041e <main+0x1fe>
 800041c:	e0a8      	b.n	8000570 <main+0x350>
 800041e:	dd00      	ble.n	8000422 <main+0x202>
 8000420:	e0d2      	b.n	80005c8 <main+0x3a8>
 8000422:	2b02      	cmp	r3, #2
 8000424:	d058      	beq.n	80004d8 <main+0x2b8>
 8000426:	dd00      	ble.n	800042a <main+0x20a>
 8000428:	e0ce      	b.n	80005c8 <main+0x3a8>
 800042a:	2b00      	cmp	r3, #0
 800042c:	d002      	beq.n	8000434 <main+0x214>
 800042e:	2b01      	cmp	r3, #1
 8000430:	d02b      	beq.n	800048a <main+0x26a>
 8000432:	e0c9      	b.n	80005c8 <main+0x3a8>
			  {
				  case 0:
					  if(position==0&&prev_position==100)
 8000434:	4b48      	ldr	r3, [pc, #288]	; (8000558 <main+0x338>)
 8000436:	881b      	ldrh	r3, [r3, #0]
 8000438:	b29b      	uxth	r3, r3
 800043a:	2b00      	cmp	r3, #0
 800043c:	d10a      	bne.n	8000454 <main+0x234>
 800043e:	4b47      	ldr	r3, [pc, #284]	; (800055c <main+0x33c>)
 8000440:	881b      	ldrh	r3, [r3, #0]
 8000442:	b29b      	uxth	r3, r3
 8000444:	2b64      	cmp	r3, #100	; 0x64
 8000446:	d105      	bne.n	8000454 <main+0x234>
					  {
						  position=100;
 8000448:	4b43      	ldr	r3, [pc, #268]	; (8000558 <main+0x338>)
 800044a:	2264      	movs	r2, #100	; 0x64
 800044c:	801a      	strh	r2, [r3, #0]
						  TIM3->CNT=200;
 800044e:	4b40      	ldr	r3, [pc, #256]	; (8000550 <main+0x330>)
 8000450:	22c8      	movs	r2, #200	; 0xc8
 8000452:	625a      	str	r2, [r3, #36]	; 0x24
					  }
					  if(position==100&&prev_position==0)
 8000454:	4b40      	ldr	r3, [pc, #256]	; (8000558 <main+0x338>)
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	b29b      	uxth	r3, r3
 800045a:	2b64      	cmp	r3, #100	; 0x64
 800045c:	d10a      	bne.n	8000474 <main+0x254>
 800045e:	4b3f      	ldr	r3, [pc, #252]	; (800055c <main+0x33c>)
 8000460:	881b      	ldrh	r3, [r3, #0]
 8000462:	b29b      	uxth	r3, r3
 8000464:	2b00      	cmp	r3, #0
 8000466:	d105      	bne.n	8000474 <main+0x254>
					  {
						  position=0;
 8000468:	4b3b      	ldr	r3, [pc, #236]	; (8000558 <main+0x338>)
 800046a:	2200      	movs	r2, #0
 800046c:	801a      	strh	r2, [r3, #0]
						  TIM3->CNT=0;
 800046e:	4b38      	ldr	r3, [pc, #224]	; (8000550 <main+0x330>)
 8000470:	2200      	movs	r2, #0
 8000472:	625a      	str	r2, [r3, #36]	; 0x24
					  }

					  TIM16->CCR1=position;
 8000474:	4b38      	ldr	r3, [pc, #224]	; (8000558 <main+0x338>)
 8000476:	881b      	ldrh	r3, [r3, #0]
 8000478:	b29a      	uxth	r2, r3
 800047a:	4b32      	ldr	r3, [pc, #200]	; (8000544 <main+0x324>)
 800047c:	635a      	str	r2, [r3, #52]	; 0x34
					  TIM17->CCR1=position;
 800047e:	4b36      	ldr	r3, [pc, #216]	; (8000558 <main+0x338>)
 8000480:	881b      	ldrh	r3, [r3, #0]
 8000482:	b29a      	uxth	r2, r3
 8000484:	4b30      	ldr	r3, [pc, #192]	; (8000548 <main+0x328>)
 8000486:	635a      	str	r2, [r3, #52]	; 0x34
					  break;
 8000488:	e09e      	b.n	80005c8 <main+0x3a8>
				  case 1:
					  if(position==21&&prev_position==20)
 800048a:	4b33      	ldr	r3, [pc, #204]	; (8000558 <main+0x338>)
 800048c:	881b      	ldrh	r3, [r3, #0]
 800048e:	b29b      	uxth	r3, r3
 8000490:	2b15      	cmp	r3, #21
 8000492:	d10a      	bne.n	80004aa <main+0x28a>
 8000494:	4b31      	ldr	r3, [pc, #196]	; (800055c <main+0x33c>)
 8000496:	881b      	ldrh	r3, [r3, #0]
 8000498:	b29b      	uxth	r3, r3
 800049a:	2b14      	cmp	r3, #20
 800049c:	d105      	bne.n	80004aa <main+0x28a>
					  {
						  position=20;
 800049e:	4b2e      	ldr	r3, [pc, #184]	; (8000558 <main+0x338>)
 80004a0:	2214      	movs	r2, #20
 80004a2:	801a      	strh	r2, [r3, #0]
						  TIM3->CNT=40;
 80004a4:	4b2a      	ldr	r3, [pc, #168]	; (8000550 <main+0x330>)
 80004a6:	2228      	movs	r2, #40	; 0x28
 80004a8:	625a      	str	r2, [r3, #36]	; 0x24
					  }
					  if(position==0&&prev_position==1)
 80004aa:	4b2b      	ldr	r3, [pc, #172]	; (8000558 <main+0x338>)
 80004ac:	881b      	ldrh	r3, [r3, #0]
 80004ae:	b29b      	uxth	r3, r3
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d10a      	bne.n	80004ca <main+0x2aa>
 80004b4:	4b29      	ldr	r3, [pc, #164]	; (800055c <main+0x33c>)
 80004b6:	881b      	ldrh	r3, [r3, #0]
 80004b8:	b29b      	uxth	r3, r3
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	d105      	bne.n	80004ca <main+0x2aa>
					  {
						  position=1;
 80004be:	4b26      	ldr	r3, [pc, #152]	; (8000558 <main+0x338>)
 80004c0:	2201      	movs	r2, #1
 80004c2:	801a      	strh	r2, [r3, #0]
						  TIM3->CNT=2;
 80004c4:	4b22      	ldr	r3, [pc, #136]	; (8000550 <main+0x330>)
 80004c6:	2202      	movs	r2, #2
 80004c8:	625a      	str	r2, [r3, #36]	; 0x24
					  }

					  threshold_mode1=position;
 80004ca:	4b23      	ldr	r3, [pc, #140]	; (8000558 <main+0x338>)
 80004cc:	881b      	ldrh	r3, [r3, #0]
 80004ce:	b29b      	uxth	r3, r3
 80004d0:	b2da      	uxtb	r2, r3
 80004d2:	4b25      	ldr	r3, [pc, #148]	; (8000568 <main+0x348>)
 80004d4:	701a      	strb	r2, [r3, #0]
					  break;
 80004d6:	e077      	b.n	80005c8 <main+0x3a8>
				  case 2:
					  if(position==0&&prev_position==100)
 80004d8:	4b1f      	ldr	r3, [pc, #124]	; (8000558 <main+0x338>)
 80004da:	881b      	ldrh	r3, [r3, #0]
 80004dc:	b29b      	uxth	r3, r3
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d10a      	bne.n	80004f8 <main+0x2d8>
 80004e2:	4b1e      	ldr	r3, [pc, #120]	; (800055c <main+0x33c>)
 80004e4:	881b      	ldrh	r3, [r3, #0]
 80004e6:	b29b      	uxth	r3, r3
 80004e8:	2b64      	cmp	r3, #100	; 0x64
 80004ea:	d105      	bne.n	80004f8 <main+0x2d8>
					  {
						  position=100;
 80004ec:	4b1a      	ldr	r3, [pc, #104]	; (8000558 <main+0x338>)
 80004ee:	2264      	movs	r2, #100	; 0x64
 80004f0:	801a      	strh	r2, [r3, #0]
						  TIM3->CNT=200;
 80004f2:	4b17      	ldr	r3, [pc, #92]	; (8000550 <main+0x330>)
 80004f4:	22c8      	movs	r2, #200	; 0xc8
 80004f6:	625a      	str	r2, [r3, #36]	; 0x24
					  }
					  if(position==0&&prev_position==1)
 80004f8:	4b17      	ldr	r3, [pc, #92]	; (8000558 <main+0x338>)
 80004fa:	881b      	ldrh	r3, [r3, #0]
 80004fc:	b29b      	uxth	r3, r3
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d10a      	bne.n	8000518 <main+0x2f8>
 8000502:	4b16      	ldr	r3, [pc, #88]	; (800055c <main+0x33c>)
 8000504:	881b      	ldrh	r3, [r3, #0]
 8000506:	b29b      	uxth	r3, r3
 8000508:	2b01      	cmp	r3, #1
 800050a:	d105      	bne.n	8000518 <main+0x2f8>
					  {
						  position=1;
 800050c:	4b12      	ldr	r3, [pc, #72]	; (8000558 <main+0x338>)
 800050e:	2201      	movs	r2, #1
 8000510:	801a      	strh	r2, [r3, #0]
						  TIM3->CNT=2;
 8000512:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <main+0x330>)
 8000514:	2202      	movs	r2, #2
 8000516:	625a      	str	r2, [r3, #36]	; 0x24
					  }

					  threshold_mode2=position*10;
 8000518:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <main+0x338>)
 800051a:	881b      	ldrh	r3, [r3, #0]
 800051c:	b29b      	uxth	r3, r3
 800051e:	1c1a      	adds	r2, r3, #0
 8000520:	0092      	lsls	r2, r2, #2
 8000522:	18d3      	adds	r3, r2, r3
 8000524:	18db      	adds	r3, r3, r3
 8000526:	b29a      	uxth	r2, r3
 8000528:	4b10      	ldr	r3, [pc, #64]	; (800056c <main+0x34c>)
 800052a:	801a      	strh	r2, [r3, #0]
					  break;
 800052c:	e04c      	b.n	80005c8 <main+0x3a8>
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	200000c4 	.word	0x200000c4
 8000534:	200001ec 	.word	0x200001ec
 8000538:	20000080 	.word	0x20000080
 800053c:	20000037 	.word	0x20000037
 8000540:	20000001 	.word	0x20000001
 8000544:	40014400 	.word	0x40014400
 8000548:	40014800 	.word	0x40014800
 800054c:	08003e20 	.word	0x08003e20
 8000550:	40000400 	.word	0x40000400
 8000554:	20000104 	.word	0x20000104
 8000558:	200000c0 	.word	0x200000c0
 800055c:	20000034 	.word	0x20000034
 8000560:	20000036 	.word	0x20000036
 8000564:	20000038 	.word	0x20000038
 8000568:	20000004 	.word	0x20000004
 800056c:	20000006 	.word	0x20000006
				  case 3:
					  if(position==0&&prev_position==100)
 8000570:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <main+0x3b8>)
 8000572:	881b      	ldrh	r3, [r3, #0]
 8000574:	b29b      	uxth	r3, r3
 8000576:	2b00      	cmp	r3, #0
 8000578:	d10a      	bne.n	8000590 <main+0x370>
 800057a:	4b18      	ldr	r3, [pc, #96]	; (80005dc <main+0x3bc>)
 800057c:	881b      	ldrh	r3, [r3, #0]
 800057e:	b29b      	uxth	r3, r3
 8000580:	2b64      	cmp	r3, #100	; 0x64
 8000582:	d105      	bne.n	8000590 <main+0x370>
					  {
						  position=100;
 8000584:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <main+0x3b8>)
 8000586:	2264      	movs	r2, #100	; 0x64
 8000588:	801a      	strh	r2, [r3, #0]
						  TIM3->CNT=200;
 800058a:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <main+0x3c0>)
 800058c:	22c8      	movs	r2, #200	; 0xc8
 800058e:	625a      	str	r2, [r3, #36]	; 0x24
					  }
					  if(position==0&&prev_position==1)
 8000590:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <main+0x3b8>)
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	b29b      	uxth	r3, r3
 8000596:	2b00      	cmp	r3, #0
 8000598:	d10a      	bne.n	80005b0 <main+0x390>
 800059a:	4b10      	ldr	r3, [pc, #64]	; (80005dc <main+0x3bc>)
 800059c:	881b      	ldrh	r3, [r3, #0]
 800059e:	b29b      	uxth	r3, r3
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d105      	bne.n	80005b0 <main+0x390>
					  {
						  position=1;
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <main+0x3b8>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	801a      	strh	r2, [r3, #0]
						  TIM3->CNT=2;
 80005aa:	4b0d      	ldr	r3, [pc, #52]	; (80005e0 <main+0x3c0>)
 80005ac:	2202      	movs	r2, #2
 80005ae:	625a      	str	r2, [r3, #36]	; 0x24
					  }

					  threshold_mode3=position*10;
 80005b0:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <main+0x3b8>)
 80005b2:	881b      	ldrh	r3, [r3, #0]
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	1c1a      	adds	r2, r3, #0
 80005b8:	0092      	lsls	r2, r2, #2
 80005ba:	18d3      	adds	r3, r2, r3
 80005bc:	18db      	adds	r3, r3, r3
 80005be:	b29a      	uxth	r2, r3
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <main+0x3c4>)
 80005c2:	801a      	strh	r2, [r3, #0]
					  break;
 80005c4:	e000      	b.n	80005c8 <main+0x3a8>
			  }
  		  }
 80005c6:	46c0      	nop			; (mov r8, r8)
	  while(state==2)			// stan zmiany parametru dotyczacego wybranego wczesniej trybu
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <main+0x3c8>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	2b02      	cmp	r3, #2
 80005d0:	d100      	bne.n	80005d4 <main+0x3b4>
 80005d2:	e704      	b.n	80003de <main+0x1be>
	  while(state==0)			// normalna praca neonu
 80005d4:	e67a      	b.n	80002cc <main+0xac>
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	200000c0 	.word	0x200000c0
 80005dc:	20000034 	.word	0x20000034
 80005e0:	40000400 	.word	0x40000400
 80005e4:	20000008 	.word	0x20000008
 80005e8:	20000036 	.word	0x20000036

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b091      	sub	sp, #68	; 0x44
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	2410      	movs	r4, #16
 80005f4:	193b      	adds	r3, r7, r4
 80005f6:	0018      	movs	r0, r3
 80005f8:	2330      	movs	r3, #48	; 0x30
 80005fa:	001a      	movs	r2, r3
 80005fc:	2100      	movs	r1, #0
 80005fe:	f003 fbeb 	bl	8003dd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000602:	003b      	movs	r3, r7
 8000604:	0018      	movs	r0, r3
 8000606:	2310      	movs	r3, #16
 8000608:	001a      	movs	r2, r3
 800060a:	2100      	movs	r1, #0
 800060c:	f003 fbe4 	bl	8003dd8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000610:	0021      	movs	r1, r4
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2202      	movs	r2, #2
 8000616:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000618:	187b      	adds	r3, r7, r1
 800061a:	2201      	movs	r2, #1
 800061c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061e:	187b      	adds	r3, r7, r1
 8000620:	2210      	movs	r2, #16
 8000622:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000624:	187b      	adds	r3, r7, r1
 8000626:	2200      	movs	r2, #0
 8000628:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062a:	187b      	adds	r3, r7, r1
 800062c:	0018      	movs	r0, r3
 800062e:	f001 fb9f 	bl	8001d70 <HAL_RCC_OscConfig>
 8000632:	1e03      	subs	r3, r0, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000636:	f000 fe4d 	bl	80012d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063a:	003b      	movs	r3, r7
 800063c:	2207      	movs	r2, #7
 800063e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000640:	003b      	movs	r3, r7
 8000642:	2200      	movs	r2, #0
 8000644:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000646:	003b      	movs	r3, r7
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800064c:	003b      	movs	r3, r7
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000652:	003b      	movs	r3, r7
 8000654:	2100      	movs	r1, #0
 8000656:	0018      	movs	r0, r3
 8000658:	f001 fea4 	bl	80023a4 <HAL_RCC_ClockConfig>
 800065c:	1e03      	subs	r3, r0, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000660:	f000 fe38 	bl	80012d4 <Error_Handler>
  }
}
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	b011      	add	sp, #68	; 0x44
 800066a:	bd90      	pop	{r4, r7, pc}

0800066c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <MX_SPI1_Init+0x78>)
 8000672:	4a1d      	ldr	r2, [pc, #116]	; (80006e8 <MX_SPI1_Init+0x7c>)
 8000674:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000676:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <MX_SPI1_Init+0x78>)
 8000678:	2282      	movs	r2, #130	; 0x82
 800067a:	0052      	lsls	r2, r2, #1
 800067c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <MX_SPI1_Init+0x78>)
 8000680:	2280      	movs	r2, #128	; 0x80
 8000682:	0212      	lsls	r2, r2, #8
 8000684:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000686:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <MX_SPI1_Init+0x78>)
 8000688:	22f0      	movs	r2, #240	; 0xf0
 800068a:	0112      	lsls	r2, r2, #4
 800068c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <MX_SPI1_Init+0x78>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000694:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <MX_SPI1_Init+0x78>)
 8000696:	2200      	movs	r2, #0
 8000698:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800069a:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <MX_SPI1_Init+0x78>)
 800069c:	2280      	movs	r2, #128	; 0x80
 800069e:	0092      	lsls	r2, r2, #2
 80006a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <MX_SPI1_Init+0x78>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006a8:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_SPI1_Init+0x78>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ae:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <MX_SPI1_Init+0x78>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006b4:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <MX_SPI1_Init+0x78>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80006ba:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <MX_SPI1_Init+0x78>)
 80006bc:	2207      	movs	r2, #7
 80006be:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <MX_SPI1_Init+0x78>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006c6:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <MX_SPI1_Init+0x78>)
 80006c8:	2208      	movs	r2, #8
 80006ca:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006cc:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <MX_SPI1_Init+0x78>)
 80006ce:	0018      	movs	r0, r3
 80006d0:	f001 ff9a 	bl	8002608 <HAL_SPI_Init>
 80006d4:	1e03      	subs	r3, r0, #0
 80006d6:	d001      	beq.n	80006dc <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80006d8:	f000 fdfc 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  //__HAL_SPI_ENABLE(&hspi1);
  /* USER CODE END SPI1_Init 2 */

}
 80006dc:	46c0      	nop			; (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	20000148 	.word	0x20000148
 80006e8:	40013000 	.word	0x40013000

080006ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006ec:	b590      	push	{r4, r7, lr}
 80006ee:	b08d      	sub	sp, #52	; 0x34
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006f2:	240c      	movs	r4, #12
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	0018      	movs	r0, r3
 80006f8:	2324      	movs	r3, #36	; 0x24
 80006fa:	001a      	movs	r2, r3
 80006fc:	2100      	movs	r1, #0
 80006fe:	f003 fb6b 	bl	8003dd8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	0018      	movs	r0, r3
 8000706:	2308      	movs	r3, #8
 8000708:	001a      	movs	r2, r3
 800070a:	2100      	movs	r1, #0
 800070c:	f003 fb64 	bl	8003dd8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000710:	4b25      	ldr	r3, [pc, #148]	; (80007a8 <MX_TIM3_Init+0xbc>)
 8000712:	4a26      	ldr	r2, [pc, #152]	; (80007ac <MX_TIM3_Init+0xc0>)
 8000714:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000716:	4b24      	ldr	r3, [pc, #144]	; (80007a8 <MX_TIM3_Init+0xbc>)
 8000718:	2200      	movs	r2, #0
 800071a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071c:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <MX_TIM3_Init+0xbc>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 201;
 8000722:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <MX_TIM3_Init+0xbc>)
 8000724:	22c9      	movs	r2, #201	; 0xc9
 8000726:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <MX_TIM3_Init+0xbc>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800072e:	4b1e      	ldr	r3, [pc, #120]	; (80007a8 <MX_TIM3_Init+0xbc>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000734:	0021      	movs	r1, r4
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2201      	movs	r2, #1
 800073a:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2200      	movs	r2, #0
 8000740:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2201      	movs	r2, #1
 8000746:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000748:	187b      	adds	r3, r7, r1
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 15;
 800074e:	187b      	adds	r3, r7, r1
 8000750:	220f      	movs	r2, #15
 8000752:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000754:	187b      	adds	r3, r7, r1
 8000756:	2200      	movs	r2, #0
 8000758:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800075a:	187b      	adds	r3, r7, r1
 800075c:	2201      	movs	r2, #1
 800075e:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000760:	187b      	adds	r3, r7, r1
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 15;
 8000766:	187b      	adds	r3, r7, r1
 8000768:	220f      	movs	r2, #15
 800076a:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800076c:	187a      	adds	r2, r7, r1
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_TIM3_Init+0xbc>)
 8000770:	0011      	movs	r1, r2
 8000772:	0018      	movs	r0, r3
 8000774:	f002 fb86 	bl	8002e84 <HAL_TIM_Encoder_Init>
 8000778:	1e03      	subs	r3, r0, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800077c:	f000 fdaa 	bl	80012d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2200      	movs	r2, #0
 800078a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800078c:	1d3a      	adds	r2, r7, #4
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_TIM3_Init+0xbc>)
 8000790:	0011      	movs	r1, r2
 8000792:	0018      	movs	r0, r3
 8000794:	f003 fa36 	bl	8003c04 <HAL_TIMEx_MasterConfigSynchronization>
 8000798:	1e03      	subs	r3, r0, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800079c:	f000 fd9a 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007a0:	46c0      	nop			; (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	b00d      	add	sp, #52	; 0x34
 80007a6:	bd90      	pop	{r4, r7, pc}
 80007a8:	200000c4 	.word	0x200000c4
 80007ac:	40000400 	.word	0x40000400

080007b0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80007b4:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <MX_TIM6_Init+0x3c>)
 80007b6:	4a0e      	ldr	r2, [pc, #56]	; (80007f0 <MX_TIM6_Init+0x40>)
 80007b8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_TIM6_Init+0x3c>)
 80007bc:	4a0d      	ldr	r2, [pc, #52]	; (80007f4 <MX_TIM6_Init+0x44>)
 80007be:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <MX_TIM6_Init+0x3c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 399;
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_TIM6_Init+0x3c>)
 80007c8:	2290      	movs	r2, #144	; 0x90
 80007ca:	32ff      	adds	r2, #255	; 0xff
 80007cc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ce:	4b07      	ldr	r3, [pc, #28]	; (80007ec <MX_TIM6_Init+0x3c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <MX_TIM6_Init+0x3c>)
 80007d6:	0018      	movs	r0, r3
 80007d8:	f002 fa5c 	bl	8002c94 <HAL_TIM_Base_Init>
 80007dc:	1e03      	subs	r3, r0, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM6_Init+0x34>
  {
    Error_Handler();
 80007e0:	f000 fd78 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80007e4:	46c0      	nop			; (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	20000108 	.word	0x20000108
 80007f0:	40001000 	.word	0x40001000
 80007f4:	0000270f 	.word	0x0000270f

080007f8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80007fc:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_TIM14_Init+0x40>)
 80007fe:	4a0f      	ldr	r2, [pc, #60]	; (800083c <MX_TIM14_Init+0x44>)
 8000800:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 799;
 8000802:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <MX_TIM14_Init+0x40>)
 8000804:	4a0e      	ldr	r2, [pc, #56]	; (8000840 <MX_TIM14_Init+0x48>)
 8000806:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000808:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MX_TIM14_Init+0x40>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100;
 800080e:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <MX_TIM14_Init+0x40>)
 8000810:	2264      	movs	r2, #100	; 0x64
 8000812:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000814:	4b08      	ldr	r3, [pc, #32]	; (8000838 <MX_TIM14_Init+0x40>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081a:	4b07      	ldr	r3, [pc, #28]	; (8000838 <MX_TIM14_Init+0x40>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000820:	4b05      	ldr	r3, [pc, #20]	; (8000838 <MX_TIM14_Init+0x40>)
 8000822:	0018      	movs	r0, r3
 8000824:	f002 fa36 	bl	8002c94 <HAL_TIM_Base_Init>
 8000828:	1e03      	subs	r3, r0, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 800082c:	f000 fd52 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000830:	46c0      	nop			; (mov r8, r8)
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	200001ac 	.word	0x200001ac
 800083c:	40002000 	.word	0x40002000
 8000840:	0000031f 	.word	0x0000031f

08000844 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800084a:	2308      	movs	r3, #8
 800084c:	18fb      	adds	r3, r7, r3
 800084e:	0018      	movs	r0, r3
 8000850:	2310      	movs	r3, #16
 8000852:	001a      	movs	r2, r3
 8000854:	2100      	movs	r1, #0
 8000856:	f003 fabf 	bl	8003dd8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800085a:	003b      	movs	r3, r7
 800085c:	0018      	movs	r0, r3
 800085e:	2308      	movs	r3, #8
 8000860:	001a      	movs	r2, r3
 8000862:	2100      	movs	r1, #0
 8000864:	f003 fab8 	bl	8003dd8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000868:	4b1f      	ldr	r3, [pc, #124]	; (80008e8 <MX_TIM15_Init+0xa4>)
 800086a:	4a20      	ldr	r2, [pc, #128]	; (80008ec <MX_TIM15_Init+0xa8>)
 800086c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 9999;
 800086e:	4b1e      	ldr	r3, [pc, #120]	; (80008e8 <MX_TIM15_Init+0xa4>)
 8000870:	4a1f      	ldr	r2, [pc, #124]	; (80008f0 <MX_TIM15_Init+0xac>)
 8000872:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000874:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <MX_TIM15_Init+0xa4>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 45;
 800087a:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <MX_TIM15_Init+0xa4>)
 800087c:	222d      	movs	r2, #45	; 0x2d
 800087e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000880:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <MX_TIM15_Init+0xa4>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000886:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <MX_TIM15_Init+0xa4>)
 8000888:	2200      	movs	r2, #0
 800088a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088c:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <MX_TIM15_Init+0xa4>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000892:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <MX_TIM15_Init+0xa4>)
 8000894:	0018      	movs	r0, r3
 8000896:	f002 f9fd 	bl	8002c94 <HAL_TIM_Base_Init>
 800089a:	1e03      	subs	r3, r0, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM15_Init+0x5e>
  {
    Error_Handler();
 800089e:	f000 fd19 	bl	80012d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a2:	2108      	movs	r1, #8
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2280      	movs	r2, #128	; 0x80
 80008a8:	0152      	lsls	r2, r2, #5
 80008aa:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80008ac:	187a      	adds	r2, r7, r1
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_TIM15_Init+0xa4>)
 80008b0:	0011      	movs	r1, r2
 80008b2:	0018      	movs	r0, r3
 80008b4:	f002 fd8c 	bl	80033d0 <HAL_TIM_ConfigClockSource>
 80008b8:	1e03      	subs	r3, r0, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 80008bc:	f000 fd0a 	bl	80012d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c0:	003b      	movs	r3, r7
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c6:	003b      	movs	r3, r7
 80008c8:	2200      	movs	r2, #0
 80008ca:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80008cc:	003a      	movs	r2, r7
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_TIM15_Init+0xa4>)
 80008d0:	0011      	movs	r1, r2
 80008d2:	0018      	movs	r0, r3
 80008d4:	f003 f996 	bl	8003c04 <HAL_TIMEx_MasterConfigSynchronization>
 80008d8:	1e03      	subs	r3, r0, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 80008dc:	f000 fcfa 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	b006      	add	sp, #24
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000040 	.word	0x20000040
 80008ec:	40014000 	.word	0x40014000
 80008f0:	0000270f 	.word	0x0000270f

080008f4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b090      	sub	sp, #64	; 0x40
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80008fa:	2324      	movs	r3, #36	; 0x24
 80008fc:	18fb      	adds	r3, r7, r3
 80008fe:	0018      	movs	r0, r3
 8000900:	231c      	movs	r3, #28
 8000902:	001a      	movs	r2, r3
 8000904:	2100      	movs	r1, #0
 8000906:	f003 fa67 	bl	8003dd8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	0018      	movs	r0, r3
 800090e:	2320      	movs	r3, #32
 8000910:	001a      	movs	r2, r3
 8000912:	2100      	movs	r1, #0
 8000914:	f003 fa60 	bl	8003dd8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000918:	4b36      	ldr	r3, [pc, #216]	; (80009f4 <MX_TIM16_Init+0x100>)
 800091a:	4a37      	ldr	r2, [pc, #220]	; (80009f8 <MX_TIM16_Init+0x104>)
 800091c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 799;
 800091e:	4b35      	ldr	r3, [pc, #212]	; (80009f4 <MX_TIM16_Init+0x100>)
 8000920:	4a36      	ldr	r2, [pc, #216]	; (80009fc <MX_TIM16_Init+0x108>)
 8000922:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000924:	4b33      	ldr	r3, [pc, #204]	; (80009f4 <MX_TIM16_Init+0x100>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 99;
 800092a:	4b32      	ldr	r3, [pc, #200]	; (80009f4 <MX_TIM16_Init+0x100>)
 800092c:	2263      	movs	r2, #99	; 0x63
 800092e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000930:	4b30      	ldr	r3, [pc, #192]	; (80009f4 <MX_TIM16_Init+0x100>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000936:	4b2f      	ldr	r3, [pc, #188]	; (80009f4 <MX_TIM16_Init+0x100>)
 8000938:	2200      	movs	r2, #0
 800093a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093c:	4b2d      	ldr	r3, [pc, #180]	; (80009f4 <MX_TIM16_Init+0x100>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000942:	4b2c      	ldr	r3, [pc, #176]	; (80009f4 <MX_TIM16_Init+0x100>)
 8000944:	0018      	movs	r0, r3
 8000946:	f002 f9a5 	bl	8002c94 <HAL_TIM_Base_Init>
 800094a:	1e03      	subs	r3, r0, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 800094e:	f000 fcc1 	bl	80012d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000952:	4b28      	ldr	r3, [pc, #160]	; (80009f4 <MX_TIM16_Init+0x100>)
 8000954:	0018      	movs	r0, r3
 8000956:	f002 fa15 	bl	8002d84 <HAL_TIM_PWM_Init>
 800095a:	1e03      	subs	r3, r0, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 800095e:	f000 fcb9 	bl	80012d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000962:	2124      	movs	r1, #36	; 0x24
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2260      	movs	r2, #96	; 0x60
 8000968:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800096a:	187b      	adds	r3, r7, r1
 800096c:	2200      	movs	r2, #0
 800096e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000970:	187b      	adds	r3, r7, r1
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000976:	187b      	adds	r3, r7, r1
 8000978:	2200      	movs	r2, #0
 800097a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800097c:	187b      	adds	r3, r7, r1
 800097e:	2200      	movs	r2, #0
 8000980:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000982:	187b      	adds	r3, r7, r1
 8000984:	2200      	movs	r2, #0
 8000986:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800098e:	1879      	adds	r1, r7, r1
 8000990:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <MX_TIM16_Init+0x100>)
 8000992:	2200      	movs	r2, #0
 8000994:	0018      	movs	r0, r3
 8000996:	f002 fc57 	bl	8003248 <HAL_TIM_PWM_ConfigChannel>
 800099a:	1e03      	subs	r3, r0, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 800099e:	f000 fc99 	bl	80012d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2200      	movs	r2, #0
 80009ac:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2280      	movs	r2, #128	; 0x80
 80009c4:	0192      	lsls	r2, r2, #6
 80009c6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80009ce:	1d3a      	adds	r2, r7, #4
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <MX_TIM16_Init+0x100>)
 80009d2:	0011      	movs	r1, r2
 80009d4:	0018      	movs	r0, r3
 80009d6:	f003 f96d 	bl	8003cb4 <HAL_TIMEx_ConfigBreakDeadTime>
 80009da:	1e03      	subs	r3, r0, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM16_Init+0xee>
  {
    Error_Handler();
 80009de:	f000 fc79 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80009e2:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <MX_TIM16_Init+0x100>)
 80009e4:	0018      	movs	r0, r3
 80009e6:	f000 fdcd 	bl	8001584 <HAL_TIM_MspPostInit>

}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	b010      	add	sp, #64	; 0x40
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	200001ec 	.word	0x200001ec
 80009f8:	40014400 	.word	0x40014400
 80009fc:	0000031f 	.word	0x0000031f

08000a00 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b090      	sub	sp, #64	; 0x40
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a06:	2324      	movs	r3, #36	; 0x24
 8000a08:	18fb      	adds	r3, r7, r3
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	231c      	movs	r3, #28
 8000a0e:	001a      	movs	r2, r3
 8000a10:	2100      	movs	r1, #0
 8000a12:	f003 f9e1 	bl	8003dd8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	0018      	movs	r0, r3
 8000a1a:	2320      	movs	r3, #32
 8000a1c:	001a      	movs	r2, r3
 8000a1e:	2100      	movs	r1, #0
 8000a20:	f003 f9da 	bl	8003dd8 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000a24:	4b36      	ldr	r3, [pc, #216]	; (8000b00 <MX_TIM17_Init+0x100>)
 8000a26:	4a37      	ldr	r2, [pc, #220]	; (8000b04 <MX_TIM17_Init+0x104>)
 8000a28:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 799;
 8000a2a:	4b35      	ldr	r3, [pc, #212]	; (8000b00 <MX_TIM17_Init+0x100>)
 8000a2c:	4a36      	ldr	r2, [pc, #216]	; (8000b08 <MX_TIM17_Init+0x108>)
 8000a2e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a30:	4b33      	ldr	r3, [pc, #204]	; (8000b00 <MX_TIM17_Init+0x100>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 99;
 8000a36:	4b32      	ldr	r3, [pc, #200]	; (8000b00 <MX_TIM17_Init+0x100>)
 8000a38:	2263      	movs	r2, #99	; 0x63
 8000a3a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3c:	4b30      	ldr	r3, [pc, #192]	; (8000b00 <MX_TIM17_Init+0x100>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000a42:	4b2f      	ldr	r3, [pc, #188]	; (8000b00 <MX_TIM17_Init+0x100>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a48:	4b2d      	ldr	r3, [pc, #180]	; (8000b00 <MX_TIM17_Init+0x100>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000a4e:	4b2c      	ldr	r3, [pc, #176]	; (8000b00 <MX_TIM17_Init+0x100>)
 8000a50:	0018      	movs	r0, r3
 8000a52:	f002 f91f 	bl	8002c94 <HAL_TIM_Base_Init>
 8000a56:	1e03      	subs	r3, r0, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8000a5a:	f000 fc3b 	bl	80012d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000a5e:	4b28      	ldr	r3, [pc, #160]	; (8000b00 <MX_TIM17_Init+0x100>)
 8000a60:	0018      	movs	r0, r3
 8000a62:	f002 f98f 	bl	8002d84 <HAL_TIM_PWM_Init>
 8000a66:	1e03      	subs	r3, r0, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8000a6a:	f000 fc33 	bl	80012d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a6e:	2124      	movs	r1, #36	; 0x24
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2260      	movs	r2, #96	; 0x60
 8000a74:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2200      	movs	r2, #0
 8000a7a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2200      	movs	r2, #0
 8000a86:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2200      	movs	r2, #0
 8000a92:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a9a:	1879      	adds	r1, r7, r1
 8000a9c:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <MX_TIM17_Init+0x100>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f002 fbd1 	bl	8003248 <HAL_TIM_PWM_ConfigChannel>
 8000aa6:	1e03      	subs	r3, r0, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8000aaa:	f000 fc13 	bl	80012d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	2280      	movs	r2, #128	; 0x80
 8000ad0:	0192      	lsls	r2, r2, #6
 8000ad2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000ada:	1d3a      	adds	r2, r7, #4
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <MX_TIM17_Init+0x100>)
 8000ade:	0011      	movs	r1, r2
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f003 f8e7 	bl	8003cb4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ae6:	1e03      	subs	r3, r0, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM17_Init+0xee>
  {
    Error_Handler();
 8000aea:	f000 fbf3 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000aee:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <MX_TIM17_Init+0x100>)
 8000af0:	0018      	movs	r0, r3
 8000af2:	f000 fd47 	bl	8001584 <HAL_TIM_MspPostInit>

}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b010      	add	sp, #64	; 0x40
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	20000080 	.word	0x20000080
 8000b04:	40014800 	.word	0x40014800
 8000b08:	0000031f 	.word	0x0000031f

08000b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b0c:	b590      	push	{r4, r7, lr}
 8000b0e:	b089      	sub	sp, #36	; 0x24
 8000b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b12:	240c      	movs	r4, #12
 8000b14:	193b      	adds	r3, r7, r4
 8000b16:	0018      	movs	r0, r3
 8000b18:	2314      	movs	r3, #20
 8000b1a:	001a      	movs	r2, r3
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	f003 f95b 	bl	8003dd8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	4b37      	ldr	r3, [pc, #220]	; (8000c00 <MX_GPIO_Init+0xf4>)
 8000b24:	695a      	ldr	r2, [r3, #20]
 8000b26:	4b36      	ldr	r3, [pc, #216]	; (8000c00 <MX_GPIO_Init+0xf4>)
 8000b28:	2180      	movs	r1, #128	; 0x80
 8000b2a:	0289      	lsls	r1, r1, #10
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	615a      	str	r2, [r3, #20]
 8000b30:	4b33      	ldr	r3, [pc, #204]	; (8000c00 <MX_GPIO_Init+0xf4>)
 8000b32:	695a      	ldr	r2, [r3, #20]
 8000b34:	2380      	movs	r3, #128	; 0x80
 8000b36:	029b      	lsls	r3, r3, #10
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3e:	4b30      	ldr	r3, [pc, #192]	; (8000c00 <MX_GPIO_Init+0xf4>)
 8000b40:	695a      	ldr	r2, [r3, #20]
 8000b42:	4b2f      	ldr	r3, [pc, #188]	; (8000c00 <MX_GPIO_Init+0xf4>)
 8000b44:	2180      	movs	r1, #128	; 0x80
 8000b46:	02c9      	lsls	r1, r1, #11
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	615a      	str	r2, [r3, #20]
 8000b4c:	4b2c      	ldr	r3, [pc, #176]	; (8000c00 <MX_GPIO_Init+0xf4>)
 8000b4e:	695a      	ldr	r2, [r3, #20]
 8000b50:	2380      	movs	r3, #128	; 0x80
 8000b52:	02db      	lsls	r3, r3, #11
 8000b54:	4013      	ands	r3, r2
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin 
 8000b5a:	238f      	movs	r3, #143	; 0x8f
 8000b5c:	0219      	lsls	r1, r3, #8
 8000b5e:	2390      	movs	r3, #144	; 0x90
 8000b60:	05db      	lsls	r3, r3, #23
 8000b62:	2200      	movs	r2, #0
 8000b64:	0018      	movs	r0, r3
 8000b66:	f001 f8af 	bl	8001cc8 <HAL_GPIO_WritePin>
                          |LATCH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_SET);
 8000b6a:	4b26      	ldr	r3, [pc, #152]	; (8000c04 <MX_GPIO_Init+0xf8>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	2140      	movs	r1, #64	; 0x40
 8000b70:	0018      	movs	r0, r3
 8000b72:	f001 f8a9 	bl	8001cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENC_SWITCH_Pin */
  GPIO_InitStruct.Pin = ENC_SWITCH_Pin;
 8000b76:	193b      	adds	r3, r7, r4
 8000b78:	2220      	movs	r2, #32
 8000b7a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b7c:	193b      	adds	r3, r7, r4
 8000b7e:	4a22      	ldr	r2, [pc, #136]	; (8000c08 <MX_GPIO_Init+0xfc>)
 8000b80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	193b      	adds	r3, r7, r4
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ENC_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8000b88:	193a      	adds	r2, r7, r4
 8000b8a:	2390      	movs	r3, #144	; 0x90
 8000b8c:	05db      	lsls	r3, r3, #23
 8000b8e:	0011      	movs	r1, r2
 8000b90:	0018      	movs	r0, r3
 8000b92:	f000 ff29 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin 
                           LATCH_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin 
 8000b96:	0021      	movs	r1, r4
 8000b98:	187b      	adds	r3, r7, r1
 8000b9a:	228f      	movs	r2, #143	; 0x8f
 8000b9c:	0212      	lsls	r2, r2, #8
 8000b9e:	601a      	str	r2, [r3, #0]
                          |LATCH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba0:	000c      	movs	r4, r1
 8000ba2:	193b      	adds	r3, r7, r4
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	193b      	adds	r3, r7, r4
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	193b      	adds	r3, r7, r4
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb4:	193a      	adds	r2, r7, r4
 8000bb6:	2390      	movs	r3, #144	; 0x90
 8000bb8:	05db      	lsls	r3, r3, #23
 8000bba:	0011      	movs	r1, r2
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f000 ff13 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_RESET_Pin */
  GPIO_InitStruct.Pin = SPI_RESET_Pin;
 8000bc2:	0021      	movs	r1, r4
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	2240      	movs	r2, #64	; 0x40
 8000bc8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	2201      	movs	r2, #1
 8000bce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI_RESET_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	4a09      	ldr	r2, [pc, #36]	; (8000c04 <MX_GPIO_Init+0xf8>)
 8000be0:	0019      	movs	r1, r3
 8000be2:	0010      	movs	r0, r2
 8000be4:	f000 ff00 	bl	80019e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2100      	movs	r1, #0
 8000bec:	2007      	movs	r0, #7
 8000bee:	f000 fec9 	bl	8001984 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000bf2:	2007      	movs	r0, #7
 8000bf4:	f000 fedb 	bl	80019ae <HAL_NVIC_EnableIRQ>

}
 8000bf8:	46c0      	nop			; (mov r8, r8)
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	b009      	add	sp, #36	; 0x24
 8000bfe:	bd90      	pop	{r4, r7, pc}
 8000c00:	40021000 	.word	0x40021000
 8000c04:	48000400 	.word	0x48000400
 8000c08:	10210000 	.word	0x10210000

08000c0c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// CALLBACK FUNCTIONS -----------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	0002      	movs	r2, r0
 8000c14:	1dbb      	adds	r3, r7, #6
 8000c16:	801a      	strh	r2, [r3, #0]
	++state;
 8000c18:	4b5c      	ldr	r3, [pc, #368]	; (8000d8c <HAL_GPIO_EXTI_Callback+0x180>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	3301      	adds	r3, #1
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4b5a      	ldr	r3, [pc, #360]	; (8000d8c <HAL_GPIO_EXTI_Callback+0x180>)
 8000c24:	701a      	strb	r2, [r3, #0]

	if(state==1)
 8000c26:	4b59      	ldr	r3, [pc, #356]	; (8000d8c <HAL_GPIO_EXTI_Callback+0x180>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d104      	bne.n	8000c3a <HAL_GPIO_EXTI_Callback+0x2e>
		temp_mode=mode;
 8000c30:	4b57      	ldr	r3, [pc, #348]	; (8000d90 <HAL_GPIO_EXTI_Callback+0x184>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	b25a      	sxtb	r2, r3
 8000c36:	4b57      	ldr	r3, [pc, #348]	; (8000d94 <HAL_GPIO_EXTI_Callback+0x188>)
 8000c38:	701a      	strb	r2, [r3, #0]
		LED_TurnOnSingle(mode);
 8000c3a:	4b55      	ldr	r3, [pc, #340]	; (8000d90 <HAL_GPIO_EXTI_Callback+0x184>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	b25b      	sxtb	r3, r3
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	0018      	movs	r0, r3
 8000c44:	f000 faaa 	bl	800119c <LED_TurnOnSingle>

	if(state==2)
 8000c48:	4b50      	ldr	r3, [pc, #320]	; (8000d8c <HAL_GPIO_EXTI_Callback+0x180>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d000      	beq.n	8000c54 <HAL_GPIO_EXTI_Callback+0x48>
 8000c52:	e07c      	b.n	8000d4e <HAL_GPIO_EXTI_Callback+0x142>
	{
		mode=temp_mode;
 8000c54:	4b4f      	ldr	r3, [pc, #316]	; (8000d94 <HAL_GPIO_EXTI_Callback+0x188>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	b25a      	sxtb	r2, r3
 8000c5a:	4b4d      	ldr	r3, [pc, #308]	; (8000d90 <HAL_GPIO_EXTI_Callback+0x184>)
 8000c5c:	701a      	strb	r2, [r3, #0]
		LED_TurnOffAll();
 8000c5e:	f000 fa78 	bl	8001152 <LED_TurnOffAll>
		HAL_TIM_Base_Start_IT(&htim6);
 8000c62:	4b4d      	ldr	r3, [pc, #308]	; (8000d98 <HAL_GPIO_EXTI_Callback+0x18c>)
 8000c64:	0018      	movs	r0, r3
 8000c66:	f002 f841 	bl	8002cec <HAL_TIM_Base_Start_IT>
		//if(mode!=1&&mode!=2)
		HAL_TIM_Base_Stop_IT(&htim14);
 8000c6a:	4b4c      	ldr	r3, [pc, #304]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x190>)
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f002 f85f 	bl	8002d30 <HAL_TIM_Base_Stop_IT>
		if(mode==0)
 8000c72:	4b47      	ldr	r3, [pc, #284]	; (8000d90 <HAL_GPIO_EXTI_Callback+0x184>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	b25b      	sxtb	r3, r3
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d10c      	bne.n	8000c96 <HAL_GPIO_EXTI_Callback+0x8a>
		{
			TIM3->CNT=brightness_level*2;
 8000c7c:	4b48      	ldr	r3, [pc, #288]	; (8000da0 <HAL_GPIO_EXTI_Callback+0x194>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	005a      	lsls	r2, r3, #1
 8000c84:	4b47      	ldr	r3, [pc, #284]	; (8000da4 <HAL_GPIO_EXTI_Callback+0x198>)
 8000c86:	625a      	str	r2, [r3, #36]	; 0x24
			SPI_SendWord(LB_ALL,2);
 8000c88:	4b47      	ldr	r3, [pc, #284]	; (8000da8 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c8a:	2102      	movs	r1, #2
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f000 fa35 	bl	80010fc <SPI_SendWord>
			SPI_LatchData();
 8000c92:	f000 fa49 	bl	8001128 <SPI_LatchData>
		}
		if(mode==1)
 8000c96:	4b3e      	ldr	r3, [pc, #248]	; (8000d90 <HAL_GPIO_EXTI_Callback+0x184>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	b25b      	sxtb	r3, r3
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d116      	bne.n	8000cce <HAL_GPIO_EXTI_Callback+0xc2>
		{
			TIM3->CNT=20;
 8000ca0:	4b40      	ldr	r3, [pc, #256]	; (8000da4 <HAL_GPIO_EXTI_Callback+0x198>)
 8000ca2:	2214      	movs	r2, #20
 8000ca4:	625a      	str	r2, [r3, #36]	; 0x24
			SPI_SendWord(LB_ALL,2);
 8000ca6:	4b40      	ldr	r3, [pc, #256]	; (8000da8 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000ca8:	2102      	movs	r1, #2
 8000caa:	0018      	movs	r0, r3
 8000cac:	f000 fa26 	bl	80010fc <SPI_SendWord>
			SPI_LatchData();
 8000cb0:	f000 fa3a 	bl	8001128 <SPI_LatchData>
			counter_mode1=0;
 8000cb4:	4b3d      	ldr	r3, [pc, #244]	; (8000dac <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
			brightness_level_letter0_mode1=100;
 8000cba:	4b3d      	ldr	r3, [pc, #244]	; (8000db0 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000cbc:	2264      	movs	r2, #100	; 0x64
 8000cbe:	701a      	strb	r2, [r3, #0]
			brightness_level_letter1_mode1=100;
 8000cc0:	4b3c      	ldr	r3, [pc, #240]	; (8000db4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000cc2:	2264      	movs	r2, #100	; 0x64
 8000cc4:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim14);
 8000cc6:	4b35      	ldr	r3, [pc, #212]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x190>)
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f002 f80f 	bl	8002cec <HAL_TIM_Base_Start_IT>
		}
		if(mode==2)
 8000cce:	4b30      	ldr	r3, [pc, #192]	; (8000d90 <HAL_GPIO_EXTI_Callback+0x184>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	b25b      	sxtb	r3, r3
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d11a      	bne.n	8000d0e <HAL_GPIO_EXTI_Callback+0x102>
		{
			TIM3->CNT=20;
 8000cd8:	4b32      	ldr	r3, [pc, #200]	; (8000da4 <HAL_GPIO_EXTI_Callback+0x198>)
 8000cda:	2214      	movs	r2, #20
 8000cdc:	625a      	str	r2, [r3, #36]	; 0x24
			//position=10;
			SPI_SendWord(LB_OFF,2);
 8000cde:	4b36      	ldr	r3, [pc, #216]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000ce0:	2102      	movs	r1, #2
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f000 fa0a 	bl	80010fc <SPI_SendWord>
			SPI_LatchData();
 8000ce8:	f000 fa1e 	bl	8001128 <SPI_LatchData>
			counter_mode2=0;
 8000cec:	4b33      	ldr	r3, [pc, #204]	; (8000dbc <HAL_GPIO_EXTI_Callback+0x1b0>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
			TIM16->CCR1=brightness_level;
 8000cf2:	4b2b      	ldr	r3, [pc, #172]	; (8000da0 <HAL_GPIO_EXTI_Callback+0x194>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	4b31      	ldr	r3, [pc, #196]	; (8000dc0 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000cfa:	635a      	str	r2, [r3, #52]	; 0x34
			TIM17->CCR1=brightness_level;
 8000cfc:	4b28      	ldr	r3, [pc, #160]	; (8000da0 <HAL_GPIO_EXTI_Callback+0x194>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4b30      	ldr	r3, [pc, #192]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000d04:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_Base_Start_IT(&htim14);
 8000d06:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x190>)
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f001 ffef 	bl	8002cec <HAL_TIM_Base_Start_IT>
		}
		if(mode==3)
 8000d0e:	4b20      	ldr	r3, [pc, #128]	; (8000d90 <HAL_GPIO_EXTI_Callback+0x184>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	b25b      	sxtb	r3, r3
 8000d14:	2b03      	cmp	r3, #3
 8000d16:	d11a      	bne.n	8000d4e <HAL_GPIO_EXTI_Callback+0x142>
		{
			TIM3->CNT=20;
 8000d18:	4b22      	ldr	r3, [pc, #136]	; (8000da4 <HAL_GPIO_EXTI_Callback+0x198>)
 8000d1a:	2214      	movs	r2, #20
 8000d1c:	625a      	str	r2, [r3, #36]	; 0x24
			//position=10;
			SPI_SendWord(LB_OFF,2);
 8000d1e:	4b26      	ldr	r3, [pc, #152]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000d20:	2102      	movs	r1, #2
 8000d22:	0018      	movs	r0, r3
 8000d24:	f000 f9ea 	bl	80010fc <SPI_SendWord>
			SPI_LatchData();
 8000d28:	f000 f9fe 	bl	8001128 <SPI_LatchData>
			counter_mode3=0;
 8000d2c:	4b26      	ldr	r3, [pc, #152]	; (8000dc8 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
			TIM16->CCR1=brightness_level;
 8000d32:	4b1b      	ldr	r3, [pc, #108]	; (8000da0 <HAL_GPIO_EXTI_Callback+0x194>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000d3a:	635a      	str	r2, [r3, #52]	; 0x34
			TIM17->CCR1=brightness_level;
 8000d3c:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <HAL_GPIO_EXTI_Callback+0x194>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4b20      	ldr	r3, [pc, #128]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000d44:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_Base_Start_IT(&htim14);
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x190>)
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f001 ffcf 	bl	8002cec <HAL_TIM_Base_Start_IT>
		}
	}

	if(state>2) // state = 0
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <HAL_GPIO_EXTI_Callback+0x180>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d915      	bls.n	8000d84 <HAL_GPIO_EXTI_Callback+0x178>
	{
		HAL_TIM_Base_Stop_IT(&htim6);
 8000d58:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <HAL_GPIO_EXTI_Callback+0x18c>)
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f001 ffe8 	bl	8002d30 <HAL_TIM_Base_Stop_IT>
		LED_TurnOffAll();
 8000d60:	f000 f9f7 	bl	8001152 <LED_TurnOffAll>
		state=0;
 8000d64:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <HAL_GPIO_EXTI_Callback+0x180>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]

		if(mode==0)
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <HAL_GPIO_EXTI_Callback+0x184>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d105      	bne.n	8000d80 <HAL_GPIO_EXTI_Callback+0x174>
		{
			brightness_level=position;
 8000d74:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <HAL_GPIO_EXTI_Callback+0x194>)
 8000d7e:	701a      	strb	r2, [r3, #0]
		}
		if(mode==1)
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <HAL_GPIO_EXTI_Callback+0x184>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
		break;

	}*/

	//state=0; // zakomentuj/usun pozniej to
}
 8000d84:	46c0      	nop			; (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b002      	add	sp, #8
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000036 	.word	0x20000036
 8000d90:	20000037 	.word	0x20000037
 8000d94:	20000038 	.word	0x20000038
 8000d98:	20000108 	.word	0x20000108
 8000d9c:	200001ac 	.word	0x200001ac
 8000da0:	20000001 	.word	0x20000001
 8000da4:	40000400 	.word	0x40000400
 8000da8:	08003e20 	.word	0x08003e20
 8000dac:	2000003a 	.word	0x2000003a
 8000db0:	20000002 	.word	0x20000002
 8000db4:	20000003 	.word	0x20000003
 8000db8:	08003e24 	.word	0x08003e24
 8000dbc:	2000003b 	.word	0x2000003b
 8000dc0:	40014400 	.word	0x40014400
 8000dc4:	40014800 	.word	0x40014800
 8000dc8:	2000003d 	.word	0x2000003d
 8000dcc:	200000c0 	.word	0x200000c0

08000dd0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM6)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4ab2      	ldr	r2, [pc, #712]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d106      	bne.n	8000df0 <HAL_TIM_PeriodElapsedCallback+0x20>
		LED_ToggleSingle(mode);
 8000de2:	4bb2      	ldr	r3, [pc, #712]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	b25b      	sxtb	r3, r3
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	0018      	movs	r0, r3
 8000dec:	f000 fa13 	bl	8001216 <LED_ToggleSingle>
	if(htim->Instance==TIM14)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4aae      	ldr	r2, [pc, #696]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d000      	beq.n	8000dfc <HAL_TIM_PeriodElapsedCallback+0x2c>
 8000dfa:	e130      	b.n	800105e <HAL_TIM_PeriodElapsedCallback+0x28e>
	{
		if(mode==1)
 8000dfc:	4bab      	ldr	r3, [pc, #684]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	b25b      	sxtb	r3, r3
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d000      	beq.n	8000e08 <HAL_TIM_PeriodElapsedCallback+0x38>
 8000e06:	e0b4      	b.n	8000f72 <HAL_TIM_PeriodElapsedCallback+0x1a2>
		{
			counter_mode1++;
 8000e08:	4baa      	ldr	r3, [pc, #680]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	3301      	adds	r3, #1
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4ba8      	ldr	r3, [pc, #672]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000e14:	701a      	strb	r2, [r3, #0]
			if(counter_mode1>=threshold_mode1)
 8000e16:	4ba7      	ldr	r3, [pc, #668]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	4ba6      	ldr	r3, [pc, #664]	; (80010b8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d200      	bcs.n	8000e28 <HAL_TIM_PeriodElapsedCallback+0x58>
 8000e26:	e0a4      	b.n	8000f72 <HAL_TIM_PeriodElapsedCallback+0x1a2>
			{
				if((brightness_level_letter0_mode1>=0&&brightness_level_letter0_mode1<50)&&brightness_level_letter1_mode1==0)
 8000e28:	4ba4      	ldr	r3, [pc, #656]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	4ba3      	ldr	r3, [pc, #652]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	2b31      	cmp	r3, #49	; 0x31
 8000e34:	d80c      	bhi.n	8000e50 <HAL_TIM_PeriodElapsedCallback+0x80>
 8000e36:	4ba2      	ldr	r3, [pc, #648]	; (80010c0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d107      	bne.n	8000e50 <HAL_TIM_PeriodElapsedCallback+0x80>
				{
					brightness_level_letter0_mode1++;
 8000e40:	4b9e      	ldr	r3, [pc, #632]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	3301      	adds	r3, #1
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4b9c      	ldr	r3, [pc, #624]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000e4c:	701a      	strb	r2, [r3, #0]
 8000e4e:	e083      	b.n	8000f58 <HAL_TIM_PeriodElapsedCallback+0x188>
				}
				else if((brightness_level_letter0_mode1>=50&&brightness_level_letter0_mode1<100)&&(brightness_level_letter1_mode1>=0&&brightness_level_letter1_mode1<50))
 8000e50:	4b9a      	ldr	r3, [pc, #616]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	2b31      	cmp	r3, #49	; 0x31
 8000e58:	d91a      	bls.n	8000e90 <HAL_TIM_PeriodElapsedCallback+0xc0>
 8000e5a:	4b98      	ldr	r3, [pc, #608]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2b63      	cmp	r3, #99	; 0x63
 8000e62:	d815      	bhi.n	8000e90 <HAL_TIM_PeriodElapsedCallback+0xc0>
 8000e64:	4b96      	ldr	r3, [pc, #600]	; (80010c0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	4b95      	ldr	r3, [pc, #596]	; (80010c0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	2b31      	cmp	r3, #49	; 0x31
 8000e70:	d80e      	bhi.n	8000e90 <HAL_TIM_PeriodElapsedCallback+0xc0>
				{
					brightness_level_letter0_mode1++;
 8000e72:	4b92      	ldr	r3, [pc, #584]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	3301      	adds	r3, #1
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	4b8f      	ldr	r3, [pc, #572]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000e7e:	701a      	strb	r2, [r3, #0]
					brightness_level_letter1_mode1++;
 8000e80:	4b8f      	ldr	r3, [pc, #572]	; (80010c0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	3301      	adds	r3, #1
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4b8d      	ldr	r3, [pc, #564]	; (80010c0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000e8c:	701a      	strb	r2, [r3, #0]
 8000e8e:	e063      	b.n	8000f58 <HAL_TIM_PeriodElapsedCallback+0x188>
				}
				else if(brightness_level_letter0_mode1==100&&(brightness_level_letter1_mode1>=50&&brightness_level_letter1_mode1<100))
 8000e90:	4b8a      	ldr	r3, [pc, #552]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b64      	cmp	r3, #100	; 0x64
 8000e98:	d111      	bne.n	8000ebe <HAL_TIM_PeriodElapsedCallback+0xee>
 8000e9a:	4b89      	ldr	r3, [pc, #548]	; (80010c0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b31      	cmp	r3, #49	; 0x31
 8000ea2:	d90c      	bls.n	8000ebe <HAL_TIM_PeriodElapsedCallback+0xee>
 8000ea4:	4b86      	ldr	r3, [pc, #536]	; (80010c0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2b63      	cmp	r3, #99	; 0x63
 8000eac:	d807      	bhi.n	8000ebe <HAL_TIM_PeriodElapsedCallback+0xee>
				{
					brightness_level_letter1_mode1++;
 8000eae:	4b84      	ldr	r3, [pc, #528]	; (80010c0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	4b81      	ldr	r3, [pc, #516]	; (80010c0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000eba:	701a      	strb	r2, [r3, #0]
 8000ebc:	e04c      	b.n	8000f58 <HAL_TIM_PeriodElapsedCallback+0x188>
				}
				else if((brightness_level_letter0_mode1>50&&brightness_level_letter0_mode1<=100)&&brightness_level_letter1_mode1==100)
 8000ebe:	4b7f      	ldr	r3, [pc, #508]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	2b32      	cmp	r3, #50	; 0x32
 8000ec6:	d911      	bls.n	8000eec <HAL_TIM_PeriodElapsedCallback+0x11c>
 8000ec8:	4b7c      	ldr	r3, [pc, #496]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b64      	cmp	r3, #100	; 0x64
 8000ed0:	d80c      	bhi.n	8000eec <HAL_TIM_PeriodElapsedCallback+0x11c>
 8000ed2:	4b7b      	ldr	r3, [pc, #492]	; (80010c0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	2b64      	cmp	r3, #100	; 0x64
 8000eda:	d107      	bne.n	8000eec <HAL_TIM_PeriodElapsedCallback+0x11c>
				{
					brightness_level_letter0_mode1--;
 8000edc:	4b77      	ldr	r3, [pc, #476]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	4b75      	ldr	r3, [pc, #468]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000ee8:	701a      	strb	r2, [r3, #0]
 8000eea:	e035      	b.n	8000f58 <HAL_TIM_PeriodElapsedCallback+0x188>
				}
				else if((brightness_level_letter0_mode1>=0&&brightness_level_letter0_mode1<=50)&&(brightness_level_letter1_mode1>50&&brightness_level_letter1_mode1<=100))
 8000eec:	4b73      	ldr	r3, [pc, #460]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4b72      	ldr	r3, [pc, #456]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b32      	cmp	r3, #50	; 0x32
 8000ef8:	d818      	bhi.n	8000f2c <HAL_TIM_PeriodElapsedCallback+0x15c>
 8000efa:	4b71      	ldr	r3, [pc, #452]	; (80010c0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b32      	cmp	r3, #50	; 0x32
 8000f02:	d913      	bls.n	8000f2c <HAL_TIM_PeriodElapsedCallback+0x15c>
 8000f04:	4b6e      	ldr	r3, [pc, #440]	; (80010c0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b64      	cmp	r3, #100	; 0x64
 8000f0c:	d80e      	bhi.n	8000f2c <HAL_TIM_PeriodElapsedCallback+0x15c>
				{
					brightness_level_letter0_mode1--;
 8000f0e:	4b6b      	ldr	r3, [pc, #428]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	3b01      	subs	r3, #1
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	4b68      	ldr	r3, [pc, #416]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000f1a:	701a      	strb	r2, [r3, #0]
					brightness_level_letter1_mode1--;
 8000f1c:	4b68      	ldr	r3, [pc, #416]	; (80010c0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	3b01      	subs	r3, #1
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4b66      	ldr	r3, [pc, #408]	; (80010c0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000f28:	701a      	strb	r2, [r3, #0]
 8000f2a:	e015      	b.n	8000f58 <HAL_TIM_PeriodElapsedCallback+0x188>
				}
				else if(brightness_level_letter0_mode1==0&&(brightness_level_letter1_mode1>0&&brightness_level_letter1_mode1<=50))
 8000f2c:	4b63      	ldr	r3, [pc, #396]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d110      	bne.n	8000f58 <HAL_TIM_PeriodElapsedCallback+0x188>
 8000f36:	4b62      	ldr	r3, [pc, #392]	; (80010c0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d00b      	beq.n	8000f58 <HAL_TIM_PeriodElapsedCallback+0x188>
 8000f40:	4b5f      	ldr	r3, [pc, #380]	; (80010c0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b32      	cmp	r3, #50	; 0x32
 8000f48:	d806      	bhi.n	8000f58 <HAL_TIM_PeriodElapsedCallback+0x188>
				{
					brightness_level_letter1_mode1--;
 8000f4a:	4b5d      	ldr	r3, [pc, #372]	; (80010c0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	3b01      	subs	r3, #1
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	4b5a      	ldr	r3, [pc, #360]	; (80010c0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000f56:	701a      	strb	r2, [r3, #0]
				}

				TIM16->CCR1=brightness_level_letter0_mode1;
 8000f58:	4b58      	ldr	r3, [pc, #352]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4b59      	ldr	r3, [pc, #356]	; (80010c4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000f60:	635a      	str	r2, [r3, #52]	; 0x34
				TIM17->CCR1=brightness_level_letter1_mode1;
 8000f62:	4b57      	ldr	r3, [pc, #348]	; (80010c0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	4b57      	ldr	r3, [pc, #348]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000f6a:	635a      	str	r2, [r3, #52]	; 0x34
				counter_mode1=0;
 8000f6c:	4b51      	ldr	r3, [pc, #324]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]
			}
		}

		if(mode==2)
 8000f72:	4b4e      	ldr	r3, [pc, #312]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	b25b      	sxtb	r3, r3
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d135      	bne.n	8000fe8 <HAL_TIM_PeriodElapsedCallback+0x218>
		{
			counter_mode2++;
 8000f7c:	4b53      	ldr	r3, [pc, #332]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	3301      	adds	r3, #1
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4b51      	ldr	r3, [pc, #324]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000f88:	701a      	strb	r2, [r3, #0]
			if(counter_mode2>=threshold_mode2)
 8000f8a:	4b50      	ldr	r3, [pc, #320]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	4b4f      	ldr	r3, [pc, #316]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d325      	bcc.n	8000fe8 <HAL_TIM_PeriodElapsedCallback+0x218>
			{
				SPI_SendWord(&LB_MODE2[phase_mode2],2);
 8000f9c:	4b4d      	ldr	r3, [pc, #308]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	005a      	lsls	r2, r3, #1
 8000fa4:	4b4c      	ldr	r3, [pc, #304]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8000fa6:	18d3      	adds	r3, r2, r3
 8000fa8:	2102      	movs	r1, #2
 8000faa:	0018      	movs	r0, r3
 8000fac:	f000 f8a6 	bl	80010fc <SPI_SendWord>
				SPI_LatchData();
 8000fb0:	f000 f8ba 	bl	8001128 <SPI_LatchData>
				counter_mode2=0;
 8000fb4:	4b45      	ldr	r3, [pc, #276]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
				if(phase_mode2<70)
 8000fba:	4b46      	ldr	r3, [pc, #280]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b45      	cmp	r3, #69	; 0x45
 8000fc2:	d807      	bhi.n	8000fd4 <HAL_TIM_PeriodElapsedCallback+0x204>
					phase_mode2=phase_mode2+2;
 8000fc4:	4b43      	ldr	r3, [pc, #268]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	3302      	adds	r3, #2
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4b41      	ldr	r3, [pc, #260]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000fd0:	701a      	strb	r2, [r3, #0]
 8000fd2:	e009      	b.n	8000fe8 <HAL_TIM_PeriodElapsedCallback+0x218>
				else
				{
					SPI_SendWord(LB_OFF,2);
 8000fd4:	4b41      	ldr	r3, [pc, #260]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f000 f88f 	bl	80010fc <SPI_SendWord>
					SPI_LatchData();
 8000fde:	f000 f8a3 	bl	8001128 <SPI_LatchData>
					phase_mode2=0;
 8000fe2:	4b3c      	ldr	r3, [pc, #240]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
				}
			}

		}
		if(mode==3)
 8000fe8:	4b30      	ldr	r3, [pc, #192]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	b25b      	sxtb	r3, r3
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d135      	bne.n	800105e <HAL_TIM_PeriodElapsedCallback+0x28e>
		{
			counter_mode3++;
 8000ff2:	4b3b      	ldr	r3, [pc, #236]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	4b38      	ldr	r3, [pc, #224]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000ffe:	701a      	strb	r2, [r3, #0]
			if(counter_mode3>=threshold_mode3)
 8001000:	4b37      	ldr	r3, [pc, #220]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	b29a      	uxth	r2, r3
 8001008:	4b36      	ldr	r3, [pc, #216]	; (80010e4 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800100a:	881b      	ldrh	r3, [r3, #0]
 800100c:	b29b      	uxth	r3, r3
 800100e:	429a      	cmp	r2, r3
 8001010:	d325      	bcc.n	800105e <HAL_TIM_PeriodElapsedCallback+0x28e>
			{
				SPI_SendWord(&LB_MODE3[phase_mode3],2);
 8001012:	4b35      	ldr	r3, [pc, #212]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	005a      	lsls	r2, r3, #1
 800101a:	4b34      	ldr	r3, [pc, #208]	; (80010ec <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800101c:	18d3      	adds	r3, r2, r3
 800101e:	2102      	movs	r1, #2
 8001020:	0018      	movs	r0, r3
 8001022:	f000 f86b 	bl	80010fc <SPI_SendWord>
				SPI_LatchData();
 8001026:	f000 f87f 	bl	8001128 <SPI_LatchData>
				counter_mode3=0;
 800102a:	4b2d      	ldr	r3, [pc, #180]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]
				if(phase_mode3<12)
 8001030:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b0b      	cmp	r3, #11
 8001038:	d807      	bhi.n	800104a <HAL_TIM_PeriodElapsedCallback+0x27a>
					phase_mode3=phase_mode3+2;
 800103a:	4b2b      	ldr	r3, [pc, #172]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	3302      	adds	r3, #2
 8001042:	b2da      	uxtb	r2, r3
 8001044:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001046:	701a      	strb	r2, [r3, #0]
 8001048:	e009      	b.n	800105e <HAL_TIM_PeriodElapsedCallback+0x28e>
				else
				{
					SPI_SendWord(LB_OFF,2);
 800104a:	4b24      	ldr	r3, [pc, #144]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800104c:	2102      	movs	r1, #2
 800104e:	0018      	movs	r0, r3
 8001050:	f000 f854 	bl	80010fc <SPI_SendWord>
					SPI_LatchData();
 8001054:	f000 f868 	bl	8001128 <SPI_LatchData>
					phase_mode3=0;
 8001058:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
				}
			}

		}
	}
	if(htim->Instance==TIM15)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a23      	ldr	r2, [pc, #140]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d11b      	bne.n	80010a0 <HAL_TIM_PeriodElapsedCallback+0x2d0>
	{
		brightness_level_startup--;
 8001068:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	b2db      	uxtb	r3, r3
 800106e:	3b01      	subs	r3, #1
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4b20      	ldr	r3, [pc, #128]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001074:	701a      	strb	r2, [r3, #0]
		TIM16->CCR1=brightness_level_startup;
 8001076:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b2da      	uxtb	r2, r3
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800107e:	635a      	str	r2, [r3, #52]	; 0x34
		TIM17->CCR1=brightness_level_startup;
 8001080:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001088:	635a      	str	r2, [r3, #52]	; 0x34

		if(brightness_level_startup==0)
 800108a:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	d105      	bne.n	80010a0 <HAL_TIM_PeriodElapsedCallback+0x2d0>
		{
			brightness_level_startup=100;
 8001094:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001096:	2264      	movs	r2, #100	; 0x64
 8001098:	701a      	strb	r2, [r3, #0]
			startup_end=1;
 800109a:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800109c:	2201      	movs	r2, #1
 800109e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80010a0:	46c0      	nop			; (mov r8, r8)
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b002      	add	sp, #8
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40001000 	.word	0x40001000
 80010ac:	20000037 	.word	0x20000037
 80010b0:	40002000 	.word	0x40002000
 80010b4:	2000003a 	.word	0x2000003a
 80010b8:	20000004 	.word	0x20000004
 80010bc:	20000002 	.word	0x20000002
 80010c0:	20000003 	.word	0x20000003
 80010c4:	40014400 	.word	0x40014400
 80010c8:	40014800 	.word	0x40014800
 80010cc:	2000003b 	.word	0x2000003b
 80010d0:	20000006 	.word	0x20000006
 80010d4:	2000003c 	.word	0x2000003c
 80010d8:	08003e28 	.word	0x08003e28
 80010dc:	08003e24 	.word	0x08003e24
 80010e0:	2000003d 	.word	0x2000003d
 80010e4:	20000008 	.word	0x20000008
 80010e8:	2000003e 	.word	0x2000003e
 80010ec:	08003eb8 	.word	0x08003eb8
 80010f0:	40014000 	.word	0x40014000
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000039 	.word	0x20000039

080010fc <SPI_SendWord>:
		}
	}
}*/
// ------------------------------------------------------------------------------------
void SPI_SendWord(uint16_t data[], uint8_t num_of_words)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	000a      	movs	r2, r1
 8001106:	1cfb      	adds	r3, r7, #3
 8001108:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(data), num_of_words, HAL_MAX_DELAY);
 800110a:	1cfb      	adds	r3, r7, #3
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	b29a      	uxth	r2, r3
 8001110:	2301      	movs	r3, #1
 8001112:	425b      	negs	r3, r3
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	4803      	ldr	r0, [pc, #12]	; (8001124 <SPI_SendWord+0x28>)
 8001118:	f001 fb10 	bl	800273c <HAL_SPI_Transmit>
}
 800111c:	46c0      	nop			; (mov r8, r8)
 800111e:	46bd      	mov	sp, r7
 8001120:	b002      	add	sp, #8
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000148 	.word	0x20000148

08001128 <SPI_LatchData>:

void SPI_LatchData(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LATCH_GPIO_Port, LATCH_Pin, GPIO_PIN_SET);
 800112c:	2380      	movs	r3, #128	; 0x80
 800112e:	0219      	lsls	r1, r3, #8
 8001130:	2390      	movs	r3, #144	; 0x90
 8001132:	05db      	lsls	r3, r3, #23
 8001134:	2201      	movs	r2, #1
 8001136:	0018      	movs	r0, r3
 8001138:	f000 fdc6 	bl	8001cc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LATCH_GPIO_Port, LATCH_Pin, GPIO_PIN_RESET);
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	0219      	lsls	r1, r3, #8
 8001140:	2390      	movs	r3, #144	; 0x90
 8001142:	05db      	lsls	r3, r3, #23
 8001144:	2200      	movs	r2, #0
 8001146:	0018      	movs	r0, r3
 8001148:	f000 fdbe 	bl	8001cc8 <HAL_GPIO_WritePin>
}
 800114c:	46c0      	nop			; (mov r8, r8)
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <LED_TurnOffAll>:
void LED_TurnOffAll(void)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8001156:	2380      	movs	r3, #128	; 0x80
 8001158:	0059      	lsls	r1, r3, #1
 800115a:	2390      	movs	r3, #144	; 0x90
 800115c:	05db      	lsls	r3, r3, #23
 800115e:	2200      	movs	r2, #0
 8001160:	0018      	movs	r0, r3
 8001162:	f000 fdb1 	bl	8001cc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	0099      	lsls	r1, r3, #2
 800116a:	2390      	movs	r3, #144	; 0x90
 800116c:	05db      	lsls	r3, r3, #23
 800116e:	2200      	movs	r2, #0
 8001170:	0018      	movs	r0, r3
 8001172:	f000 fda9 	bl	8001cc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001176:	2380      	movs	r3, #128	; 0x80
 8001178:	00d9      	lsls	r1, r3, #3
 800117a:	2390      	movs	r3, #144	; 0x90
 800117c:	05db      	lsls	r3, r3, #23
 800117e:	2200      	movs	r2, #0
 8001180:	0018      	movs	r0, r3
 8001182:	f000 fda1 	bl	8001cc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001186:	2380      	movs	r3, #128	; 0x80
 8001188:	0119      	lsls	r1, r3, #4
 800118a:	2390      	movs	r3, #144	; 0x90
 800118c:	05db      	lsls	r3, r3, #23
 800118e:	2200      	movs	r2, #0
 8001190:	0018      	movs	r0, r3
 8001192:	f000 fd99 	bl	8001cc8 <HAL_GPIO_WritePin>
}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <LED_TurnOnSingle>:
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
}
void LED_TurnOnSingle(uint8_t led_num)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	0002      	movs	r2, r0
 80011a4:	1dfb      	adds	r3, r7, #7
 80011a6:	701a      	strb	r2, [r3, #0]
	LED_TurnOffAll();
 80011a8:	f7ff ffd3 	bl	8001152 <LED_TurnOffAll>
	switch(led_num)
 80011ac:	1dfb      	adds	r3, r7, #7
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b03      	cmp	r3, #3
 80011b2:	d023      	beq.n	80011fc <LED_TurnOnSingle+0x60>
 80011b4:	dc2b      	bgt.n	800120e <LED_TurnOnSingle+0x72>
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d017      	beq.n	80011ea <LED_TurnOnSingle+0x4e>
 80011ba:	dc28      	bgt.n	800120e <LED_TurnOnSingle+0x72>
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d002      	beq.n	80011c6 <LED_TurnOnSingle+0x2a>
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d009      	beq.n	80011d8 <LED_TurnOnSingle+0x3c>
			break;
		case 3:
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
			break;
	}
}
 80011c4:	e023      	b.n	800120e <LED_TurnOnSingle+0x72>
			HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 80011c6:	2380      	movs	r3, #128	; 0x80
 80011c8:	0059      	lsls	r1, r3, #1
 80011ca:	2390      	movs	r3, #144	; 0x90
 80011cc:	05db      	lsls	r3, r3, #23
 80011ce:	2201      	movs	r2, #1
 80011d0:	0018      	movs	r0, r3
 80011d2:	f000 fd79 	bl	8001cc8 <HAL_GPIO_WritePin>
			break;
 80011d6:	e01a      	b.n	800120e <LED_TurnOnSingle+0x72>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80011d8:	2380      	movs	r3, #128	; 0x80
 80011da:	0099      	lsls	r1, r3, #2
 80011dc:	2390      	movs	r3, #144	; 0x90
 80011de:	05db      	lsls	r3, r3, #23
 80011e0:	2201      	movs	r2, #1
 80011e2:	0018      	movs	r0, r3
 80011e4:	f000 fd70 	bl	8001cc8 <HAL_GPIO_WritePin>
			break;
 80011e8:	e011      	b.n	800120e <LED_TurnOnSingle+0x72>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80011ea:	2380      	movs	r3, #128	; 0x80
 80011ec:	00d9      	lsls	r1, r3, #3
 80011ee:	2390      	movs	r3, #144	; 0x90
 80011f0:	05db      	lsls	r3, r3, #23
 80011f2:	2201      	movs	r2, #1
 80011f4:	0018      	movs	r0, r3
 80011f6:	f000 fd67 	bl	8001cc8 <HAL_GPIO_WritePin>
			break;
 80011fa:	e008      	b.n	800120e <LED_TurnOnSingle+0x72>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	0119      	lsls	r1, r3, #4
 8001200:	2390      	movs	r3, #144	; 0x90
 8001202:	05db      	lsls	r3, r3, #23
 8001204:	2201      	movs	r2, #1
 8001206:	0018      	movs	r0, r3
 8001208:	f000 fd5e 	bl	8001cc8 <HAL_GPIO_WritePin>
			break;
 800120c:	46c0      	nop			; (mov r8, r8)
}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	46bd      	mov	sp, r7
 8001212:	b002      	add	sp, #8
 8001214:	bd80      	pop	{r7, pc}

08001216 <LED_ToggleSingle>:
void LED_ToggleSingle(uint8_t led_num)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	0002      	movs	r2, r0
 800121e:	1dfb      	adds	r3, r7, #7
 8001220:	701a      	strb	r2, [r3, #0]
	switch(led_num)
 8001222:	1dfb      	adds	r3, r7, #7
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b03      	cmp	r3, #3
 8001228:	d023      	beq.n	8001272 <LED_ToggleSingle+0x5c>
 800122a:	dc2b      	bgt.n	8001284 <LED_ToggleSingle+0x6e>
 800122c:	2b02      	cmp	r3, #2
 800122e:	d017      	beq.n	8001260 <LED_ToggleSingle+0x4a>
 8001230:	dc28      	bgt.n	8001284 <LED_ToggleSingle+0x6e>
 8001232:	2b00      	cmp	r3, #0
 8001234:	d002      	beq.n	800123c <LED_ToggleSingle+0x26>
 8001236:	2b01      	cmp	r3, #1
 8001238:	d009      	beq.n	800124e <LED_ToggleSingle+0x38>
			break;
		case 3:
			HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
			break;
	}
}
 800123a:	e023      	b.n	8001284 <LED_ToggleSingle+0x6e>
			HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 800123c:	2380      	movs	r3, #128	; 0x80
 800123e:	005a      	lsls	r2, r3, #1
 8001240:	2390      	movs	r3, #144	; 0x90
 8001242:	05db      	lsls	r3, r3, #23
 8001244:	0011      	movs	r1, r2
 8001246:	0018      	movs	r0, r3
 8001248:	f000 fd5b 	bl	8001d02 <HAL_GPIO_TogglePin>
			break;
 800124c:	e01a      	b.n	8001284 <LED_ToggleSingle+0x6e>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800124e:	2380      	movs	r3, #128	; 0x80
 8001250:	009a      	lsls	r2, r3, #2
 8001252:	2390      	movs	r3, #144	; 0x90
 8001254:	05db      	lsls	r3, r3, #23
 8001256:	0011      	movs	r1, r2
 8001258:	0018      	movs	r0, r3
 800125a:	f000 fd52 	bl	8001d02 <HAL_GPIO_TogglePin>
			break;
 800125e:	e011      	b.n	8001284 <LED_ToggleSingle+0x6e>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001260:	2380      	movs	r3, #128	; 0x80
 8001262:	00da      	lsls	r2, r3, #3
 8001264:	2390      	movs	r3, #144	; 0x90
 8001266:	05db      	lsls	r3, r3, #23
 8001268:	0011      	movs	r1, r2
 800126a:	0018      	movs	r0, r3
 800126c:	f000 fd49 	bl	8001d02 <HAL_GPIO_TogglePin>
			break;
 8001270:	e008      	b.n	8001284 <LED_ToggleSingle+0x6e>
			HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001272:	2380      	movs	r3, #128	; 0x80
 8001274:	011a      	lsls	r2, r3, #4
 8001276:	2390      	movs	r3, #144	; 0x90
 8001278:	05db      	lsls	r3, r3, #23
 800127a:	0011      	movs	r1, r2
 800127c:	0018      	movs	r0, r3
 800127e:	f000 fd40 	bl	8001d02 <HAL_GPIO_TogglePin>
			break;
 8001282:	46c0      	nop			; (mov r8, r8)
}
 8001284:	46c0      	nop			; (mov r8, r8)
 8001286:	46bd      	mov	sp, r7
 8001288:	b002      	add	sp, #8
 800128a:	bd80      	pop	{r7, pc}

0800128c <LB_Startup>:
void LB_Startup(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	SPI_SendWord(LB_ALL,2);
 8001290:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <LB_Startup+0x3c>)
 8001292:	2102      	movs	r1, #2
 8001294:	0018      	movs	r0, r3
 8001296:	f7ff ff31 	bl	80010fc <SPI_SendWord>
	SPI_LatchData();
 800129a:	f7ff ff45 	bl	8001128 <SPI_LatchData>
	HAL_TIM_Base_Start_IT(&htim15);
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <LB_Startup+0x40>)
 80012a0:	0018      	movs	r0, r3
 80012a2:	f001 fd23 	bl	8002cec <HAL_TIM_Base_Start_IT>
	while(startup_end==0);
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <LB_Startup+0x44>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0fa      	beq.n	80012a8 <LB_Startup+0x1c>
	HAL_TIM_Base_Stop_IT(&htim15);
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <LB_Startup+0x40>)
 80012b4:	0018      	movs	r0, r3
 80012b6:	f001 fd3b 	bl	8002d30 <HAL_TIM_Base_Stop_IT>
	startup_end=0;
 80012ba:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <LB_Startup+0x44>)
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
}
 80012c0:	46c0      	nop			; (mov r8, r8)
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	08003e20 	.word	0x08003e20
 80012cc:	20000040 	.word	0x20000040
 80012d0:	20000039 	.word	0x20000039

080012d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012d8:	46c0      	nop			; (mov r8, r8)
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e6:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <HAL_MspInit+0x44>)
 80012e8:	699a      	ldr	r2, [r3, #24]
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <HAL_MspInit+0x44>)
 80012ec:	2101      	movs	r1, #1
 80012ee:	430a      	orrs	r2, r1
 80012f0:	619a      	str	r2, [r3, #24]
 80012f2:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <HAL_MspInit+0x44>)
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	2201      	movs	r2, #1
 80012f8:	4013      	ands	r3, r2
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fe:	4b09      	ldr	r3, [pc, #36]	; (8001324 <HAL_MspInit+0x44>)
 8001300:	69da      	ldr	r2, [r3, #28]
 8001302:	4b08      	ldr	r3, [pc, #32]	; (8001324 <HAL_MspInit+0x44>)
 8001304:	2180      	movs	r1, #128	; 0x80
 8001306:	0549      	lsls	r1, r1, #21
 8001308:	430a      	orrs	r2, r1
 800130a:	61da      	str	r2, [r3, #28]
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <HAL_MspInit+0x44>)
 800130e:	69da      	ldr	r2, [r3, #28]
 8001310:	2380      	movs	r3, #128	; 0x80
 8001312:	055b      	lsls	r3, r3, #21
 8001314:	4013      	ands	r3, r2
 8001316:	603b      	str	r3, [r7, #0]
 8001318:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	46bd      	mov	sp, r7
 800131e:	b002      	add	sp, #8
 8001320:	bd80      	pop	{r7, pc}
 8001322:	46c0      	nop			; (mov r8, r8)
 8001324:	40021000 	.word	0x40021000

08001328 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b08b      	sub	sp, #44	; 0x2c
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	2414      	movs	r4, #20
 8001332:	193b      	adds	r3, r7, r4
 8001334:	0018      	movs	r0, r3
 8001336:	2314      	movs	r3, #20
 8001338:	001a      	movs	r2, r3
 800133a:	2100      	movs	r1, #0
 800133c:	f002 fd4c 	bl	8003dd8 <memset>
  if(hspi->Instance==SPI1)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a1c      	ldr	r2, [pc, #112]	; (80013b8 <HAL_SPI_MspInit+0x90>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d131      	bne.n	80013ae <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800134a:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <HAL_SPI_MspInit+0x94>)
 800134c:	699a      	ldr	r2, [r3, #24]
 800134e:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <HAL_SPI_MspInit+0x94>)
 8001350:	2180      	movs	r1, #128	; 0x80
 8001352:	0149      	lsls	r1, r1, #5
 8001354:	430a      	orrs	r2, r1
 8001356:	619a      	str	r2, [r3, #24]
 8001358:	4b18      	ldr	r3, [pc, #96]	; (80013bc <HAL_SPI_MspInit+0x94>)
 800135a:	699a      	ldr	r2, [r3, #24]
 800135c:	2380      	movs	r3, #128	; 0x80
 800135e:	015b      	lsls	r3, r3, #5
 8001360:	4013      	ands	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <HAL_SPI_MspInit+0x94>)
 8001368:	695a      	ldr	r2, [r3, #20]
 800136a:	4b14      	ldr	r3, [pc, #80]	; (80013bc <HAL_SPI_MspInit+0x94>)
 800136c:	2180      	movs	r1, #128	; 0x80
 800136e:	02c9      	lsls	r1, r1, #11
 8001370:	430a      	orrs	r2, r1
 8001372:	615a      	str	r2, [r3, #20]
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <HAL_SPI_MspInit+0x94>)
 8001376:	695a      	ldr	r2, [r3, #20]
 8001378:	2380      	movs	r3, #128	; 0x80
 800137a:	02db      	lsls	r3, r3, #11
 800137c:	4013      	ands	r3, r2
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001382:	0021      	movs	r1, r4
 8001384:	187b      	adds	r3, r7, r1
 8001386:	2228      	movs	r2, #40	; 0x28
 8001388:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	187b      	adds	r3, r7, r1
 800138c:	2202      	movs	r2, #2
 800138e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	187b      	adds	r3, r7, r1
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001396:	187b      	adds	r3, r7, r1
 8001398:	2203      	movs	r2, #3
 800139a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800139c:	187b      	adds	r3, r7, r1
 800139e:	2200      	movs	r2, #0
 80013a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a2:	187b      	adds	r3, r7, r1
 80013a4:	4a06      	ldr	r2, [pc, #24]	; (80013c0 <HAL_SPI_MspInit+0x98>)
 80013a6:	0019      	movs	r1, r3
 80013a8:	0010      	movs	r0, r2
 80013aa:	f000 fb1d 	bl	80019e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	46bd      	mov	sp, r7
 80013b2:	b00b      	add	sp, #44	; 0x2c
 80013b4:	bd90      	pop	{r4, r7, pc}
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	40013000 	.word	0x40013000
 80013bc:	40021000 	.word	0x40021000
 80013c0:	48000400 	.word	0x48000400

080013c4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80013c4:	b590      	push	{r4, r7, lr}
 80013c6:	b08b      	sub	sp, #44	; 0x2c
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	2414      	movs	r4, #20
 80013ce:	193b      	adds	r3, r7, r4
 80013d0:	0018      	movs	r0, r3
 80013d2:	2314      	movs	r3, #20
 80013d4:	001a      	movs	r2, r3
 80013d6:	2100      	movs	r1, #0
 80013d8:	f002 fcfe 	bl	8003dd8 <memset>
  if(htim_encoder->Instance==TIM3)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a1f      	ldr	r2, [pc, #124]	; (8001460 <HAL_TIM_Encoder_MspInit+0x9c>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d138      	bne.n	8001458 <HAL_TIM_Encoder_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013e6:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <HAL_TIM_Encoder_MspInit+0xa0>)
 80013e8:	69da      	ldr	r2, [r3, #28]
 80013ea:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <HAL_TIM_Encoder_MspInit+0xa0>)
 80013ec:	2102      	movs	r1, #2
 80013ee:	430a      	orrs	r2, r1
 80013f0:	61da      	str	r2, [r3, #28]
 80013f2:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <HAL_TIM_Encoder_MspInit+0xa0>)
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	2202      	movs	r2, #2
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fe:	4b19      	ldr	r3, [pc, #100]	; (8001464 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001400:	695a      	ldr	r2, [r3, #20]
 8001402:	4b18      	ldr	r3, [pc, #96]	; (8001464 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001404:	2180      	movs	r1, #128	; 0x80
 8001406:	0289      	lsls	r1, r1, #10
 8001408:	430a      	orrs	r2, r1
 800140a:	615a      	str	r2, [r3, #20]
 800140c:	4b15      	ldr	r3, [pc, #84]	; (8001464 <HAL_TIM_Encoder_MspInit+0xa0>)
 800140e:	695a      	ldr	r2, [r3, #20]
 8001410:	2380      	movs	r3, #128	; 0x80
 8001412:	029b      	lsls	r3, r3, #10
 8001414:	4013      	ands	r3, r2
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800141a:	0021      	movs	r1, r4
 800141c:	187b      	adds	r3, r7, r1
 800141e:	22c0      	movs	r2, #192	; 0xc0
 8001420:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	187b      	adds	r3, r7, r1
 8001424:	2202      	movs	r2, #2
 8001426:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	187b      	adds	r3, r7, r1
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	187b      	adds	r3, r7, r1
 8001430:	2200      	movs	r2, #0
 8001432:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001434:	187b      	adds	r3, r7, r1
 8001436:	2201      	movs	r2, #1
 8001438:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	187a      	adds	r2, r7, r1
 800143c:	2390      	movs	r3, #144	; 0x90
 800143e:	05db      	lsls	r3, r3, #23
 8001440:	0011      	movs	r1, r2
 8001442:	0018      	movs	r0, r3
 8001444:	f000 fad0 	bl	80019e8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001448:	2200      	movs	r2, #0
 800144a:	2100      	movs	r1, #0
 800144c:	2010      	movs	r0, #16
 800144e:	f000 fa99 	bl	8001984 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001452:	2010      	movs	r0, #16
 8001454:	f000 faab 	bl	80019ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001458:	46c0      	nop			; (mov r8, r8)
 800145a:	46bd      	mov	sp, r7
 800145c:	b00b      	add	sp, #44	; 0x2c
 800145e:	bd90      	pop	{r4, r7, pc}
 8001460:	40000400 	.word	0x40000400
 8001464:	40021000 	.word	0x40021000

08001468 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b088      	sub	sp, #32
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a3d      	ldr	r2, [pc, #244]	; (800156c <HAL_TIM_Base_MspInit+0x104>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d114      	bne.n	80014a4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800147a:	4b3d      	ldr	r3, [pc, #244]	; (8001570 <HAL_TIM_Base_MspInit+0x108>)
 800147c:	69da      	ldr	r2, [r3, #28]
 800147e:	4b3c      	ldr	r3, [pc, #240]	; (8001570 <HAL_TIM_Base_MspInit+0x108>)
 8001480:	2110      	movs	r1, #16
 8001482:	430a      	orrs	r2, r1
 8001484:	61da      	str	r2, [r3, #28]
 8001486:	4b3a      	ldr	r3, [pc, #232]	; (8001570 <HAL_TIM_Base_MspInit+0x108>)
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	2210      	movs	r2, #16
 800148c:	4013      	ands	r3, r2
 800148e:	61fb      	str	r3, [r7, #28]
 8001490:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2100      	movs	r1, #0
 8001496:	2011      	movs	r0, #17
 8001498:	f000 fa74 	bl	8001984 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800149c:	2011      	movs	r0, #17
 800149e:	f000 fa86 	bl	80019ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80014a2:	e05e      	b.n	8001562 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM14)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a32      	ldr	r2, [pc, #200]	; (8001574 <HAL_TIM_Base_MspInit+0x10c>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d116      	bne.n	80014dc <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80014ae:	4b30      	ldr	r3, [pc, #192]	; (8001570 <HAL_TIM_Base_MspInit+0x108>)
 80014b0:	69da      	ldr	r2, [r3, #28]
 80014b2:	4b2f      	ldr	r3, [pc, #188]	; (8001570 <HAL_TIM_Base_MspInit+0x108>)
 80014b4:	2180      	movs	r1, #128	; 0x80
 80014b6:	0049      	lsls	r1, r1, #1
 80014b8:	430a      	orrs	r2, r1
 80014ba:	61da      	str	r2, [r3, #28]
 80014bc:	4b2c      	ldr	r3, [pc, #176]	; (8001570 <HAL_TIM_Base_MspInit+0x108>)
 80014be:	69da      	ldr	r2, [r3, #28]
 80014c0:	2380      	movs	r3, #128	; 0x80
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
 80014c8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2100      	movs	r1, #0
 80014ce:	2013      	movs	r0, #19
 80014d0:	f000 fa58 	bl	8001984 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80014d4:	2013      	movs	r0, #19
 80014d6:	f000 fa6a 	bl	80019ae <HAL_NVIC_EnableIRQ>
}
 80014da:	e042      	b.n	8001562 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM15)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a25      	ldr	r2, [pc, #148]	; (8001578 <HAL_TIM_Base_MspInit+0x110>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d116      	bne.n	8001514 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80014e6:	4b22      	ldr	r3, [pc, #136]	; (8001570 <HAL_TIM_Base_MspInit+0x108>)
 80014e8:	699a      	ldr	r2, [r3, #24]
 80014ea:	4b21      	ldr	r3, [pc, #132]	; (8001570 <HAL_TIM_Base_MspInit+0x108>)
 80014ec:	2180      	movs	r1, #128	; 0x80
 80014ee:	0249      	lsls	r1, r1, #9
 80014f0:	430a      	orrs	r2, r1
 80014f2:	619a      	str	r2, [r3, #24]
 80014f4:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <HAL_TIM_Base_MspInit+0x108>)
 80014f6:	699a      	ldr	r2, [r3, #24]
 80014f8:	2380      	movs	r3, #128	; 0x80
 80014fa:	025b      	lsls	r3, r3, #9
 80014fc:	4013      	ands	r3, r2
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2100      	movs	r1, #0
 8001506:	2014      	movs	r0, #20
 8001508:	f000 fa3c 	bl	8001984 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 800150c:	2014      	movs	r0, #20
 800150e:	f000 fa4e 	bl	80019ae <HAL_NVIC_EnableIRQ>
}
 8001512:	e026      	b.n	8001562 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM16)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a18      	ldr	r2, [pc, #96]	; (800157c <HAL_TIM_Base_MspInit+0x114>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d10e      	bne.n	800153c <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800151e:	4b14      	ldr	r3, [pc, #80]	; (8001570 <HAL_TIM_Base_MspInit+0x108>)
 8001520:	699a      	ldr	r2, [r3, #24]
 8001522:	4b13      	ldr	r3, [pc, #76]	; (8001570 <HAL_TIM_Base_MspInit+0x108>)
 8001524:	2180      	movs	r1, #128	; 0x80
 8001526:	0289      	lsls	r1, r1, #10
 8001528:	430a      	orrs	r2, r1
 800152a:	619a      	str	r2, [r3, #24]
 800152c:	4b10      	ldr	r3, [pc, #64]	; (8001570 <HAL_TIM_Base_MspInit+0x108>)
 800152e:	699a      	ldr	r2, [r3, #24]
 8001530:	2380      	movs	r3, #128	; 0x80
 8001532:	029b      	lsls	r3, r3, #10
 8001534:	4013      	ands	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	693b      	ldr	r3, [r7, #16]
}
 800153a:	e012      	b.n	8001562 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM17)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a0f      	ldr	r2, [pc, #60]	; (8001580 <HAL_TIM_Base_MspInit+0x118>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d10d      	bne.n	8001562 <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001546:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <HAL_TIM_Base_MspInit+0x108>)
 8001548:	699a      	ldr	r2, [r3, #24]
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <HAL_TIM_Base_MspInit+0x108>)
 800154c:	2180      	movs	r1, #128	; 0x80
 800154e:	02c9      	lsls	r1, r1, #11
 8001550:	430a      	orrs	r2, r1
 8001552:	619a      	str	r2, [r3, #24]
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_TIM_Base_MspInit+0x108>)
 8001556:	699a      	ldr	r2, [r3, #24]
 8001558:	2380      	movs	r3, #128	; 0x80
 800155a:	02db      	lsls	r3, r3, #11
 800155c:	4013      	ands	r3, r2
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
}
 8001562:	46c0      	nop			; (mov r8, r8)
 8001564:	46bd      	mov	sp, r7
 8001566:	b008      	add	sp, #32
 8001568:	bd80      	pop	{r7, pc}
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	40001000 	.word	0x40001000
 8001570:	40021000 	.word	0x40021000
 8001574:	40002000 	.word	0x40002000
 8001578:	40014000 	.word	0x40014000
 800157c:	40014400 	.word	0x40014400
 8001580:	40014800 	.word	0x40014800

08001584 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001584:	b590      	push	{r4, r7, lr}
 8001586:	b08b      	sub	sp, #44	; 0x2c
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	2414      	movs	r4, #20
 800158e:	193b      	adds	r3, r7, r4
 8001590:	0018      	movs	r0, r3
 8001592:	2314      	movs	r3, #20
 8001594:	001a      	movs	r2, r3
 8001596:	2100      	movs	r1, #0
 8001598:	f002 fc1e 	bl	8003dd8 <memset>
  if(htim->Instance==TIM16)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a2b      	ldr	r2, [pc, #172]	; (8001650 <HAL_TIM_MspPostInit+0xcc>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d125      	bne.n	80015f2 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a6:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <HAL_TIM_MspPostInit+0xd0>)
 80015a8:	695a      	ldr	r2, [r3, #20]
 80015aa:	4b2a      	ldr	r3, [pc, #168]	; (8001654 <HAL_TIM_MspPostInit+0xd0>)
 80015ac:	2180      	movs	r1, #128	; 0x80
 80015ae:	02c9      	lsls	r1, r1, #11
 80015b0:	430a      	orrs	r2, r1
 80015b2:	615a      	str	r2, [r3, #20]
 80015b4:	4b27      	ldr	r3, [pc, #156]	; (8001654 <HAL_TIM_MspPostInit+0xd0>)
 80015b6:	695a      	ldr	r2, [r3, #20]
 80015b8:	2380      	movs	r3, #128	; 0x80
 80015ba:	02db      	lsls	r3, r3, #11
 80015bc:	4013      	ands	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration    
    PB8     ------> TIM16_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015c2:	193b      	adds	r3, r7, r4
 80015c4:	2280      	movs	r2, #128	; 0x80
 80015c6:	0052      	lsls	r2, r2, #1
 80015c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	0021      	movs	r1, r4
 80015cc:	187b      	adds	r3, r7, r1
 80015ce:	2202      	movs	r2, #2
 80015d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	187b      	adds	r3, r7, r1
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	187b      	adds	r3, r7, r1
 80015da:	2200      	movs	r2, #0
 80015dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 80015de:	187b      	adds	r3, r7, r1
 80015e0:	2202      	movs	r2, #2
 80015e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e4:	187b      	adds	r3, r7, r1
 80015e6:	4a1c      	ldr	r2, [pc, #112]	; (8001658 <HAL_TIM_MspPostInit+0xd4>)
 80015e8:	0019      	movs	r1, r3
 80015ea:	0010      	movs	r0, r2
 80015ec:	f000 f9fc 	bl	80019e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80015f0:	e029      	b.n	8001646 <HAL_TIM_MspPostInit+0xc2>
  else if(htim->Instance==TIM17)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a19      	ldr	r2, [pc, #100]	; (800165c <HAL_TIM_MspPostInit+0xd8>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d124      	bne.n	8001646 <HAL_TIM_MspPostInit+0xc2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fc:	4b15      	ldr	r3, [pc, #84]	; (8001654 <HAL_TIM_MspPostInit+0xd0>)
 80015fe:	695a      	ldr	r2, [r3, #20]
 8001600:	4b14      	ldr	r3, [pc, #80]	; (8001654 <HAL_TIM_MspPostInit+0xd0>)
 8001602:	2180      	movs	r1, #128	; 0x80
 8001604:	02c9      	lsls	r1, r1, #11
 8001606:	430a      	orrs	r2, r1
 8001608:	615a      	str	r2, [r3, #20]
 800160a:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_TIM_MspPostInit+0xd0>)
 800160c:	695a      	ldr	r2, [r3, #20]
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	02db      	lsls	r3, r3, #11
 8001612:	4013      	ands	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001618:	2114      	movs	r1, #20
 800161a:	187b      	adds	r3, r7, r1
 800161c:	2280      	movs	r2, #128	; 0x80
 800161e:	0092      	lsls	r2, r2, #2
 8001620:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	187b      	adds	r3, r7, r1
 8001624:	2202      	movs	r2, #2
 8001626:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	187b      	adds	r3, r7, r1
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	187b      	adds	r3, r7, r1
 8001630:	2200      	movs	r2, #0
 8001632:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8001634:	187b      	adds	r3, r7, r1
 8001636:	2202      	movs	r2, #2
 8001638:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163a:	187b      	adds	r3, r7, r1
 800163c:	4a06      	ldr	r2, [pc, #24]	; (8001658 <HAL_TIM_MspPostInit+0xd4>)
 800163e:	0019      	movs	r1, r3
 8001640:	0010      	movs	r0, r2
 8001642:	f000 f9d1 	bl	80019e8 <HAL_GPIO_Init>
}
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	46bd      	mov	sp, r7
 800164a:	b00b      	add	sp, #44	; 0x2c
 800164c:	bd90      	pop	{r4, r7, pc}
 800164e:	46c0      	nop			; (mov r8, r8)
 8001650:	40014400 	.word	0x40014400
 8001654:	40021000 	.word	0x40021000
 8001658:	48000400 	.word	0x48000400
 800165c:	40014800 	.word	0x40014800

08001660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001664:	46c0      	nop			; (mov r8, r8)
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800166e:	e7fe      	b.n	800166e <HardFault_Handler+0x4>

08001670 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001674:	46c0      	nop			; (mov r8, r8)
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001688:	f000 f8b4 	bl	80017f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800168c:	46c0      	nop			; (mov r8, r8)
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001696:	2020      	movs	r0, #32
 8001698:	f000 fb4e 	bl	8001d38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800169c:	46c0      	nop			; (mov r8, r8)
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016a8:	4b03      	ldr	r3, [pc, #12]	; (80016b8 <TIM3_IRQHandler+0x14>)
 80016aa:	0018      	movs	r0, r3
 80016ac:	f001 fcb6 	bl	800301c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016b0:	46c0      	nop			; (mov r8, r8)
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	200000c4 	.word	0x200000c4

080016bc <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016c0:	4b03      	ldr	r3, [pc, #12]	; (80016d0 <TIM6_IRQHandler+0x14>)
 80016c2:	0018      	movs	r0, r3
 80016c4:	f001 fcaa 	bl	800301c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80016c8:	46c0      	nop			; (mov r8, r8)
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	20000108 	.word	0x20000108

080016d4 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80016d8:	4b03      	ldr	r3, [pc, #12]	; (80016e8 <TIM14_IRQHandler+0x14>)
 80016da:	0018      	movs	r0, r3
 80016dc:	f001 fc9e 	bl	800301c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80016e0:	46c0      	nop			; (mov r8, r8)
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	46c0      	nop			; (mov r8, r8)
 80016e8:	200001ac 	.word	0x200001ac

080016ec <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80016f0:	4b03      	ldr	r3, [pc, #12]	; (8001700 <TIM15_IRQHandler+0x14>)
 80016f2:	0018      	movs	r0, r3
 80016f4:	f001 fc92 	bl	800301c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80016f8:	46c0      	nop			; (mov r8, r8)
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	20000040 	.word	0x20000040

08001704 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001708:	46c0      	nop			; (mov r8, r8)
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001710:	480d      	ldr	r0, [pc, #52]	; (8001748 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001712:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001714:	480d      	ldr	r0, [pc, #52]	; (800174c <LoopForever+0x6>)
  ldr r1, =_edata
 8001716:	490e      	ldr	r1, [pc, #56]	; (8001750 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001718:	4a0e      	ldr	r2, [pc, #56]	; (8001754 <LoopForever+0xe>)
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800171c:	e002      	b.n	8001724 <LoopCopyDataInit>

0800171e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800171e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001722:	3304      	adds	r3, #4

08001724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001728:	d3f9      	bcc.n	800171e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800172a:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <LoopForever+0x12>)
  ldr r4, =_ebss
 800172c:	4c0b      	ldr	r4, [pc, #44]	; (800175c <LoopForever+0x16>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001730:	e001      	b.n	8001736 <LoopFillZerobss>

08001732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001734:	3204      	adds	r2, #4

08001736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001738:	d3fb      	bcc.n	8001732 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800173a:	f7ff ffe3 	bl	8001704 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800173e:	f002 fb27 	bl	8003d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001742:	f7fe fd6d 	bl	8000220 <main>

08001746 <LoopForever>:

LoopForever:
    b LoopForever
 8001746:	e7fe      	b.n	8001746 <LoopForever>
  ldr   r0, =_estack
 8001748:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800174c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001750:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001754:	08003ee8 	.word	0x08003ee8
  ldr r2, =_sbss
 8001758:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800175c:	20000230 	.word	0x20000230

08001760 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001760:	e7fe      	b.n	8001760 <ADC1_IRQHandler>
	...

08001764 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001768:	4b07      	ldr	r3, [pc, #28]	; (8001788 <HAL_Init+0x24>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_Init+0x24>)
 800176e:	2110      	movs	r1, #16
 8001770:	430a      	orrs	r2, r1
 8001772:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001774:	2000      	movs	r0, #0
 8001776:	f000 f809 	bl	800178c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800177a:	f7ff fdb1 	bl	80012e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	0018      	movs	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	40022000 	.word	0x40022000

0800178c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800178c:	b590      	push	{r4, r7, lr}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001794:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <HAL_InitTick+0x5c>)
 8001796:	681c      	ldr	r4, [r3, #0]
 8001798:	4b14      	ldr	r3, [pc, #80]	; (80017ec <HAL_InitTick+0x60>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	0019      	movs	r1, r3
 800179e:	23fa      	movs	r3, #250	; 0xfa
 80017a0:	0098      	lsls	r0, r3, #2
 80017a2:	f7fe fcb1 	bl	8000108 <__udivsi3>
 80017a6:	0003      	movs	r3, r0
 80017a8:	0019      	movs	r1, r3
 80017aa:	0020      	movs	r0, r4
 80017ac:	f7fe fcac 	bl	8000108 <__udivsi3>
 80017b0:	0003      	movs	r3, r0
 80017b2:	0018      	movs	r0, r3
 80017b4:	f000 f90b 	bl	80019ce <HAL_SYSTICK_Config>
 80017b8:	1e03      	subs	r3, r0, #0
 80017ba:	d001      	beq.n	80017c0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e00f      	b.n	80017e0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	d80b      	bhi.n	80017de <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	2301      	movs	r3, #1
 80017ca:	425b      	negs	r3, r3
 80017cc:	2200      	movs	r2, #0
 80017ce:	0018      	movs	r0, r3
 80017d0:	f000 f8d8 	bl	8001984 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_InitTick+0x64>)
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	e000      	b.n	80017e0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
}
 80017e0:	0018      	movs	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	b003      	add	sp, #12
 80017e6:	bd90      	pop	{r4, r7, pc}
 80017e8:	2000000c 	.word	0x2000000c
 80017ec:	20000014 	.word	0x20000014
 80017f0:	20000010 	.word	0x20000010

080017f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <HAL_IncTick+0x1c>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	001a      	movs	r2, r3
 80017fe:	4b05      	ldr	r3, [pc, #20]	; (8001814 <HAL_IncTick+0x20>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	18d2      	adds	r2, r2, r3
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <HAL_IncTick+0x20>)
 8001806:	601a      	str	r2, [r3, #0]
}
 8001808:	46c0      	nop			; (mov r8, r8)
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	20000014 	.word	0x20000014
 8001814:	2000022c 	.word	0x2000022c

08001818 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  return uwTick;
 800181c:	4b02      	ldr	r3, [pc, #8]	; (8001828 <HAL_GetTick+0x10>)
 800181e:	681b      	ldr	r3, [r3, #0]
}
 8001820:	0018      	movs	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	46c0      	nop			; (mov r8, r8)
 8001828:	2000022c 	.word	0x2000022c

0800182c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	0002      	movs	r2, r0
 8001834:	1dfb      	adds	r3, r7, #7
 8001836:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001838:	1dfb      	adds	r3, r7, #7
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b7f      	cmp	r3, #127	; 0x7f
 800183e:	d809      	bhi.n	8001854 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001840:	1dfb      	adds	r3, r7, #7
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	001a      	movs	r2, r3
 8001846:	231f      	movs	r3, #31
 8001848:	401a      	ands	r2, r3
 800184a:	4b04      	ldr	r3, [pc, #16]	; (800185c <__NVIC_EnableIRQ+0x30>)
 800184c:	2101      	movs	r1, #1
 800184e:	4091      	lsls	r1, r2
 8001850:	000a      	movs	r2, r1
 8001852:	601a      	str	r2, [r3, #0]
  }
}
 8001854:	46c0      	nop			; (mov r8, r8)
 8001856:	46bd      	mov	sp, r7
 8001858:	b002      	add	sp, #8
 800185a:	bd80      	pop	{r7, pc}
 800185c:	e000e100 	.word	0xe000e100

08001860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001860:	b590      	push	{r4, r7, lr}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	0002      	movs	r2, r0
 8001868:	6039      	str	r1, [r7, #0]
 800186a:	1dfb      	adds	r3, r7, #7
 800186c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800186e:	1dfb      	adds	r3, r7, #7
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b7f      	cmp	r3, #127	; 0x7f
 8001874:	d828      	bhi.n	80018c8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001876:	4a2f      	ldr	r2, [pc, #188]	; (8001934 <__NVIC_SetPriority+0xd4>)
 8001878:	1dfb      	adds	r3, r7, #7
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	b25b      	sxtb	r3, r3
 800187e:	089b      	lsrs	r3, r3, #2
 8001880:	33c0      	adds	r3, #192	; 0xc0
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	589b      	ldr	r3, [r3, r2]
 8001886:	1dfa      	adds	r2, r7, #7
 8001888:	7812      	ldrb	r2, [r2, #0]
 800188a:	0011      	movs	r1, r2
 800188c:	2203      	movs	r2, #3
 800188e:	400a      	ands	r2, r1
 8001890:	00d2      	lsls	r2, r2, #3
 8001892:	21ff      	movs	r1, #255	; 0xff
 8001894:	4091      	lsls	r1, r2
 8001896:	000a      	movs	r2, r1
 8001898:	43d2      	mvns	r2, r2
 800189a:	401a      	ands	r2, r3
 800189c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	019b      	lsls	r3, r3, #6
 80018a2:	22ff      	movs	r2, #255	; 0xff
 80018a4:	401a      	ands	r2, r3
 80018a6:	1dfb      	adds	r3, r7, #7
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	0018      	movs	r0, r3
 80018ac:	2303      	movs	r3, #3
 80018ae:	4003      	ands	r3, r0
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018b4:	481f      	ldr	r0, [pc, #124]	; (8001934 <__NVIC_SetPriority+0xd4>)
 80018b6:	1dfb      	adds	r3, r7, #7
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	b25b      	sxtb	r3, r3
 80018bc:	089b      	lsrs	r3, r3, #2
 80018be:	430a      	orrs	r2, r1
 80018c0:	33c0      	adds	r3, #192	; 0xc0
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80018c6:	e031      	b.n	800192c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018c8:	4a1b      	ldr	r2, [pc, #108]	; (8001938 <__NVIC_SetPriority+0xd8>)
 80018ca:	1dfb      	adds	r3, r7, #7
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	0019      	movs	r1, r3
 80018d0:	230f      	movs	r3, #15
 80018d2:	400b      	ands	r3, r1
 80018d4:	3b08      	subs	r3, #8
 80018d6:	089b      	lsrs	r3, r3, #2
 80018d8:	3306      	adds	r3, #6
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	18d3      	adds	r3, r2, r3
 80018de:	3304      	adds	r3, #4
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	1dfa      	adds	r2, r7, #7
 80018e4:	7812      	ldrb	r2, [r2, #0]
 80018e6:	0011      	movs	r1, r2
 80018e8:	2203      	movs	r2, #3
 80018ea:	400a      	ands	r2, r1
 80018ec:	00d2      	lsls	r2, r2, #3
 80018ee:	21ff      	movs	r1, #255	; 0xff
 80018f0:	4091      	lsls	r1, r2
 80018f2:	000a      	movs	r2, r1
 80018f4:	43d2      	mvns	r2, r2
 80018f6:	401a      	ands	r2, r3
 80018f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	019b      	lsls	r3, r3, #6
 80018fe:	22ff      	movs	r2, #255	; 0xff
 8001900:	401a      	ands	r2, r3
 8001902:	1dfb      	adds	r3, r7, #7
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	0018      	movs	r0, r3
 8001908:	2303      	movs	r3, #3
 800190a:	4003      	ands	r3, r0
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001910:	4809      	ldr	r0, [pc, #36]	; (8001938 <__NVIC_SetPriority+0xd8>)
 8001912:	1dfb      	adds	r3, r7, #7
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	001c      	movs	r4, r3
 8001918:	230f      	movs	r3, #15
 800191a:	4023      	ands	r3, r4
 800191c:	3b08      	subs	r3, #8
 800191e:	089b      	lsrs	r3, r3, #2
 8001920:	430a      	orrs	r2, r1
 8001922:	3306      	adds	r3, #6
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	18c3      	adds	r3, r0, r3
 8001928:	3304      	adds	r3, #4
 800192a:	601a      	str	r2, [r3, #0]
}
 800192c:	46c0      	nop			; (mov r8, r8)
 800192e:	46bd      	mov	sp, r7
 8001930:	b003      	add	sp, #12
 8001932:	bd90      	pop	{r4, r7, pc}
 8001934:	e000e100 	.word	0xe000e100
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	1e5a      	subs	r2, r3, #1
 8001948:	2380      	movs	r3, #128	; 0x80
 800194a:	045b      	lsls	r3, r3, #17
 800194c:	429a      	cmp	r2, r3
 800194e:	d301      	bcc.n	8001954 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001950:	2301      	movs	r3, #1
 8001952:	e010      	b.n	8001976 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001954:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <SysTick_Config+0x44>)
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	3a01      	subs	r2, #1
 800195a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800195c:	2301      	movs	r3, #1
 800195e:	425b      	negs	r3, r3
 8001960:	2103      	movs	r1, #3
 8001962:	0018      	movs	r0, r3
 8001964:	f7ff ff7c 	bl	8001860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001968:	4b05      	ldr	r3, [pc, #20]	; (8001980 <SysTick_Config+0x44>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800196e:	4b04      	ldr	r3, [pc, #16]	; (8001980 <SysTick_Config+0x44>)
 8001970:	2207      	movs	r2, #7
 8001972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001974:	2300      	movs	r3, #0
}
 8001976:	0018      	movs	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	b002      	add	sp, #8
 800197c:	bd80      	pop	{r7, pc}
 800197e:	46c0      	nop			; (mov r8, r8)
 8001980:	e000e010 	.word	0xe000e010

08001984 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
 800198e:	210f      	movs	r1, #15
 8001990:	187b      	adds	r3, r7, r1
 8001992:	1c02      	adds	r2, r0, #0
 8001994:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	187b      	adds	r3, r7, r1
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	b25b      	sxtb	r3, r3
 800199e:	0011      	movs	r1, r2
 80019a0:	0018      	movs	r0, r3
 80019a2:	f7ff ff5d 	bl	8001860 <__NVIC_SetPriority>
}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	46bd      	mov	sp, r7
 80019aa:	b004      	add	sp, #16
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	0002      	movs	r2, r0
 80019b6:	1dfb      	adds	r3, r7, #7
 80019b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ba:	1dfb      	adds	r3, r7, #7
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	b25b      	sxtb	r3, r3
 80019c0:	0018      	movs	r0, r3
 80019c2:	f7ff ff33 	bl	800182c <__NVIC_EnableIRQ>
}
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	46bd      	mov	sp, r7
 80019ca:	b002      	add	sp, #8
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	0018      	movs	r0, r3
 80019da:	f7ff ffaf 	bl	800193c <SysTick_Config>
 80019de:	0003      	movs	r3, r0
}
 80019e0:	0018      	movs	r0, r3
 80019e2:	46bd      	mov	sp, r7
 80019e4:	b002      	add	sp, #8
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f6:	e14f      	b.n	8001c98 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2101      	movs	r1, #1
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	4091      	lsls	r1, r2
 8001a02:	000a      	movs	r2, r1
 8001a04:	4013      	ands	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d100      	bne.n	8001a10 <HAL_GPIO_Init+0x28>
 8001a0e:	e140      	b.n	8001c92 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d003      	beq.n	8001a20 <HAL_GPIO_Init+0x38>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b12      	cmp	r3, #18
 8001a1e:	d123      	bne.n	8001a68 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	08da      	lsrs	r2, r3, #3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3208      	adds	r2, #8
 8001a28:	0092      	lsls	r2, r2, #2
 8001a2a:	58d3      	ldr	r3, [r2, r3]
 8001a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	2207      	movs	r2, #7
 8001a32:	4013      	ands	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	220f      	movs	r2, #15
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	0013      	movs	r3, r2
 8001a3c:	43da      	mvns	r2, r3
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	691a      	ldr	r2, [r3, #16]
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	2107      	movs	r1, #7
 8001a4c:	400b      	ands	r3, r1
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	409a      	lsls	r2, r3
 8001a52:	0013      	movs	r3, r2
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	08da      	lsrs	r2, r3, #3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3208      	adds	r2, #8
 8001a62:	0092      	lsls	r2, r2, #2
 8001a64:	6939      	ldr	r1, [r7, #16]
 8001a66:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	2203      	movs	r2, #3
 8001a74:	409a      	lsls	r2, r3
 8001a76:	0013      	movs	r3, r2
 8001a78:	43da      	mvns	r2, r3
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2203      	movs	r2, #3
 8001a86:	401a      	ands	r2, r3
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	409a      	lsls	r2, r3
 8001a8e:	0013      	movs	r3, r2
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d00b      	beq.n	8001abc <HAL_GPIO_Init+0xd4>
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d007      	beq.n	8001abc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ab0:	2b11      	cmp	r3, #17
 8001ab2:	d003      	beq.n	8001abc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b12      	cmp	r3, #18
 8001aba:	d130      	bne.n	8001b1e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	409a      	lsls	r2, r3
 8001aca:	0013      	movs	r3, r2
 8001acc:	43da      	mvns	r2, r3
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	68da      	ldr	r2, [r3, #12]
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	409a      	lsls	r2, r3
 8001ade:	0013      	movs	r3, r2
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001af2:	2201      	movs	r2, #1
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	409a      	lsls	r2, r3
 8001af8:	0013      	movs	r3, r2
 8001afa:	43da      	mvns	r2, r3
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	4013      	ands	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	091b      	lsrs	r3, r3, #4
 8001b08:	2201      	movs	r2, #1
 8001b0a:	401a      	ands	r2, r3
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	409a      	lsls	r2, r3
 8001b10:	0013      	movs	r3, r2
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	2203      	movs	r2, #3
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	0013      	movs	r3, r2
 8001b2e:	43da      	mvns	r2, r3
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	4013      	ands	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	689a      	ldr	r2, [r3, #8]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	409a      	lsls	r2, r3
 8001b40:	0013      	movs	r3, r2
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	2380      	movs	r3, #128	; 0x80
 8001b54:	055b      	lsls	r3, r3, #21
 8001b56:	4013      	ands	r3, r2
 8001b58:	d100      	bne.n	8001b5c <HAL_GPIO_Init+0x174>
 8001b5a:	e09a      	b.n	8001c92 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5c:	4b54      	ldr	r3, [pc, #336]	; (8001cb0 <HAL_GPIO_Init+0x2c8>)
 8001b5e:	699a      	ldr	r2, [r3, #24]
 8001b60:	4b53      	ldr	r3, [pc, #332]	; (8001cb0 <HAL_GPIO_Init+0x2c8>)
 8001b62:	2101      	movs	r1, #1
 8001b64:	430a      	orrs	r2, r1
 8001b66:	619a      	str	r2, [r3, #24]
 8001b68:	4b51      	ldr	r3, [pc, #324]	; (8001cb0 <HAL_GPIO_Init+0x2c8>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	4013      	ands	r3, r2
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b74:	4a4f      	ldr	r2, [pc, #316]	; (8001cb4 <HAL_GPIO_Init+0x2cc>)
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	089b      	lsrs	r3, r3, #2
 8001b7a:	3302      	adds	r3, #2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	589b      	ldr	r3, [r3, r2]
 8001b80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	2203      	movs	r2, #3
 8001b86:	4013      	ands	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	220f      	movs	r2, #15
 8001b8c:	409a      	lsls	r2, r3
 8001b8e:	0013      	movs	r3, r2
 8001b90:	43da      	mvns	r2, r3
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	4013      	ands	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	2390      	movs	r3, #144	; 0x90
 8001b9c:	05db      	lsls	r3, r3, #23
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d013      	beq.n	8001bca <HAL_GPIO_Init+0x1e2>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a44      	ldr	r2, [pc, #272]	; (8001cb8 <HAL_GPIO_Init+0x2d0>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d00d      	beq.n	8001bc6 <HAL_GPIO_Init+0x1de>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a43      	ldr	r2, [pc, #268]	; (8001cbc <HAL_GPIO_Init+0x2d4>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d007      	beq.n	8001bc2 <HAL_GPIO_Init+0x1da>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a42      	ldr	r2, [pc, #264]	; (8001cc0 <HAL_GPIO_Init+0x2d8>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d101      	bne.n	8001bbe <HAL_GPIO_Init+0x1d6>
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e006      	b.n	8001bcc <HAL_GPIO_Init+0x1e4>
 8001bbe:	2305      	movs	r3, #5
 8001bc0:	e004      	b.n	8001bcc <HAL_GPIO_Init+0x1e4>
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	e002      	b.n	8001bcc <HAL_GPIO_Init+0x1e4>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <HAL_GPIO_Init+0x1e4>
 8001bca:	2300      	movs	r3, #0
 8001bcc:	697a      	ldr	r2, [r7, #20]
 8001bce:	2103      	movs	r1, #3
 8001bd0:	400a      	ands	r2, r1
 8001bd2:	0092      	lsls	r2, r2, #2
 8001bd4:	4093      	lsls	r3, r2
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bdc:	4935      	ldr	r1, [pc, #212]	; (8001cb4 <HAL_GPIO_Init+0x2cc>)
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	089b      	lsrs	r3, r3, #2
 8001be2:	3302      	adds	r3, #2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bea:	4b36      	ldr	r3, [pc, #216]	; (8001cc4 <HAL_GPIO_Init+0x2dc>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	43da      	mvns	r2, r3
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	2380      	movs	r3, #128	; 0x80
 8001c00:	025b      	lsls	r3, r3, #9
 8001c02:	4013      	ands	r3, r2
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c0e:	4b2d      	ldr	r3, [pc, #180]	; (8001cc4 <HAL_GPIO_Init+0x2dc>)
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001c14:	4b2b      	ldr	r3, [pc, #172]	; (8001cc4 <HAL_GPIO_Init+0x2dc>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	43da      	mvns	r2, r3
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4013      	ands	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	029b      	lsls	r3, r3, #10
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d003      	beq.n	8001c38 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c38:	4b22      	ldr	r3, [pc, #136]	; (8001cc4 <HAL_GPIO_Init+0x2dc>)
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c3e:	4b21      	ldr	r3, [pc, #132]	; (8001cc4 <HAL_GPIO_Init+0x2dc>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	43da      	mvns	r2, r3
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	2380      	movs	r3, #128	; 0x80
 8001c54:	035b      	lsls	r3, r3, #13
 8001c56:	4013      	ands	r3, r2
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c62:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <HAL_GPIO_Init+0x2dc>)
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001c68:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <HAL_GPIO_Init+0x2dc>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	43da      	mvns	r2, r3
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4013      	ands	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	2380      	movs	r3, #128	; 0x80
 8001c7e:	039b      	lsls	r3, r3, #14
 8001c80:	4013      	ands	r3, r2
 8001c82:	d003      	beq.n	8001c8c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c8c:	4b0d      	ldr	r3, [pc, #52]	; (8001cc4 <HAL_GPIO_Init+0x2dc>)
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	3301      	adds	r3, #1
 8001c96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	40da      	lsrs	r2, r3
 8001ca0:	1e13      	subs	r3, r2, #0
 8001ca2:	d000      	beq.n	8001ca6 <HAL_GPIO_Init+0x2be>
 8001ca4:	e6a8      	b.n	80019f8 <HAL_GPIO_Init+0x10>
  } 
}
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	46c0      	nop			; (mov r8, r8)
 8001caa:	46bd      	mov	sp, r7
 8001cac:	b006      	add	sp, #24
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40010000 	.word	0x40010000
 8001cb8:	48000400 	.word	0x48000400
 8001cbc:	48000800 	.word	0x48000800
 8001cc0:	48000c00 	.word	0x48000c00
 8001cc4:	40010400 	.word	0x40010400

08001cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	0008      	movs	r0, r1
 8001cd2:	0011      	movs	r1, r2
 8001cd4:	1cbb      	adds	r3, r7, #2
 8001cd6:	1c02      	adds	r2, r0, #0
 8001cd8:	801a      	strh	r2, [r3, #0]
 8001cda:	1c7b      	adds	r3, r7, #1
 8001cdc:	1c0a      	adds	r2, r1, #0
 8001cde:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ce0:	1c7b      	adds	r3, r7, #1
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d004      	beq.n	8001cf2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ce8:	1cbb      	adds	r3, r7, #2
 8001cea:	881a      	ldrh	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cf0:	e003      	b.n	8001cfa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cf2:	1cbb      	adds	r3, r7, #2
 8001cf4:	881a      	ldrh	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	b002      	add	sp, #8
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	000a      	movs	r2, r1
 8001d0c:	1cbb      	adds	r3, r7, #2
 8001d0e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	1cba      	adds	r2, r7, #2
 8001d16:	8812      	ldrh	r2, [r2, #0]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d005      	beq.n	8001d28 <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001d1c:	1cbb      	adds	r3, r7, #2
 8001d1e:	881b      	ldrh	r3, [r3, #0]
 8001d20:	041a      	lsls	r2, r3, #16
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001d26:	e003      	b.n	8001d30 <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d28:	1cbb      	adds	r3, r7, #2
 8001d2a:	881a      	ldrh	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	619a      	str	r2, [r3, #24]
}
 8001d30:	46c0      	nop			; (mov r8, r8)
 8001d32:	46bd      	mov	sp, r7
 8001d34:	b002      	add	sp, #8
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	0002      	movs	r2, r0
 8001d40:	1dbb      	adds	r3, r7, #6
 8001d42:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d44:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	1dba      	adds	r2, r7, #6
 8001d4a:	8812      	ldrh	r2, [r2, #0]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d008      	beq.n	8001d62 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001d52:	1dba      	adds	r2, r7, #6
 8001d54:	8812      	ldrh	r2, [r2, #0]
 8001d56:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d58:	1dbb      	adds	r3, r7, #6
 8001d5a:	881b      	ldrh	r3, [r3, #0]
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	f7fe ff55 	bl	8000c0c <HAL_GPIO_EXTI_Callback>
  }
}
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	46bd      	mov	sp, r7
 8001d66:	b002      	add	sp, #8
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	40010400 	.word	0x40010400

08001d70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b088      	sub	sp, #32
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e301      	b.n	8002386 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2201      	movs	r2, #1
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d100      	bne.n	8001d8e <HAL_RCC_OscConfig+0x1e>
 8001d8c:	e08d      	b.n	8001eaa <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d8e:	4bc3      	ldr	r3, [pc, #780]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	220c      	movs	r2, #12
 8001d94:	4013      	ands	r3, r2
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	d00e      	beq.n	8001db8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d9a:	4bc0      	ldr	r3, [pc, #768]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	220c      	movs	r2, #12
 8001da0:	4013      	ands	r3, r2
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d116      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x64>
 8001da6:	4bbd      	ldr	r3, [pc, #756]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	2380      	movs	r3, #128	; 0x80
 8001dac:	025b      	lsls	r3, r3, #9
 8001dae:	401a      	ands	r2, r3
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	025b      	lsls	r3, r3, #9
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d10d      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db8:	4bb8      	ldr	r3, [pc, #736]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	2380      	movs	r3, #128	; 0x80
 8001dbe:	029b      	lsls	r3, r3, #10
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d100      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x56>
 8001dc4:	e070      	b.n	8001ea8 <HAL_RCC_OscConfig+0x138>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d000      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x60>
 8001dce:	e06b      	b.n	8001ea8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e2d8      	b.n	8002386 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d107      	bne.n	8001dec <HAL_RCC_OscConfig+0x7c>
 8001ddc:	4baf      	ldr	r3, [pc, #700]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	4bae      	ldr	r3, [pc, #696]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001de2:	2180      	movs	r1, #128	; 0x80
 8001de4:	0249      	lsls	r1, r1, #9
 8001de6:	430a      	orrs	r2, r1
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	e02f      	b.n	8001e4c <HAL_RCC_OscConfig+0xdc>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d10c      	bne.n	8001e0e <HAL_RCC_OscConfig+0x9e>
 8001df4:	4ba9      	ldr	r3, [pc, #676]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4ba8      	ldr	r3, [pc, #672]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001dfa:	49a9      	ldr	r1, [pc, #676]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001dfc:	400a      	ands	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	4ba6      	ldr	r3, [pc, #664]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4ba5      	ldr	r3, [pc, #660]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001e06:	49a7      	ldr	r1, [pc, #668]	; (80020a4 <HAL_RCC_OscConfig+0x334>)
 8001e08:	400a      	ands	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	e01e      	b.n	8001e4c <HAL_RCC_OscConfig+0xdc>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b05      	cmp	r3, #5
 8001e14:	d10e      	bne.n	8001e34 <HAL_RCC_OscConfig+0xc4>
 8001e16:	4ba1      	ldr	r3, [pc, #644]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	4ba0      	ldr	r3, [pc, #640]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001e1c:	2180      	movs	r1, #128	; 0x80
 8001e1e:	02c9      	lsls	r1, r1, #11
 8001e20:	430a      	orrs	r2, r1
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	4b9d      	ldr	r3, [pc, #628]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4b9c      	ldr	r3, [pc, #624]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001e2a:	2180      	movs	r1, #128	; 0x80
 8001e2c:	0249      	lsls	r1, r1, #9
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	e00b      	b.n	8001e4c <HAL_RCC_OscConfig+0xdc>
 8001e34:	4b99      	ldr	r3, [pc, #612]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4b98      	ldr	r3, [pc, #608]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001e3a:	4999      	ldr	r1, [pc, #612]	; (80020a0 <HAL_RCC_OscConfig+0x330>)
 8001e3c:	400a      	ands	r2, r1
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	4b96      	ldr	r3, [pc, #600]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b95      	ldr	r3, [pc, #596]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001e46:	4997      	ldr	r1, [pc, #604]	; (80020a4 <HAL_RCC_OscConfig+0x334>)
 8001e48:	400a      	ands	r2, r1
 8001e4a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d014      	beq.n	8001e7e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e54:	f7ff fce0 	bl	8001818 <HAL_GetTick>
 8001e58:	0003      	movs	r3, r0
 8001e5a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e5e:	f7ff fcdb 	bl	8001818 <HAL_GetTick>
 8001e62:	0002      	movs	r2, r0
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b64      	cmp	r3, #100	; 0x64
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e28a      	b.n	8002386 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e70:	4b8a      	ldr	r3, [pc, #552]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	029b      	lsls	r3, r3, #10
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d0f0      	beq.n	8001e5e <HAL_RCC_OscConfig+0xee>
 8001e7c:	e015      	b.n	8001eaa <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7e:	f7ff fccb 	bl	8001818 <HAL_GetTick>
 8001e82:	0003      	movs	r3, r0
 8001e84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e88:	f7ff fcc6 	bl	8001818 <HAL_GetTick>
 8001e8c:	0002      	movs	r2, r0
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b64      	cmp	r3, #100	; 0x64
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e275      	b.n	8002386 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e9a:	4b80      	ldr	r3, [pc, #512]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	2380      	movs	r3, #128	; 0x80
 8001ea0:	029b      	lsls	r3, r3, #10
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0x118>
 8001ea6:	e000      	b.n	8001eaa <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2202      	movs	r2, #2
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d100      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x146>
 8001eb4:	e069      	b.n	8001f8a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001eb6:	4b79      	ldr	r3, [pc, #484]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	220c      	movs	r2, #12
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d00b      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ec0:	4b76      	ldr	r3, [pc, #472]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	220c      	movs	r2, #12
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d11c      	bne.n	8001f06 <HAL_RCC_OscConfig+0x196>
 8001ecc:	4b73      	ldr	r3, [pc, #460]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	025b      	lsls	r3, r3, #9
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d116      	bne.n	8001f06 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed8:	4b70      	ldr	r3, [pc, #448]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2202      	movs	r2, #2
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d005      	beq.n	8001eee <HAL_RCC_OscConfig+0x17e>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d001      	beq.n	8001eee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e24b      	b.n	8002386 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eee:	4b6b      	ldr	r3, [pc, #428]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	22f8      	movs	r2, #248	; 0xf8
 8001ef4:	4393      	bics	r3, r2
 8001ef6:	0019      	movs	r1, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	00da      	lsls	r2, r3, #3
 8001efe:	4b67      	ldr	r3, [pc, #412]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001f00:	430a      	orrs	r2, r1
 8001f02:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f04:	e041      	b.n	8001f8a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d024      	beq.n	8001f58 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f0e:	4b63      	ldr	r3, [pc, #396]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	4b62      	ldr	r3, [pc, #392]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001f14:	2101      	movs	r1, #1
 8001f16:	430a      	orrs	r2, r1
 8001f18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1a:	f7ff fc7d 	bl	8001818 <HAL_GetTick>
 8001f1e:	0003      	movs	r3, r0
 8001f20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f24:	f7ff fc78 	bl	8001818 <HAL_GetTick>
 8001f28:	0002      	movs	r2, r0
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e227      	b.n	8002386 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f36:	4b59      	ldr	r3, [pc, #356]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d0f1      	beq.n	8001f24 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f40:	4b56      	ldr	r3, [pc, #344]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	22f8      	movs	r2, #248	; 0xf8
 8001f46:	4393      	bics	r3, r2
 8001f48:	0019      	movs	r1, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	00da      	lsls	r2, r3, #3
 8001f50:	4b52      	ldr	r3, [pc, #328]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001f52:	430a      	orrs	r2, r1
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	e018      	b.n	8001f8a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f58:	4b50      	ldr	r3, [pc, #320]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b4f      	ldr	r3, [pc, #316]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001f5e:	2101      	movs	r1, #1
 8001f60:	438a      	bics	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7ff fc58 	bl	8001818 <HAL_GetTick>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f6e:	f7ff fc53 	bl	8001818 <HAL_GetTick>
 8001f72:	0002      	movs	r2, r0
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e202      	b.n	8002386 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f80:	4b46      	ldr	r3, [pc, #280]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2202      	movs	r2, #2
 8001f86:	4013      	ands	r3, r2
 8001f88:	d1f1      	bne.n	8001f6e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2208      	movs	r2, #8
 8001f90:	4013      	ands	r3, r2
 8001f92:	d036      	beq.n	8002002 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d019      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f9c:	4b3f      	ldr	r3, [pc, #252]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001f9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fa0:	4b3e      	ldr	r3, [pc, #248]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa8:	f7ff fc36 	bl	8001818 <HAL_GetTick>
 8001fac:	0003      	movs	r3, r0
 8001fae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fb2:	f7ff fc31 	bl	8001818 <HAL_GetTick>
 8001fb6:	0002      	movs	r2, r0
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e1e0      	b.n	8002386 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc4:	4b35      	ldr	r3, [pc, #212]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	2202      	movs	r2, #2
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d0f1      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x242>
 8001fce:	e018      	b.n	8002002 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fd0:	4b32      	ldr	r3, [pc, #200]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001fd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fd4:	4b31      	ldr	r3, [pc, #196]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	438a      	bics	r2, r1
 8001fda:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fdc:	f7ff fc1c 	bl	8001818 <HAL_GetTick>
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fe6:	f7ff fc17 	bl	8001818 <HAL_GetTick>
 8001fea:	0002      	movs	r2, r0
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e1c6      	b.n	8002386 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff8:	4b28      	ldr	r3, [pc, #160]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	4013      	ands	r3, r2
 8002000:	d1f1      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2204      	movs	r2, #4
 8002008:	4013      	ands	r3, r2
 800200a:	d100      	bne.n	800200e <HAL_RCC_OscConfig+0x29e>
 800200c:	e0b4      	b.n	8002178 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800200e:	201f      	movs	r0, #31
 8002010:	183b      	adds	r3, r7, r0
 8002012:	2200      	movs	r2, #0
 8002014:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002016:	4b21      	ldr	r3, [pc, #132]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8002018:	69da      	ldr	r2, [r3, #28]
 800201a:	2380      	movs	r3, #128	; 0x80
 800201c:	055b      	lsls	r3, r3, #21
 800201e:	4013      	ands	r3, r2
 8002020:	d110      	bne.n	8002044 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002022:	4b1e      	ldr	r3, [pc, #120]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8002024:	69da      	ldr	r2, [r3, #28]
 8002026:	4b1d      	ldr	r3, [pc, #116]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8002028:	2180      	movs	r1, #128	; 0x80
 800202a:	0549      	lsls	r1, r1, #21
 800202c:	430a      	orrs	r2, r1
 800202e:	61da      	str	r2, [r3, #28]
 8002030:	4b1a      	ldr	r3, [pc, #104]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8002032:	69da      	ldr	r2, [r3, #28]
 8002034:	2380      	movs	r3, #128	; 0x80
 8002036:	055b      	lsls	r3, r3, #21
 8002038:	4013      	ands	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800203e:	183b      	adds	r3, r7, r0
 8002040:	2201      	movs	r2, #1
 8002042:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002044:	4b18      	ldr	r3, [pc, #96]	; (80020a8 <HAL_RCC_OscConfig+0x338>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	2380      	movs	r3, #128	; 0x80
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	4013      	ands	r3, r2
 800204e:	d11a      	bne.n	8002086 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002050:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <HAL_RCC_OscConfig+0x338>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	4b14      	ldr	r3, [pc, #80]	; (80020a8 <HAL_RCC_OscConfig+0x338>)
 8002056:	2180      	movs	r1, #128	; 0x80
 8002058:	0049      	lsls	r1, r1, #1
 800205a:	430a      	orrs	r2, r1
 800205c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800205e:	f7ff fbdb 	bl	8001818 <HAL_GetTick>
 8002062:	0003      	movs	r3, r0
 8002064:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002068:	f7ff fbd6 	bl	8001818 <HAL_GetTick>
 800206c:	0002      	movs	r2, r0
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b64      	cmp	r3, #100	; 0x64
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e185      	b.n	8002386 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207a:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <HAL_RCC_OscConfig+0x338>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	2380      	movs	r3, #128	; 0x80
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4013      	ands	r3, r2
 8002084:	d0f0      	beq.n	8002068 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d10e      	bne.n	80020ac <HAL_RCC_OscConfig+0x33c>
 800208e:	4b03      	ldr	r3, [pc, #12]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8002090:	6a1a      	ldr	r2, [r3, #32]
 8002092:	4b02      	ldr	r3, [pc, #8]	; (800209c <HAL_RCC_OscConfig+0x32c>)
 8002094:	2101      	movs	r1, #1
 8002096:	430a      	orrs	r2, r1
 8002098:	621a      	str	r2, [r3, #32]
 800209a:	e035      	b.n	8002108 <HAL_RCC_OscConfig+0x398>
 800209c:	40021000 	.word	0x40021000
 80020a0:	fffeffff 	.word	0xfffeffff
 80020a4:	fffbffff 	.word	0xfffbffff
 80020a8:	40007000 	.word	0x40007000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d10c      	bne.n	80020ce <HAL_RCC_OscConfig+0x35e>
 80020b4:	4bb6      	ldr	r3, [pc, #728]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 80020b6:	6a1a      	ldr	r2, [r3, #32]
 80020b8:	4bb5      	ldr	r3, [pc, #724]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 80020ba:	2101      	movs	r1, #1
 80020bc:	438a      	bics	r2, r1
 80020be:	621a      	str	r2, [r3, #32]
 80020c0:	4bb3      	ldr	r3, [pc, #716]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 80020c2:	6a1a      	ldr	r2, [r3, #32]
 80020c4:	4bb2      	ldr	r3, [pc, #712]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 80020c6:	2104      	movs	r1, #4
 80020c8:	438a      	bics	r2, r1
 80020ca:	621a      	str	r2, [r3, #32]
 80020cc:	e01c      	b.n	8002108 <HAL_RCC_OscConfig+0x398>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	2b05      	cmp	r3, #5
 80020d4:	d10c      	bne.n	80020f0 <HAL_RCC_OscConfig+0x380>
 80020d6:	4bae      	ldr	r3, [pc, #696]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 80020d8:	6a1a      	ldr	r2, [r3, #32]
 80020da:	4bad      	ldr	r3, [pc, #692]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 80020dc:	2104      	movs	r1, #4
 80020de:	430a      	orrs	r2, r1
 80020e0:	621a      	str	r2, [r3, #32]
 80020e2:	4bab      	ldr	r3, [pc, #684]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 80020e4:	6a1a      	ldr	r2, [r3, #32]
 80020e6:	4baa      	ldr	r3, [pc, #680]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 80020e8:	2101      	movs	r1, #1
 80020ea:	430a      	orrs	r2, r1
 80020ec:	621a      	str	r2, [r3, #32]
 80020ee:	e00b      	b.n	8002108 <HAL_RCC_OscConfig+0x398>
 80020f0:	4ba7      	ldr	r3, [pc, #668]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 80020f2:	6a1a      	ldr	r2, [r3, #32]
 80020f4:	4ba6      	ldr	r3, [pc, #664]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 80020f6:	2101      	movs	r1, #1
 80020f8:	438a      	bics	r2, r1
 80020fa:	621a      	str	r2, [r3, #32]
 80020fc:	4ba4      	ldr	r3, [pc, #656]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 80020fe:	6a1a      	ldr	r2, [r3, #32]
 8002100:	4ba3      	ldr	r3, [pc, #652]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 8002102:	2104      	movs	r1, #4
 8002104:	438a      	bics	r2, r1
 8002106:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d014      	beq.n	800213a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002110:	f7ff fb82 	bl	8001818 <HAL_GetTick>
 8002114:	0003      	movs	r3, r0
 8002116:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002118:	e009      	b.n	800212e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800211a:	f7ff fb7d 	bl	8001818 <HAL_GetTick>
 800211e:	0002      	movs	r2, r0
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	4a9b      	ldr	r2, [pc, #620]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e12b      	b.n	8002386 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212e:	4b98      	ldr	r3, [pc, #608]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	2202      	movs	r2, #2
 8002134:	4013      	ands	r3, r2
 8002136:	d0f0      	beq.n	800211a <HAL_RCC_OscConfig+0x3aa>
 8002138:	e013      	b.n	8002162 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213a:	f7ff fb6d 	bl	8001818 <HAL_GetTick>
 800213e:	0003      	movs	r3, r0
 8002140:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002142:	e009      	b.n	8002158 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002144:	f7ff fb68 	bl	8001818 <HAL_GetTick>
 8002148:	0002      	movs	r2, r0
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	4a91      	ldr	r2, [pc, #580]	; (8002394 <HAL_RCC_OscConfig+0x624>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e116      	b.n	8002386 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002158:	4b8d      	ldr	r3, [pc, #564]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	2202      	movs	r2, #2
 800215e:	4013      	ands	r3, r2
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002162:	231f      	movs	r3, #31
 8002164:	18fb      	adds	r3, r7, r3
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d105      	bne.n	8002178 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800216c:	4b88      	ldr	r3, [pc, #544]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 800216e:	69da      	ldr	r2, [r3, #28]
 8002170:	4b87      	ldr	r3, [pc, #540]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 8002172:	4989      	ldr	r1, [pc, #548]	; (8002398 <HAL_RCC_OscConfig+0x628>)
 8002174:	400a      	ands	r2, r1
 8002176:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2210      	movs	r2, #16
 800217e:	4013      	ands	r3, r2
 8002180:	d063      	beq.n	800224a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d12a      	bne.n	80021e0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800218a:	4b81      	ldr	r3, [pc, #516]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 800218c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800218e:	4b80      	ldr	r3, [pc, #512]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 8002190:	2104      	movs	r1, #4
 8002192:	430a      	orrs	r2, r1
 8002194:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002196:	4b7e      	ldr	r3, [pc, #504]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 8002198:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800219a:	4b7d      	ldr	r3, [pc, #500]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 800219c:	2101      	movs	r1, #1
 800219e:	430a      	orrs	r2, r1
 80021a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a2:	f7ff fb39 	bl	8001818 <HAL_GetTick>
 80021a6:	0003      	movs	r3, r0
 80021a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80021ac:	f7ff fb34 	bl	8001818 <HAL_GetTick>
 80021b0:	0002      	movs	r2, r0
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e0e3      	b.n	8002386 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80021be:	4b74      	ldr	r3, [pc, #464]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 80021c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c2:	2202      	movs	r2, #2
 80021c4:	4013      	ands	r3, r2
 80021c6:	d0f1      	beq.n	80021ac <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80021c8:	4b71      	ldr	r3, [pc, #452]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 80021ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021cc:	22f8      	movs	r2, #248	; 0xf8
 80021ce:	4393      	bics	r3, r2
 80021d0:	0019      	movs	r1, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	00da      	lsls	r2, r3, #3
 80021d8:	4b6d      	ldr	r3, [pc, #436]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 80021da:	430a      	orrs	r2, r1
 80021dc:	635a      	str	r2, [r3, #52]	; 0x34
 80021de:	e034      	b.n	800224a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	3305      	adds	r3, #5
 80021e6:	d111      	bne.n	800220c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80021e8:	4b69      	ldr	r3, [pc, #420]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 80021ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021ec:	4b68      	ldr	r3, [pc, #416]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 80021ee:	2104      	movs	r1, #4
 80021f0:	438a      	bics	r2, r1
 80021f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80021f4:	4b66      	ldr	r3, [pc, #408]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 80021f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f8:	22f8      	movs	r2, #248	; 0xf8
 80021fa:	4393      	bics	r3, r2
 80021fc:	0019      	movs	r1, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	00da      	lsls	r2, r3, #3
 8002204:	4b62      	ldr	r3, [pc, #392]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 8002206:	430a      	orrs	r2, r1
 8002208:	635a      	str	r2, [r3, #52]	; 0x34
 800220a:	e01e      	b.n	800224a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800220c:	4b60      	ldr	r3, [pc, #384]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 800220e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002210:	4b5f      	ldr	r3, [pc, #380]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 8002212:	2104      	movs	r1, #4
 8002214:	430a      	orrs	r2, r1
 8002216:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002218:	4b5d      	ldr	r3, [pc, #372]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 800221a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800221c:	4b5c      	ldr	r3, [pc, #368]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 800221e:	2101      	movs	r1, #1
 8002220:	438a      	bics	r2, r1
 8002222:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002224:	f7ff faf8 	bl	8001818 <HAL_GetTick>
 8002228:	0003      	movs	r3, r0
 800222a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800222e:	f7ff faf3 	bl	8001818 <HAL_GetTick>
 8002232:	0002      	movs	r2, r0
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e0a2      	b.n	8002386 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002240:	4b53      	ldr	r3, [pc, #332]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 8002242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002244:	2202      	movs	r2, #2
 8002246:	4013      	ands	r3, r2
 8002248:	d1f1      	bne.n	800222e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d100      	bne.n	8002254 <HAL_RCC_OscConfig+0x4e4>
 8002252:	e097      	b.n	8002384 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002254:	4b4e      	ldr	r3, [pc, #312]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	220c      	movs	r2, #12
 800225a:	4013      	ands	r3, r2
 800225c:	2b08      	cmp	r3, #8
 800225e:	d100      	bne.n	8002262 <HAL_RCC_OscConfig+0x4f2>
 8002260:	e06b      	b.n	800233a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	2b02      	cmp	r3, #2
 8002268:	d14c      	bne.n	8002304 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226a:	4b49      	ldr	r3, [pc, #292]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	4b48      	ldr	r3, [pc, #288]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 8002270:	494a      	ldr	r1, [pc, #296]	; (800239c <HAL_RCC_OscConfig+0x62c>)
 8002272:	400a      	ands	r2, r1
 8002274:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002276:	f7ff facf 	bl	8001818 <HAL_GetTick>
 800227a:	0003      	movs	r3, r0
 800227c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002280:	f7ff faca 	bl	8001818 <HAL_GetTick>
 8002284:	0002      	movs	r2, r0
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e079      	b.n	8002386 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002292:	4b3f      	ldr	r3, [pc, #252]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	2380      	movs	r3, #128	; 0x80
 8002298:	049b      	lsls	r3, r3, #18
 800229a:	4013      	ands	r3, r2
 800229c:	d1f0      	bne.n	8002280 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800229e:	4b3c      	ldr	r3, [pc, #240]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 80022a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a2:	220f      	movs	r2, #15
 80022a4:	4393      	bics	r3, r2
 80022a6:	0019      	movs	r1, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ac:	4b38      	ldr	r3, [pc, #224]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 80022ae:	430a      	orrs	r2, r1
 80022b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80022b2:	4b37      	ldr	r3, [pc, #220]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	4a3a      	ldr	r2, [pc, #232]	; (80023a0 <HAL_RCC_OscConfig+0x630>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	0019      	movs	r1, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	431a      	orrs	r2, r3
 80022c6:	4b32      	ldr	r3, [pc, #200]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 80022c8:	430a      	orrs	r2, r1
 80022ca:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022cc:	4b30      	ldr	r3, [pc, #192]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	4b2f      	ldr	r3, [pc, #188]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 80022d2:	2180      	movs	r1, #128	; 0x80
 80022d4:	0449      	lsls	r1, r1, #17
 80022d6:	430a      	orrs	r2, r1
 80022d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022da:	f7ff fa9d 	bl	8001818 <HAL_GetTick>
 80022de:	0003      	movs	r3, r0
 80022e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e4:	f7ff fa98 	bl	8001818 <HAL_GetTick>
 80022e8:	0002      	movs	r2, r0
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e047      	b.n	8002386 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022f6:	4b26      	ldr	r3, [pc, #152]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	049b      	lsls	r3, r3, #18
 80022fe:	4013      	ands	r3, r2
 8002300:	d0f0      	beq.n	80022e4 <HAL_RCC_OscConfig+0x574>
 8002302:	e03f      	b.n	8002384 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002304:	4b22      	ldr	r3, [pc, #136]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	4b21      	ldr	r3, [pc, #132]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 800230a:	4924      	ldr	r1, [pc, #144]	; (800239c <HAL_RCC_OscConfig+0x62c>)
 800230c:	400a      	ands	r2, r1
 800230e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002310:	f7ff fa82 	bl	8001818 <HAL_GetTick>
 8002314:	0003      	movs	r3, r0
 8002316:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800231a:	f7ff fa7d 	bl	8001818 <HAL_GetTick>
 800231e:	0002      	movs	r2, r0
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e02c      	b.n	8002386 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800232c:	4b18      	ldr	r3, [pc, #96]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	2380      	movs	r3, #128	; 0x80
 8002332:	049b      	lsls	r3, r3, #18
 8002334:	4013      	ands	r3, r2
 8002336:	d1f0      	bne.n	800231a <HAL_RCC_OscConfig+0x5aa>
 8002338:	e024      	b.n	8002384 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e01f      	b.n	8002386 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002346:	4b12      	ldr	r3, [pc, #72]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800234c:	4b10      	ldr	r3, [pc, #64]	; (8002390 <HAL_RCC_OscConfig+0x620>)
 800234e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002350:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	025b      	lsls	r3, r3, #9
 8002358:	401a      	ands	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	429a      	cmp	r2, r3
 8002360:	d10e      	bne.n	8002380 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	220f      	movs	r2, #15
 8002366:	401a      	ands	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800236c:	429a      	cmp	r2, r3
 800236e:	d107      	bne.n	8002380 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	23f0      	movs	r3, #240	; 0xf0
 8002374:	039b      	lsls	r3, r3, #14
 8002376:	401a      	ands	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800237c:	429a      	cmp	r2, r3
 800237e:	d001      	beq.n	8002384 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e000      	b.n	8002386 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	0018      	movs	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	b008      	add	sp, #32
 800238c:	bd80      	pop	{r7, pc}
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	40021000 	.word	0x40021000
 8002394:	00001388 	.word	0x00001388
 8002398:	efffffff 	.word	0xefffffff
 800239c:	feffffff 	.word	0xfeffffff
 80023a0:	ffc2ffff 	.word	0xffc2ffff

080023a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e0b3      	b.n	8002520 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023b8:	4b5b      	ldr	r3, [pc, #364]	; (8002528 <HAL_RCC_ClockConfig+0x184>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2201      	movs	r2, #1
 80023be:	4013      	ands	r3, r2
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d911      	bls.n	80023ea <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c6:	4b58      	ldr	r3, [pc, #352]	; (8002528 <HAL_RCC_ClockConfig+0x184>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2201      	movs	r2, #1
 80023cc:	4393      	bics	r3, r2
 80023ce:	0019      	movs	r1, r3
 80023d0:	4b55      	ldr	r3, [pc, #340]	; (8002528 <HAL_RCC_ClockConfig+0x184>)
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d8:	4b53      	ldr	r3, [pc, #332]	; (8002528 <HAL_RCC_ClockConfig+0x184>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2201      	movs	r2, #1
 80023de:	4013      	ands	r3, r2
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d001      	beq.n	80023ea <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e09a      	b.n	8002520 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2202      	movs	r2, #2
 80023f0:	4013      	ands	r3, r2
 80023f2:	d015      	beq.n	8002420 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2204      	movs	r2, #4
 80023fa:	4013      	ands	r3, r2
 80023fc:	d006      	beq.n	800240c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80023fe:	4b4b      	ldr	r3, [pc, #300]	; (800252c <HAL_RCC_ClockConfig+0x188>)
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	4b4a      	ldr	r3, [pc, #296]	; (800252c <HAL_RCC_ClockConfig+0x188>)
 8002404:	21e0      	movs	r1, #224	; 0xe0
 8002406:	00c9      	lsls	r1, r1, #3
 8002408:	430a      	orrs	r2, r1
 800240a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800240c:	4b47      	ldr	r3, [pc, #284]	; (800252c <HAL_RCC_ClockConfig+0x188>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	22f0      	movs	r2, #240	; 0xf0
 8002412:	4393      	bics	r3, r2
 8002414:	0019      	movs	r1, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	4b44      	ldr	r3, [pc, #272]	; (800252c <HAL_RCC_ClockConfig+0x188>)
 800241c:	430a      	orrs	r2, r1
 800241e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2201      	movs	r2, #1
 8002426:	4013      	ands	r3, r2
 8002428:	d040      	beq.n	80024ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d107      	bne.n	8002442 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002432:	4b3e      	ldr	r3, [pc, #248]	; (800252c <HAL_RCC_ClockConfig+0x188>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	2380      	movs	r3, #128	; 0x80
 8002438:	029b      	lsls	r3, r3, #10
 800243a:	4013      	ands	r3, r2
 800243c:	d114      	bne.n	8002468 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e06e      	b.n	8002520 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b02      	cmp	r3, #2
 8002448:	d107      	bne.n	800245a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244a:	4b38      	ldr	r3, [pc, #224]	; (800252c <HAL_RCC_ClockConfig+0x188>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	2380      	movs	r3, #128	; 0x80
 8002450:	049b      	lsls	r3, r3, #18
 8002452:	4013      	ands	r3, r2
 8002454:	d108      	bne.n	8002468 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e062      	b.n	8002520 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245a:	4b34      	ldr	r3, [pc, #208]	; (800252c <HAL_RCC_ClockConfig+0x188>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2202      	movs	r2, #2
 8002460:	4013      	ands	r3, r2
 8002462:	d101      	bne.n	8002468 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e05b      	b.n	8002520 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002468:	4b30      	ldr	r3, [pc, #192]	; (800252c <HAL_RCC_ClockConfig+0x188>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2203      	movs	r2, #3
 800246e:	4393      	bics	r3, r2
 8002470:	0019      	movs	r1, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685a      	ldr	r2, [r3, #4]
 8002476:	4b2d      	ldr	r3, [pc, #180]	; (800252c <HAL_RCC_ClockConfig+0x188>)
 8002478:	430a      	orrs	r2, r1
 800247a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800247c:	f7ff f9cc 	bl	8001818 <HAL_GetTick>
 8002480:	0003      	movs	r3, r0
 8002482:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002484:	e009      	b.n	800249a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002486:	f7ff f9c7 	bl	8001818 <HAL_GetTick>
 800248a:	0002      	movs	r2, r0
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	4a27      	ldr	r2, [pc, #156]	; (8002530 <HAL_RCC_ClockConfig+0x18c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d901      	bls.n	800249a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e042      	b.n	8002520 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249a:	4b24      	ldr	r3, [pc, #144]	; (800252c <HAL_RCC_ClockConfig+0x188>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	220c      	movs	r2, #12
 80024a0:	401a      	ands	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d1ec      	bne.n	8002486 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024ac:	4b1e      	ldr	r3, [pc, #120]	; (8002528 <HAL_RCC_ClockConfig+0x184>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2201      	movs	r2, #1
 80024b2:	4013      	ands	r3, r2
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d211      	bcs.n	80024de <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ba:	4b1b      	ldr	r3, [pc, #108]	; (8002528 <HAL_RCC_ClockConfig+0x184>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2201      	movs	r2, #1
 80024c0:	4393      	bics	r3, r2
 80024c2:	0019      	movs	r1, r3
 80024c4:	4b18      	ldr	r3, [pc, #96]	; (8002528 <HAL_RCC_ClockConfig+0x184>)
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024cc:	4b16      	ldr	r3, [pc, #88]	; (8002528 <HAL_RCC_ClockConfig+0x184>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2201      	movs	r2, #1
 80024d2:	4013      	ands	r3, r2
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d001      	beq.n	80024de <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e020      	b.n	8002520 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2204      	movs	r2, #4
 80024e4:	4013      	ands	r3, r2
 80024e6:	d009      	beq.n	80024fc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80024e8:	4b10      	ldr	r3, [pc, #64]	; (800252c <HAL_RCC_ClockConfig+0x188>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	4a11      	ldr	r2, [pc, #68]	; (8002534 <HAL_RCC_ClockConfig+0x190>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	0019      	movs	r1, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	4b0d      	ldr	r3, [pc, #52]	; (800252c <HAL_RCC_ClockConfig+0x188>)
 80024f8:	430a      	orrs	r2, r1
 80024fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80024fc:	f000 f820 	bl	8002540 <HAL_RCC_GetSysClockFreq>
 8002500:	0001      	movs	r1, r0
 8002502:	4b0a      	ldr	r3, [pc, #40]	; (800252c <HAL_RCC_ClockConfig+0x188>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	091b      	lsrs	r3, r3, #4
 8002508:	220f      	movs	r2, #15
 800250a:	4013      	ands	r3, r2
 800250c:	4a0a      	ldr	r2, [pc, #40]	; (8002538 <HAL_RCC_ClockConfig+0x194>)
 800250e:	5cd3      	ldrb	r3, [r2, r3]
 8002510:	000a      	movs	r2, r1
 8002512:	40da      	lsrs	r2, r3
 8002514:	4b09      	ldr	r3, [pc, #36]	; (800253c <HAL_RCC_ClockConfig+0x198>)
 8002516:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002518:	2000      	movs	r0, #0
 800251a:	f7ff f937 	bl	800178c <HAL_InitTick>
  
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	0018      	movs	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	b004      	add	sp, #16
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40022000 	.word	0x40022000
 800252c:	40021000 	.word	0x40021000
 8002530:	00001388 	.word	0x00001388
 8002534:	fffff8ff 	.word	0xfffff8ff
 8002538:	08003ed0 	.word	0x08003ed0
 800253c:	2000000c 	.word	0x2000000c

08002540 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002540:	b590      	push	{r4, r7, lr}
 8002542:	b08f      	sub	sp, #60	; 0x3c
 8002544:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002546:	2314      	movs	r3, #20
 8002548:	18fb      	adds	r3, r7, r3
 800254a:	4a2b      	ldr	r2, [pc, #172]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800254c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800254e:	c313      	stmia	r3!, {r0, r1, r4}
 8002550:	6812      	ldr	r2, [r2, #0]
 8002552:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002554:	1d3b      	adds	r3, r7, #4
 8002556:	4a29      	ldr	r2, [pc, #164]	; (80025fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002558:	ca13      	ldmia	r2!, {r0, r1, r4}
 800255a:	c313      	stmia	r3!, {r0, r1, r4}
 800255c:	6812      	ldr	r2, [r2, #0]
 800255e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002564:	2300      	movs	r3, #0
 8002566:	62bb      	str	r3, [r7, #40]	; 0x28
 8002568:	2300      	movs	r3, #0
 800256a:	637b      	str	r3, [r7, #52]	; 0x34
 800256c:	2300      	movs	r3, #0
 800256e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002574:	4b22      	ldr	r3, [pc, #136]	; (8002600 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800257a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257c:	220c      	movs	r2, #12
 800257e:	4013      	ands	r3, r2
 8002580:	2b04      	cmp	r3, #4
 8002582:	d002      	beq.n	800258a <HAL_RCC_GetSysClockFreq+0x4a>
 8002584:	2b08      	cmp	r3, #8
 8002586:	d003      	beq.n	8002590 <HAL_RCC_GetSysClockFreq+0x50>
 8002588:	e02d      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800258a:	4b1e      	ldr	r3, [pc, #120]	; (8002604 <HAL_RCC_GetSysClockFreq+0xc4>)
 800258c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800258e:	e02d      	b.n	80025ec <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002592:	0c9b      	lsrs	r3, r3, #18
 8002594:	220f      	movs	r2, #15
 8002596:	4013      	ands	r3, r2
 8002598:	2214      	movs	r2, #20
 800259a:	18ba      	adds	r2, r7, r2
 800259c:	5cd3      	ldrb	r3, [r2, r3]
 800259e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80025a0:	4b17      	ldr	r3, [pc, #92]	; (8002600 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	220f      	movs	r2, #15
 80025a6:	4013      	ands	r3, r2
 80025a8:	1d3a      	adds	r2, r7, #4
 80025aa:	5cd3      	ldrb	r3, [r2, r3]
 80025ac:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80025ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025b0:	2380      	movs	r3, #128	; 0x80
 80025b2:	025b      	lsls	r3, r3, #9
 80025b4:	4013      	ands	r3, r2
 80025b6:	d009      	beq.n	80025cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025ba:	4812      	ldr	r0, [pc, #72]	; (8002604 <HAL_RCC_GetSysClockFreq+0xc4>)
 80025bc:	f7fd fda4 	bl	8000108 <__udivsi3>
 80025c0:	0003      	movs	r3, r0
 80025c2:	001a      	movs	r2, r3
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	4353      	muls	r3, r2
 80025c8:	637b      	str	r3, [r7, #52]	; 0x34
 80025ca:	e009      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80025cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025ce:	000a      	movs	r2, r1
 80025d0:	0152      	lsls	r2, r2, #5
 80025d2:	1a52      	subs	r2, r2, r1
 80025d4:	0193      	lsls	r3, r2, #6
 80025d6:	1a9b      	subs	r3, r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	185b      	adds	r3, r3, r1
 80025dc:	021b      	lsls	r3, r3, #8
 80025de:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80025e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025e4:	e002      	b.n	80025ec <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025e6:	4b07      	ldr	r3, [pc, #28]	; (8002604 <HAL_RCC_GetSysClockFreq+0xc4>)
 80025e8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025ea:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80025ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80025ee:	0018      	movs	r0, r3
 80025f0:	46bd      	mov	sp, r7
 80025f2:	b00f      	add	sp, #60	; 0x3c
 80025f4:	bd90      	pop	{r4, r7, pc}
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	08003e00 	.word	0x08003e00
 80025fc:	08003e10 	.word	0x08003e10
 8002600:	40021000 	.word	0x40021000
 8002604:	007a1200 	.word	0x007a1200

08002608 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e08a      	b.n	8002730 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	225d      	movs	r2, #93	; 0x5d
 8002624:	5c9b      	ldrb	r3, [r3, r2]
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	d107      	bne.n	800263c <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	225c      	movs	r2, #92	; 0x5c
 8002630:	2100      	movs	r1, #0
 8002632:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	0018      	movs	r0, r3
 8002638:	f7fe fe76 	bl	8001328 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	225d      	movs	r2, #93	; 0x5d
 8002640:	2102      	movs	r1, #2
 8002642:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2140      	movs	r1, #64	; 0x40
 8002650:	438a      	bics	r2, r1
 8002652:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68da      	ldr	r2, [r3, #12]
 8002658:	23e0      	movs	r3, #224	; 0xe0
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	429a      	cmp	r2, r3
 800265e:	d902      	bls.n	8002666 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002660:	2300      	movs	r3, #0
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	e002      	b.n	800266c <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002666:	2380      	movs	r3, #128	; 0x80
 8002668:	015b      	lsls	r3, r3, #5
 800266a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	23f0      	movs	r3, #240	; 0xf0
 8002672:	011b      	lsls	r3, r3, #4
 8002674:	429a      	cmp	r2, r3
 8002676:	d008      	beq.n	800268a <HAL_SPI_Init+0x82>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	23e0      	movs	r3, #224	; 0xe0
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	429a      	cmp	r2, r3
 8002682:	d002      	beq.n	800268a <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10c      	bne.n	80026ac <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	23e0      	movs	r3, #224	; 0xe0
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	429a      	cmp	r2, r3
 800269c:	d903      	bls.n	80026a6 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2202      	movs	r2, #2
 80026a2:	631a      	str	r2, [r3, #48]	; 0x30
 80026a4:	e002      	b.n	80026ac <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	431a      	orrs	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	431a      	orrs	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6999      	ldr	r1, [r3, #24]
 80026c6:	2380      	movs	r3, #128	; 0x80
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	400b      	ands	r3, r1
 80026cc:	431a      	orrs	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	431a      	orrs	r2, r3
 80026da:	0011      	movs	r1, r2
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	0c1b      	lsrs	r3, r3, #16
 80026ee:	2204      	movs	r2, #4
 80026f0:	401a      	ands	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026fc:	431a      	orrs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	431a      	orrs	r2, r3
 8002704:	0011      	movs	r1, r2
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	430a      	orrs	r2, r1
 800270e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	69da      	ldr	r2, [r3, #28]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4907      	ldr	r1, [pc, #28]	; (8002738 <HAL_SPI_Init+0x130>)
 800271c:	400a      	ands	r2, r1
 800271e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	225d      	movs	r2, #93	; 0x5d
 800272a:	2101      	movs	r1, #1
 800272c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	0018      	movs	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	b004      	add	sp, #16
 8002736:	bd80      	pop	{r7, pc}
 8002738:	fffff7ff 	.word	0xfffff7ff

0800273c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b088      	sub	sp, #32
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	603b      	str	r3, [r7, #0]
 8002748:	1dbb      	adds	r3, r7, #6
 800274a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800274c:	231f      	movs	r3, #31
 800274e:	18fb      	adds	r3, r7, r3
 8002750:	2200      	movs	r2, #0
 8002752:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	225c      	movs	r2, #92	; 0x5c
 8002758:	5c9b      	ldrb	r3, [r3, r2]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d101      	bne.n	8002762 <HAL_SPI_Transmit+0x26>
 800275e:	2302      	movs	r3, #2
 8002760:	e169      	b.n	8002a36 <HAL_SPI_Transmit+0x2fa>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	225c      	movs	r2, #92	; 0x5c
 8002766:	2101      	movs	r1, #1
 8002768:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800276a:	f7ff f855 	bl	8001818 <HAL_GetTick>
 800276e:	0003      	movs	r3, r0
 8002770:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002772:	2316      	movs	r3, #22
 8002774:	18fb      	adds	r3, r7, r3
 8002776:	1dba      	adds	r2, r7, #6
 8002778:	8812      	ldrh	r2, [r2, #0]
 800277a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	225d      	movs	r2, #93	; 0x5d
 8002780:	5c9b      	ldrb	r3, [r3, r2]
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b01      	cmp	r3, #1
 8002786:	d004      	beq.n	8002792 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002788:	231f      	movs	r3, #31
 800278a:	18fb      	adds	r3, r7, r3
 800278c:	2202      	movs	r2, #2
 800278e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002790:	e146      	b.n	8002a20 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_SPI_Transmit+0x64>
 8002798:	1dbb      	adds	r3, r7, #6
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d104      	bne.n	80027aa <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80027a0:	231f      	movs	r3, #31
 80027a2:	18fb      	adds	r3, r7, r3
 80027a4:	2201      	movs	r2, #1
 80027a6:	701a      	strb	r2, [r3, #0]
    goto error;
 80027a8:	e13a      	b.n	8002a20 <HAL_SPI_Transmit+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	225d      	movs	r2, #93	; 0x5d
 80027ae:	2103      	movs	r1, #3
 80027b0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	1dba      	adds	r2, r7, #6
 80027c2:	8812      	ldrh	r2, [r2, #0]
 80027c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	1dba      	adds	r2, r7, #6
 80027ca:	8812      	ldrh	r2, [r2, #0]
 80027cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2244      	movs	r2, #68	; 0x44
 80027d8:	2100      	movs	r1, #0
 80027da:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2246      	movs	r2, #70	; 0x46
 80027e0:	2100      	movs	r1, #0
 80027e2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	2380      	movs	r3, #128	; 0x80
 80027f6:	021b      	lsls	r3, r3, #8
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d108      	bne.n	800280e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2180      	movs	r1, #128	; 0x80
 8002808:	01c9      	lsls	r1, r1, #7
 800280a:	430a      	orrs	r2, r1
 800280c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2240      	movs	r2, #64	; 0x40
 8002816:	4013      	ands	r3, r2
 8002818:	2b40      	cmp	r3, #64	; 0x40
 800281a:	d007      	beq.n	800282c <HAL_SPI_Transmit+0xf0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2140      	movs	r1, #64	; 0x40
 8002828:	430a      	orrs	r2, r1
 800282a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	68da      	ldr	r2, [r3, #12]
 8002830:	23e0      	movs	r3, #224	; 0xe0
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	429a      	cmp	r2, r3
 8002836:	d94e      	bls.n	80028d6 <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d004      	beq.n	800284a <HAL_SPI_Transmit+0x10e>
 8002840:	2316      	movs	r3, #22
 8002842:	18fb      	adds	r3, r7, r3
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d13f      	bne.n	80028ca <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284e:	881a      	ldrh	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285a:	1c9a      	adds	r2, r3, #2
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002864:	b29b      	uxth	r3, r3
 8002866:	3b01      	subs	r3, #1
 8002868:	b29a      	uxth	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800286e:	e02c      	b.n	80028ca <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	2202      	movs	r2, #2
 8002878:	4013      	ands	r3, r2
 800287a:	2b02      	cmp	r3, #2
 800287c:	d112      	bne.n	80028a4 <HAL_SPI_Transmit+0x168>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002882:	881a      	ldrh	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288e:	1c9a      	adds	r2, r3, #2
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002898:	b29b      	uxth	r3, r3
 800289a:	3b01      	subs	r3, #1
 800289c:	b29a      	uxth	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028a2:	e012      	b.n	80028ca <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028a4:	f7fe ffb8 	bl	8001818 <HAL_GetTick>
 80028a8:	0002      	movs	r2, r0
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d802      	bhi.n	80028ba <HAL_SPI_Transmit+0x17e>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	3301      	adds	r3, #1
 80028b8:	d102      	bne.n	80028c0 <HAL_SPI_Transmit+0x184>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d104      	bne.n	80028ca <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 80028c0:	231f      	movs	r3, #31
 80028c2:	18fb      	adds	r3, r7, r3
 80028c4:	2203      	movs	r2, #3
 80028c6:	701a      	strb	r2, [r3, #0]
          goto error;
 80028c8:	e0aa      	b.n	8002a20 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1cd      	bne.n	8002870 <HAL_SPI_Transmit+0x134>
 80028d4:	e080      	b.n	80029d8 <HAL_SPI_Transmit+0x29c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d005      	beq.n	80028ea <HAL_SPI_Transmit+0x1ae>
 80028de:	2316      	movs	r3, #22
 80028e0:	18fb      	adds	r3, r7, r3
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d000      	beq.n	80028ea <HAL_SPI_Transmit+0x1ae>
 80028e8:	e071      	b.n	80029ce <HAL_SPI_Transmit+0x292>
    {
      if (hspi->TxXferCount > 1U)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d912      	bls.n	800291a <HAL_SPI_Transmit+0x1de>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f8:	881a      	ldrh	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002904:	1c9a      	adds	r2, r3, #2
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800290e:	b29b      	uxth	r3, r3
 8002910:	3b02      	subs	r3, #2
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002918:	e059      	b.n	80029ce <HAL_SPI_Transmit+0x292>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	330c      	adds	r3, #12
 8002924:	7812      	ldrb	r2, [r2, #0]
 8002926:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002936:	b29b      	uxth	r3, r3
 8002938:	3b01      	subs	r3, #1
 800293a:	b29a      	uxth	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002940:	e045      	b.n	80029ce <HAL_SPI_Transmit+0x292>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	2202      	movs	r2, #2
 800294a:	4013      	ands	r3, r2
 800294c:	2b02      	cmp	r3, #2
 800294e:	d12b      	bne.n	80029a8 <HAL_SPI_Transmit+0x26c>
      {
        if (hspi->TxXferCount > 1U)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002954:	b29b      	uxth	r3, r3
 8002956:	2b01      	cmp	r3, #1
 8002958:	d912      	bls.n	8002980 <HAL_SPI_Transmit+0x244>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295e:	881a      	ldrh	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296a:	1c9a      	adds	r2, r3, #2
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002974:	b29b      	uxth	r3, r3
 8002976:	3b02      	subs	r3, #2
 8002978:	b29a      	uxth	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800297e:	e026      	b.n	80029ce <HAL_SPI_Transmit+0x292>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	330c      	adds	r3, #12
 800298a:	7812      	ldrb	r2, [r2, #0]
 800298c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002992:	1c5a      	adds	r2, r3, #1
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800299c:	b29b      	uxth	r3, r3
 800299e:	3b01      	subs	r3, #1
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029a6:	e012      	b.n	80029ce <HAL_SPI_Transmit+0x292>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029a8:	f7fe ff36 	bl	8001818 <HAL_GetTick>
 80029ac:	0002      	movs	r2, r0
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d802      	bhi.n	80029be <HAL_SPI_Transmit+0x282>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	3301      	adds	r3, #1
 80029bc:	d102      	bne.n	80029c4 <HAL_SPI_Transmit+0x288>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d104      	bne.n	80029ce <HAL_SPI_Transmit+0x292>
        {
          errorcode = HAL_TIMEOUT;
 80029c4:	231f      	movs	r3, #31
 80029c6:	18fb      	adds	r3, r7, r3
 80029c8:	2203      	movs	r2, #3
 80029ca:	701a      	strb	r2, [r3, #0]
          goto error;
 80029cc:	e028      	b.n	8002a20 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1b4      	bne.n	8002942 <HAL_SPI_Transmit+0x206>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	6839      	ldr	r1, [r7, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	0018      	movs	r0, r3
 80029e0:	f000 f912 	bl	8002c08 <SPI_EndRxTxTransaction>
 80029e4:	1e03      	subs	r3, r0, #0
 80029e6:	d002      	beq.n	80029ee <HAL_SPI_Transmit+0x2b2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2220      	movs	r2, #32
 80029ec:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10a      	bne.n	8002a0c <HAL_SPI_Transmit+0x2d0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029f6:	2300      	movs	r3, #0
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d004      	beq.n	8002a1e <HAL_SPI_Transmit+0x2e2>
  {
    errorcode = HAL_ERROR;
 8002a14:	231f      	movs	r3, #31
 8002a16:	18fb      	adds	r3, r7, r3
 8002a18:	2201      	movs	r2, #1
 8002a1a:	701a      	strb	r2, [r3, #0]
 8002a1c:	e000      	b.n	8002a20 <HAL_SPI_Transmit+0x2e4>
  }

error:
 8002a1e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	225d      	movs	r2, #93	; 0x5d
 8002a24:	2101      	movs	r1, #1
 8002a26:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	225c      	movs	r2, #92	; 0x5c
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002a30:	231f      	movs	r3, #31
 8002a32:	18fb      	adds	r3, r7, r3
 8002a34:	781b      	ldrb	r3, [r3, #0]
}
 8002a36:	0018      	movs	r0, r3
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	b008      	add	sp, #32
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	603b      	str	r3, [r7, #0]
 8002a4c:	1dfb      	adds	r3, r7, #7
 8002a4e:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a50:	e050      	b.n	8002af4 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	3301      	adds	r3, #1
 8002a56:	d04d      	beq.n	8002af4 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002a58:	f7fe fede 	bl	8001818 <HAL_GetTick>
 8002a5c:	0002      	movs	r2, r0
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d902      	bls.n	8002a6e <SPI_WaitFlagStateUntilTimeout+0x2e>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d142      	bne.n	8002af4 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	21e0      	movs	r1, #224	; 0xe0
 8002a7a:	438a      	bics	r2, r1
 8002a7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	2382      	movs	r3, #130	; 0x82
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d113      	bne.n	8002ab2 <SPI_WaitFlagStateUntilTimeout+0x72>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	2380      	movs	r3, #128	; 0x80
 8002a90:	021b      	lsls	r3, r3, #8
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d005      	beq.n	8002aa2 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	2380      	movs	r3, #128	; 0x80
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d107      	bne.n	8002ab2 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2140      	movs	r1, #64	; 0x40
 8002aae:	438a      	bics	r2, r1
 8002ab0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ab6:	2380      	movs	r3, #128	; 0x80
 8002ab8:	019b      	lsls	r3, r3, #6
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d110      	bne.n	8002ae0 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4914      	ldr	r1, [pc, #80]	; (8002b1c <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8002aca:	400a      	ands	r2, r1
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2180      	movs	r1, #128	; 0x80
 8002ada:	0189      	lsls	r1, r1, #6
 8002adc:	430a      	orrs	r2, r1
 8002ade:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	225d      	movs	r2, #93	; 0x5d
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	225c      	movs	r2, #92	; 0x5c
 8002aec:	2100      	movs	r1, #0
 8002aee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e00f      	b.n	8002b14 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	4013      	ands	r3, r2
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	425a      	negs	r2, r3
 8002b04:	4153      	adcs	r3, r2
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	001a      	movs	r2, r3
 8002b0a:	1dfb      	adds	r3, r7, #7
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d19f      	bne.n	8002a52 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	0018      	movs	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	b004      	add	sp, #16
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	ffffdfff 	.word	0xffffdfff

08002b20 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
 8002b2c:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8002b2e:	e05c      	b.n	8002bea <SPI_WaitFifoStateUntilTimeout+0xca>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	23c0      	movs	r3, #192	; 0xc0
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d106      	bne.n	8002b48 <SPI_WaitFifoStateUntilTimeout+0x28>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d103      	bne.n	8002b48 <SPI_WaitFifoStateUntilTimeout+0x28>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	330c      	adds	r3, #12
 8002b46:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	d04d      	beq.n	8002bea <SPI_WaitFifoStateUntilTimeout+0xca>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002b4e:	f7fe fe63 	bl	8001818 <HAL_GetTick>
 8002b52:	0002      	movs	r2, r0
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d902      	bls.n	8002b64 <SPI_WaitFifoStateUntilTimeout+0x44>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d142      	bne.n	8002bea <SPI_WaitFifoStateUntilTimeout+0xca>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	21e0      	movs	r1, #224	; 0xe0
 8002b70:	438a      	bics	r2, r1
 8002b72:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	2382      	movs	r3, #130	; 0x82
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d113      	bne.n	8002ba8 <SPI_WaitFifoStateUntilTimeout+0x88>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	2380      	movs	r3, #128	; 0x80
 8002b86:	021b      	lsls	r3, r3, #8
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d005      	beq.n	8002b98 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	2380      	movs	r3, #128	; 0x80
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d107      	bne.n	8002ba8 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2140      	movs	r1, #64	; 0x40
 8002ba4:	438a      	bics	r2, r1
 8002ba6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bac:	2380      	movs	r3, #128	; 0x80
 8002bae:	019b      	lsls	r3, r3, #6
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d110      	bne.n	8002bd6 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          SPI_RESET_CRC(hspi);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4911      	ldr	r1, [pc, #68]	; (8002c04 <SPI_WaitFifoStateUntilTimeout+0xe4>)
 8002bc0:	400a      	ands	r2, r1
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2180      	movs	r1, #128	; 0x80
 8002bd0:	0189      	lsls	r1, r1, #6
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	225d      	movs	r2, #93	; 0x5d
 8002bda:	2101      	movs	r1, #1
 8002bdc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	225c      	movs	r2, #92	; 0x5c
 8002be2:	2100      	movs	r1, #0
 8002be4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e008      	b.n	8002bfc <SPI_WaitFifoStateUntilTimeout+0xdc>
  while ((hspi->Instance->SR & Fifo) != State)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	68ba      	ldr	r2, [r7, #8]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d19a      	bne.n	8002b30 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	b004      	add	sp, #16
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	ffffdfff 	.word	0xffffdfff

08002c08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af02      	add	r7, sp, #8
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	23c0      	movs	r3, #192	; 0xc0
 8002c18:	0159      	lsls	r1, r3, #5
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	0013      	movs	r3, r2
 8002c22:	2200      	movs	r2, #0
 8002c24:	f7ff ff7c 	bl	8002b20 <SPI_WaitFifoStateUntilTimeout>
 8002c28:	1e03      	subs	r3, r0, #0
 8002c2a:	d007      	beq.n	8002c3c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c30:	2220      	movs	r2, #32
 8002c32:	431a      	orrs	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e027      	b.n	8002c8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	0013      	movs	r3, r2
 8002c46:	2200      	movs	r2, #0
 8002c48:	2180      	movs	r1, #128	; 0x80
 8002c4a:	f7ff fef9 	bl	8002a40 <SPI_WaitFlagStateUntilTimeout>
 8002c4e:	1e03      	subs	r3, r0, #0
 8002c50:	d007      	beq.n	8002c62 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c56:	2220      	movs	r2, #32
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e014      	b.n	8002c8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	23c0      	movs	r3, #192	; 0xc0
 8002c66:	00d9      	lsls	r1, r3, #3
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	0013      	movs	r3, r2
 8002c70:	2200      	movs	r2, #0
 8002c72:	f7ff ff55 	bl	8002b20 <SPI_WaitFifoStateUntilTimeout>
 8002c76:	1e03      	subs	r3, r0, #0
 8002c78:	d007      	beq.n	8002c8a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c7e:	2220      	movs	r2, #32
 8002c80:	431a      	orrs	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e000      	b.n	8002c8c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	b004      	add	sp, #16
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e01e      	b.n	8002ce4 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	223d      	movs	r2, #61	; 0x3d
 8002caa:	5c9b      	ldrb	r3, [r3, r2]
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d107      	bne.n	8002cc2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	223c      	movs	r2, #60	; 0x3c
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f7fe fbd3 	bl	8001468 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	223d      	movs	r2, #61	; 0x3d
 8002cc6:	2102      	movs	r1, #2
 8002cc8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	0019      	movs	r1, r3
 8002cd4:	0010      	movs	r0, r2
 8002cd6:	f000 fc65 	bl	80035a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	223d      	movs	r2, #61	; 0x3d
 8002cde:	2101      	movs	r1, #1
 8002ce0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	b002      	add	sp, #8
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2101      	movs	r1, #1
 8002d00:	430a      	orrs	r2, r1
 8002d02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	2207      	movs	r2, #7
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2b06      	cmp	r3, #6
 8002d14:	d007      	beq.n	8002d26 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2101      	movs	r1, #1
 8002d22:	430a      	orrs	r2, r1
 8002d24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	0018      	movs	r0, r3
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	b004      	add	sp, #16
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2101      	movs	r1, #1
 8002d44:	438a      	bics	r2, r1
 8002d46:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	4a0b      	ldr	r2, [pc, #44]	; (8002d7c <HAL_TIM_Base_Stop_IT+0x4c>)
 8002d50:	4013      	ands	r3, r2
 8002d52:	d10d      	bne.n	8002d70 <HAL_TIM_Base_Stop_IT+0x40>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	4a09      	ldr	r2, [pc, #36]	; (8002d80 <HAL_TIM_Base_Stop_IT+0x50>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	d107      	bne.n	8002d70 <HAL_TIM_Base_Stop_IT+0x40>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	438a      	bics	r2, r1
 8002d6e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	0018      	movs	r0, r3
 8002d74:	46bd      	mov	sp, r7
 8002d76:	b002      	add	sp, #8
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	00001111 	.word	0x00001111
 8002d80:	00000444 	.word	0x00000444

08002d84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e01e      	b.n	8002dd4 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	223d      	movs	r2, #61	; 0x3d
 8002d9a:	5c9b      	ldrb	r3, [r3, r2]
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d107      	bne.n	8002db2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	223c      	movs	r2, #60	; 0x3c
 8002da6:	2100      	movs	r1, #0
 8002da8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	0018      	movs	r0, r3
 8002dae:	f000 f815 	bl	8002ddc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	223d      	movs	r2, #61	; 0x3d
 8002db6:	2102      	movs	r1, #2
 8002db8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	0019      	movs	r1, r3
 8002dc4:	0010      	movs	r0, r2
 8002dc6:	f000 fbed 	bl	80035a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	223d      	movs	r2, #61	; 0x3d
 8002dce:	2101      	movs	r1, #1
 8002dd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	b002      	add	sp, #8
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002de4:	46c0      	nop			; (mov r8, r8)
 8002de6:	46bd      	mov	sp, r7
 8002de8:	b002      	add	sp, #8
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6839      	ldr	r1, [r7, #0]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f000 fedc 	bl	8003bbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a1a      	ldr	r2, [pc, #104]	; (8002e74 <HAL_TIM_PWM_Start+0x88>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d00e      	beq.n	8002e2c <HAL_TIM_PWM_Start+0x40>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a19      	ldr	r2, [pc, #100]	; (8002e78 <HAL_TIM_PWM_Start+0x8c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d009      	beq.n	8002e2c <HAL_TIM_PWM_Start+0x40>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a17      	ldr	r2, [pc, #92]	; (8002e7c <HAL_TIM_PWM_Start+0x90>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d004      	beq.n	8002e2c <HAL_TIM_PWM_Start+0x40>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a16      	ldr	r2, [pc, #88]	; (8002e80 <HAL_TIM_PWM_Start+0x94>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d101      	bne.n	8002e30 <HAL_TIM_PWM_Start+0x44>
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e000      	b.n	8002e32 <HAL_TIM_PWM_Start+0x46>
 8002e30:	2300      	movs	r3, #0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d008      	beq.n	8002e48 <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2180      	movs	r1, #128	; 0x80
 8002e42:	0209      	lsls	r1, r1, #8
 8002e44:	430a      	orrs	r2, r1
 8002e46:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	2207      	movs	r2, #7
 8002e50:	4013      	ands	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2b06      	cmp	r3, #6
 8002e58:	d007      	beq.n	8002e6a <HAL_TIM_PWM_Start+0x7e>
  {
    __HAL_TIM_ENABLE(htim);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2101      	movs	r1, #1
 8002e66:	430a      	orrs	r2, r1
 8002e68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	b004      	add	sp, #16
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40012c00 	.word	0x40012c00
 8002e78:	40014000 	.word	0x40014000
 8002e7c:	40014400 	.word	0x40014400
 8002e80:	40014800 	.word	0x40014800

08002e84 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e07c      	b.n	8002f92 <HAL_TIM_Encoder_Init+0x10e>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	223d      	movs	r2, #61	; 0x3d
 8002e9c:	5c9b      	ldrb	r3, [r3, r2]
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d107      	bne.n	8002eb4 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	223c      	movs	r2, #60	; 0x3c
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	0018      	movs	r0, r3
 8002eb0:	f7fe fa88 	bl	80013c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	223d      	movs	r2, #61	; 0x3d
 8002eb8:	2102      	movs	r1, #2
 8002eba:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689a      	ldr	r2, [r3, #8]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4935      	ldr	r1, [pc, #212]	; (8002f9c <HAL_TIM_Encoder_Init+0x118>)
 8002ec8:	400a      	ands	r2, r1
 8002eca:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	0019      	movs	r1, r3
 8002ed6:	0010      	movs	r0, r2
 8002ed8:	f000 fb64 	bl	80035a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	4a27      	ldr	r2, [pc, #156]	; (8002fa0 <HAL_TIM_Encoder_Init+0x11c>)
 8002f02:	4013      	ands	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	021b      	lsls	r3, r3, #8
 8002f10:	4313      	orrs	r3, r2
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	4a22      	ldr	r2, [pc, #136]	; (8002fa4 <HAL_TIM_Encoder_Init+0x120>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	4a21      	ldr	r2, [pc, #132]	; (8002fa8 <HAL_TIM_Encoder_Init+0x124>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	68da      	ldr	r2, [r3, #12]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	021b      	lsls	r3, r3, #8
 8002f32:	4313      	orrs	r3, r2
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	011a      	lsls	r2, r3, #4
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	031b      	lsls	r3, r3, #12
 8002f46:	4313      	orrs	r3, r2
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2222      	movs	r2, #34	; 0x22
 8002f52:	4393      	bics	r3, r2
 8002f54:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2288      	movs	r2, #136	; 0x88
 8002f5a:	4393      	bics	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	223d      	movs	r2, #61	; 0x3d
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	0018      	movs	r0, r3
 8002f94:	46bd      	mov	sp, r7
 8002f96:	b006      	add	sp, #24
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	ffffbff8 	.word	0xffffbff8
 8002fa0:	fffffcfc 	.word	0xfffffcfc
 8002fa4:	fffff3f3 	.word	0xfffff3f3
 8002fa8:	ffff0f0f 	.word	0xffff0f0f

08002fac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <HAL_TIM_Encoder_Start+0x18>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d008      	beq.n	8002fd4 <HAL_TIM_Encoder_Start+0x28>
 8002fc2:	e00f      	b.n	8002fe4 <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	2100      	movs	r1, #0
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f000 fdf5 	bl	8003bbc <TIM_CCxChannelCmd>
      break;
 8002fd2:	e016      	b.n	8003002 <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	2104      	movs	r1, #4
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f000 fded 	bl	8003bbc <TIM_CCxChannelCmd>
      break;
 8002fe2:	e00e      	b.n	8003002 <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	2100      	movs	r1, #0
 8002fec:	0018      	movs	r0, r3
 8002fee:	f000 fde5 	bl	8003bbc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	2104      	movs	r1, #4
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f000 fdde 	bl	8003bbc <TIM_CCxChannelCmd>
      break;
 8003000:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2101      	movs	r1, #1
 800300e:	430a      	orrs	r2, r1
 8003010:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	0018      	movs	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	b002      	add	sp, #8
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	2202      	movs	r2, #2
 800302c:	4013      	ands	r3, r2
 800302e:	2b02      	cmp	r3, #2
 8003030:	d124      	bne.n	800307c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	2202      	movs	r2, #2
 800303a:	4013      	ands	r3, r2
 800303c:	2b02      	cmp	r3, #2
 800303e:	d11d      	bne.n	800307c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2203      	movs	r2, #3
 8003046:	4252      	negs	r2, r2
 8003048:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	2203      	movs	r2, #3
 8003058:	4013      	ands	r3, r2
 800305a:	d004      	beq.n	8003066 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	0018      	movs	r0, r3
 8003060:	f000 fa88 	bl	8003574 <HAL_TIM_IC_CaptureCallback>
 8003064:	e007      	b.n	8003076 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	0018      	movs	r0, r3
 800306a:	f000 fa7b 	bl	8003564 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	0018      	movs	r0, r3
 8003072:	f000 fa87 	bl	8003584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	2204      	movs	r2, #4
 8003084:	4013      	ands	r3, r2
 8003086:	2b04      	cmp	r3, #4
 8003088:	d125      	bne.n	80030d6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	2204      	movs	r2, #4
 8003092:	4013      	ands	r3, r2
 8003094:	2b04      	cmp	r3, #4
 8003096:	d11e      	bne.n	80030d6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2205      	movs	r2, #5
 800309e:	4252      	negs	r2, r2
 80030a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2202      	movs	r2, #2
 80030a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	699a      	ldr	r2, [r3, #24]
 80030ae:	23c0      	movs	r3, #192	; 0xc0
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4013      	ands	r3, r2
 80030b4:	d004      	beq.n	80030c0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	0018      	movs	r0, r3
 80030ba:	f000 fa5b 	bl	8003574 <HAL_TIM_IC_CaptureCallback>
 80030be:	e007      	b.n	80030d0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	0018      	movs	r0, r3
 80030c4:	f000 fa4e 	bl	8003564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	0018      	movs	r0, r3
 80030cc:	f000 fa5a 	bl	8003584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	2208      	movs	r2, #8
 80030de:	4013      	ands	r3, r2
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d124      	bne.n	800312e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	2208      	movs	r2, #8
 80030ec:	4013      	ands	r3, r2
 80030ee:	2b08      	cmp	r3, #8
 80030f0:	d11d      	bne.n	800312e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2209      	movs	r2, #9
 80030f8:	4252      	negs	r2, r2
 80030fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2204      	movs	r2, #4
 8003100:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	2203      	movs	r2, #3
 800310a:	4013      	ands	r3, r2
 800310c:	d004      	beq.n	8003118 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	0018      	movs	r0, r3
 8003112:	f000 fa2f 	bl	8003574 <HAL_TIM_IC_CaptureCallback>
 8003116:	e007      	b.n	8003128 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	0018      	movs	r0, r3
 800311c:	f000 fa22 	bl	8003564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	0018      	movs	r0, r3
 8003124:	f000 fa2e 	bl	8003584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	2210      	movs	r2, #16
 8003136:	4013      	ands	r3, r2
 8003138:	2b10      	cmp	r3, #16
 800313a:	d125      	bne.n	8003188 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	2210      	movs	r2, #16
 8003144:	4013      	ands	r3, r2
 8003146:	2b10      	cmp	r3, #16
 8003148:	d11e      	bne.n	8003188 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2211      	movs	r2, #17
 8003150:	4252      	negs	r2, r2
 8003152:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2208      	movs	r2, #8
 8003158:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	69da      	ldr	r2, [r3, #28]
 8003160:	23c0      	movs	r3, #192	; 0xc0
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4013      	ands	r3, r2
 8003166:	d004      	beq.n	8003172 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	0018      	movs	r0, r3
 800316c:	f000 fa02 	bl	8003574 <HAL_TIM_IC_CaptureCallback>
 8003170:	e007      	b.n	8003182 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	0018      	movs	r0, r3
 8003176:	f000 f9f5 	bl	8003564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	0018      	movs	r0, r3
 800317e:	f000 fa01 	bl	8003584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	2201      	movs	r2, #1
 8003190:	4013      	ands	r3, r2
 8003192:	2b01      	cmp	r3, #1
 8003194:	d10f      	bne.n	80031b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	4013      	ands	r3, r2
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d108      	bne.n	80031b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2202      	movs	r2, #2
 80031aa:	4252      	negs	r2, r2
 80031ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	0018      	movs	r0, r3
 80031b2:	f7fd fe0d 	bl	8000dd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	2280      	movs	r2, #128	; 0x80
 80031be:	4013      	ands	r3, r2
 80031c0:	2b80      	cmp	r3, #128	; 0x80
 80031c2:	d10f      	bne.n	80031e4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	2280      	movs	r2, #128	; 0x80
 80031cc:	4013      	ands	r3, r2
 80031ce:	2b80      	cmp	r3, #128	; 0x80
 80031d0:	d108      	bne.n	80031e4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2281      	movs	r2, #129	; 0x81
 80031d8:	4252      	negs	r2, r2
 80031da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	0018      	movs	r0, r3
 80031e0:	f000 fdce 	bl	8003d80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	2240      	movs	r2, #64	; 0x40
 80031ec:	4013      	ands	r3, r2
 80031ee:	2b40      	cmp	r3, #64	; 0x40
 80031f0:	d10f      	bne.n	8003212 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	2240      	movs	r2, #64	; 0x40
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b40      	cmp	r3, #64	; 0x40
 80031fe:	d108      	bne.n	8003212 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2241      	movs	r2, #65	; 0x41
 8003206:	4252      	negs	r2, r2
 8003208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	0018      	movs	r0, r3
 800320e:	f000 f9c1 	bl	8003594 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	2220      	movs	r2, #32
 800321a:	4013      	ands	r3, r2
 800321c:	2b20      	cmp	r3, #32
 800321e:	d10f      	bne.n	8003240 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	2220      	movs	r2, #32
 8003228:	4013      	ands	r3, r2
 800322a:	2b20      	cmp	r3, #32
 800322c:	d108      	bne.n	8003240 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2221      	movs	r2, #33	; 0x21
 8003234:	4252      	negs	r2, r2
 8003236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	0018      	movs	r0, r3
 800323c:	f000 fd98 	bl	8003d70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003240:	46c0      	nop			; (mov r8, r8)
 8003242:	46bd      	mov	sp, r7
 8003244:	b002      	add	sp, #8
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	223c      	movs	r2, #60	; 0x3c
 8003258:	5c9b      	ldrb	r3, [r3, r2]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d101      	bne.n	8003262 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800325e:	2302      	movs	r3, #2
 8003260:	e0af      	b.n	80033c2 <HAL_TIM_PWM_ConfigChannel+0x17a>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	223c      	movs	r2, #60	; 0x3c
 8003266:	2101      	movs	r1, #1
 8003268:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	223d      	movs	r2, #61	; 0x3d
 800326e:	2102      	movs	r1, #2
 8003270:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b0c      	cmp	r3, #12
 8003276:	d100      	bne.n	800327a <HAL_TIM_PWM_ConfigChannel+0x32>
 8003278:	e076      	b.n	8003368 <HAL_TIM_PWM_ConfigChannel+0x120>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b0c      	cmp	r3, #12
 800327e:	d900      	bls.n	8003282 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003280:	e095      	b.n	80033ae <HAL_TIM_PWM_ConfigChannel+0x166>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b08      	cmp	r3, #8
 8003286:	d04e      	beq.n	8003326 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b08      	cmp	r3, #8
 800328c:	d900      	bls.n	8003290 <HAL_TIM_PWM_ConfigChannel+0x48>
 800328e:	e08e      	b.n	80033ae <HAL_TIM_PWM_ConfigChannel+0x166>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_TIM_PWM_ConfigChannel+0x56>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b04      	cmp	r3, #4
 800329a:	d021      	beq.n	80032e0 <HAL_TIM_PWM_ConfigChannel+0x98>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 800329c:	e087      	b.n	80033ae <HAL_TIM_PWM_ConfigChannel+0x166>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	0011      	movs	r1, r2
 80032a6:	0018      	movs	r0, r3
 80032a8:	f000 f9f2 	bl	8003690 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699a      	ldr	r2, [r3, #24]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2108      	movs	r1, #8
 80032b8:	430a      	orrs	r2, r1
 80032ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699a      	ldr	r2, [r3, #24]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2104      	movs	r1, #4
 80032c8:	438a      	bics	r2, r1
 80032ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6999      	ldr	r1, [r3, #24]
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	691a      	ldr	r2, [r3, #16]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	619a      	str	r2, [r3, #24]
      break;
 80032de:	e067      	b.n	80033b0 <HAL_TIM_PWM_ConfigChannel+0x168>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	0011      	movs	r1, r2
 80032e8:	0018      	movs	r0, r3
 80032ea:	f000 fa59 	bl	80037a0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	699a      	ldr	r2, [r3, #24]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2180      	movs	r1, #128	; 0x80
 80032fa:	0109      	lsls	r1, r1, #4
 80032fc:	430a      	orrs	r2, r1
 80032fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4930      	ldr	r1, [pc, #192]	; (80033cc <HAL_TIM_PWM_ConfigChannel+0x184>)
 800330c:	400a      	ands	r2, r1
 800330e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6999      	ldr	r1, [r3, #24]
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	021a      	lsls	r2, r3, #8
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	619a      	str	r2, [r3, #24]
      break;
 8003324:	e044      	b.n	80033b0 <HAL_TIM_PWM_ConfigChannel+0x168>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	0011      	movs	r1, r2
 800332e:	0018      	movs	r0, r3
 8003330:	f000 faba 	bl	80038a8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	69da      	ldr	r2, [r3, #28]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2108      	movs	r1, #8
 8003340:	430a      	orrs	r2, r1
 8003342:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	69da      	ldr	r2, [r3, #28]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2104      	movs	r1, #4
 8003350:	438a      	bics	r2, r1
 8003352:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	69d9      	ldr	r1, [r3, #28]
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	691a      	ldr	r2, [r3, #16]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	61da      	str	r2, [r3, #28]
      break;
 8003366:	e023      	b.n	80033b0 <HAL_TIM_PWM_ConfigChannel+0x168>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	0011      	movs	r1, r2
 8003370:	0018      	movs	r0, r3
 8003372:	f000 fb1f 	bl	80039b4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	69da      	ldr	r2, [r3, #28]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2180      	movs	r1, #128	; 0x80
 8003382:	0109      	lsls	r1, r1, #4
 8003384:	430a      	orrs	r2, r1
 8003386:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	69da      	ldr	r2, [r3, #28]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	490e      	ldr	r1, [pc, #56]	; (80033cc <HAL_TIM_PWM_ConfigChannel+0x184>)
 8003394:	400a      	ands	r2, r1
 8003396:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	69d9      	ldr	r1, [r3, #28]
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	021a      	lsls	r2, r3, #8
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	61da      	str	r2, [r3, #28]
      break;
 80033ac:	e000      	b.n	80033b0 <HAL_TIM_PWM_ConfigChannel+0x168>
      break;
 80033ae:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	223d      	movs	r2, #61	; 0x3d
 80033b4:	2101      	movs	r1, #1
 80033b6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	223c      	movs	r2, #60	; 0x3c
 80033bc:	2100      	movs	r1, #0
 80033be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	0018      	movs	r0, r3
 80033c4:	46bd      	mov	sp, r7
 80033c6:	b004      	add	sp, #16
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	fffffbff 	.word	0xfffffbff

080033d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	223c      	movs	r2, #60	; 0x3c
 80033de:	5c9b      	ldrb	r3, [r3, r2]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <HAL_TIM_ConfigClockSource+0x18>
 80033e4:	2302      	movs	r3, #2
 80033e6:	e0b7      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x188>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	223c      	movs	r2, #60	; 0x3c
 80033ec:	2101      	movs	r1, #1
 80033ee:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	223d      	movs	r2, #61	; 0x3d
 80033f4:	2102      	movs	r1, #2
 80033f6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2277      	movs	r2, #119	; 0x77
 8003404:	4393      	bics	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4a55      	ldr	r2, [pc, #340]	; (8003560 <HAL_TIM_ConfigClockSource+0x190>)
 800340c:	4013      	ands	r3, r2
 800340e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2280      	movs	r2, #128	; 0x80
 800341e:	0192      	lsls	r2, r2, #6
 8003420:	4293      	cmp	r3, r2
 8003422:	d040      	beq.n	80034a6 <HAL_TIM_ConfigClockSource+0xd6>
 8003424:	2280      	movs	r2, #128	; 0x80
 8003426:	0192      	lsls	r2, r2, #6
 8003428:	4293      	cmp	r3, r2
 800342a:	d900      	bls.n	800342e <HAL_TIM_ConfigClockSource+0x5e>
 800342c:	e088      	b.n	8003540 <HAL_TIM_ConfigClockSource+0x170>
 800342e:	2280      	movs	r2, #128	; 0x80
 8003430:	0152      	lsls	r2, r2, #5
 8003432:	4293      	cmp	r3, r2
 8003434:	d100      	bne.n	8003438 <HAL_TIM_ConfigClockSource+0x68>
 8003436:	e085      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>
 8003438:	2280      	movs	r2, #128	; 0x80
 800343a:	0152      	lsls	r2, r2, #5
 800343c:	4293      	cmp	r3, r2
 800343e:	d900      	bls.n	8003442 <HAL_TIM_ConfigClockSource+0x72>
 8003440:	e07e      	b.n	8003540 <HAL_TIM_ConfigClockSource+0x170>
 8003442:	2b70      	cmp	r3, #112	; 0x70
 8003444:	d018      	beq.n	8003478 <HAL_TIM_ConfigClockSource+0xa8>
 8003446:	d900      	bls.n	800344a <HAL_TIM_ConfigClockSource+0x7a>
 8003448:	e07a      	b.n	8003540 <HAL_TIM_ConfigClockSource+0x170>
 800344a:	2b60      	cmp	r3, #96	; 0x60
 800344c:	d04f      	beq.n	80034ee <HAL_TIM_ConfigClockSource+0x11e>
 800344e:	d900      	bls.n	8003452 <HAL_TIM_ConfigClockSource+0x82>
 8003450:	e076      	b.n	8003540 <HAL_TIM_ConfigClockSource+0x170>
 8003452:	2b50      	cmp	r3, #80	; 0x50
 8003454:	d03b      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0xfe>
 8003456:	d900      	bls.n	800345a <HAL_TIM_ConfigClockSource+0x8a>
 8003458:	e072      	b.n	8003540 <HAL_TIM_ConfigClockSource+0x170>
 800345a:	2b40      	cmp	r3, #64	; 0x40
 800345c:	d057      	beq.n	800350e <HAL_TIM_ConfigClockSource+0x13e>
 800345e:	d900      	bls.n	8003462 <HAL_TIM_ConfigClockSource+0x92>
 8003460:	e06e      	b.n	8003540 <HAL_TIM_ConfigClockSource+0x170>
 8003462:	2b30      	cmp	r3, #48	; 0x30
 8003464:	d063      	beq.n	800352e <HAL_TIM_ConfigClockSource+0x15e>
 8003466:	d86b      	bhi.n	8003540 <HAL_TIM_ConfigClockSource+0x170>
 8003468:	2b20      	cmp	r3, #32
 800346a:	d060      	beq.n	800352e <HAL_TIM_ConfigClockSource+0x15e>
 800346c:	d868      	bhi.n	8003540 <HAL_TIM_ConfigClockSource+0x170>
 800346e:	2b00      	cmp	r3, #0
 8003470:	d05d      	beq.n	800352e <HAL_TIM_ConfigClockSource+0x15e>
 8003472:	2b10      	cmp	r3, #16
 8003474:	d05b      	beq.n	800352e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003476:	e063      	b.n	8003540 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6818      	ldr	r0, [r3, #0]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	6899      	ldr	r1, [r3, #8]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f000 fb78 	bl	8003b7c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2277      	movs	r2, #119	; 0x77
 8003498:	4313      	orrs	r3, r2
 800349a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	609a      	str	r2, [r3, #8]
      break;
 80034a4:	e04f      	b.n	8003546 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6818      	ldr	r0, [r3, #0]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	6899      	ldr	r1, [r3, #8]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f000 fb61 	bl	8003b7c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2180      	movs	r1, #128	; 0x80
 80034c6:	01c9      	lsls	r1, r1, #7
 80034c8:	430a      	orrs	r2, r1
 80034ca:	609a      	str	r2, [r3, #8]
      break;
 80034cc:	e03b      	b.n	8003546 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6818      	ldr	r0, [r3, #0]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	6859      	ldr	r1, [r3, #4]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	001a      	movs	r2, r3
 80034dc:	f000 fad4 	bl	8003a88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2150      	movs	r1, #80	; 0x50
 80034e6:	0018      	movs	r0, r3
 80034e8:	f000 fb2e 	bl	8003b48 <TIM_ITRx_SetConfig>
      break;
 80034ec:	e02b      	b.n	8003546 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	6859      	ldr	r1, [r3, #4]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	001a      	movs	r2, r3
 80034fc:	f000 faf2 	bl	8003ae4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2160      	movs	r1, #96	; 0x60
 8003506:	0018      	movs	r0, r3
 8003508:	f000 fb1e 	bl	8003b48 <TIM_ITRx_SetConfig>
      break;
 800350c:	e01b      	b.n	8003546 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6818      	ldr	r0, [r3, #0]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	6859      	ldr	r1, [r3, #4]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	001a      	movs	r2, r3
 800351c:	f000 fab4 	bl	8003a88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2140      	movs	r1, #64	; 0x40
 8003526:	0018      	movs	r0, r3
 8003528:	f000 fb0e 	bl	8003b48 <TIM_ITRx_SetConfig>
      break;
 800352c:	e00b      	b.n	8003546 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	0019      	movs	r1, r3
 8003538:	0010      	movs	r0, r2
 800353a:	f000 fb05 	bl	8003b48 <TIM_ITRx_SetConfig>
      break;
 800353e:	e002      	b.n	8003546 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8003540:	46c0      	nop			; (mov r8, r8)
 8003542:	e000      	b.n	8003546 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8003544:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	223d      	movs	r2, #61	; 0x3d
 800354a:	2101      	movs	r1, #1
 800354c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	223c      	movs	r2, #60	; 0x3c
 8003552:	2100      	movs	r1, #0
 8003554:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	0018      	movs	r0, r3
 800355a:	46bd      	mov	sp, r7
 800355c:	b004      	add	sp, #16
 800355e:	bd80      	pop	{r7, pc}
 8003560:	ffff00ff 	.word	0xffff00ff

08003564 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800356c:	46c0      	nop			; (mov r8, r8)
 800356e:	46bd      	mov	sp, r7
 8003570:	b002      	add	sp, #8
 8003572:	bd80      	pop	{r7, pc}

08003574 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800357c:	46c0      	nop			; (mov r8, r8)
 800357e:	46bd      	mov	sp, r7
 8003580:	b002      	add	sp, #8
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800358c:	46c0      	nop			; (mov r8, r8)
 800358e:	46bd      	mov	sp, r7
 8003590:	b002      	add	sp, #8
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800359c:	46c0      	nop			; (mov r8, r8)
 800359e:	46bd      	mov	sp, r7
 80035a0:	b002      	add	sp, #8
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a2f      	ldr	r2, [pc, #188]	; (8003674 <TIM_Base_SetConfig+0xd0>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d003      	beq.n	80035c4 <TIM_Base_SetConfig+0x20>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a2e      	ldr	r2, [pc, #184]	; (8003678 <TIM_Base_SetConfig+0xd4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d108      	bne.n	80035d6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2270      	movs	r2, #112	; 0x70
 80035c8:	4393      	bics	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a26      	ldr	r2, [pc, #152]	; (8003674 <TIM_Base_SetConfig+0xd0>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d013      	beq.n	8003606 <TIM_Base_SetConfig+0x62>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a25      	ldr	r2, [pc, #148]	; (8003678 <TIM_Base_SetConfig+0xd4>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d00f      	beq.n	8003606 <TIM_Base_SetConfig+0x62>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a24      	ldr	r2, [pc, #144]	; (800367c <TIM_Base_SetConfig+0xd8>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d00b      	beq.n	8003606 <TIM_Base_SetConfig+0x62>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a23      	ldr	r2, [pc, #140]	; (8003680 <TIM_Base_SetConfig+0xdc>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d007      	beq.n	8003606 <TIM_Base_SetConfig+0x62>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a22      	ldr	r2, [pc, #136]	; (8003684 <TIM_Base_SetConfig+0xe0>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d003      	beq.n	8003606 <TIM_Base_SetConfig+0x62>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a21      	ldr	r2, [pc, #132]	; (8003688 <TIM_Base_SetConfig+0xe4>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d108      	bne.n	8003618 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	4a20      	ldr	r2, [pc, #128]	; (800368c <TIM_Base_SetConfig+0xe8>)
 800360a:	4013      	ands	r3, r2
 800360c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	4313      	orrs	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2280      	movs	r2, #128	; 0x80
 800361c:	4393      	bics	r3, r2
 800361e:	001a      	movs	r2, r3
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	4313      	orrs	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a0c      	ldr	r2, [pc, #48]	; (8003674 <TIM_Base_SetConfig+0xd0>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d00b      	beq.n	800365e <TIM_Base_SetConfig+0xba>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a0d      	ldr	r2, [pc, #52]	; (8003680 <TIM_Base_SetConfig+0xdc>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d007      	beq.n	800365e <TIM_Base_SetConfig+0xba>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a0c      	ldr	r2, [pc, #48]	; (8003684 <TIM_Base_SetConfig+0xe0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d003      	beq.n	800365e <TIM_Base_SetConfig+0xba>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a0b      	ldr	r2, [pc, #44]	; (8003688 <TIM_Base_SetConfig+0xe4>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d103      	bne.n	8003666 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	691a      	ldr	r2, [r3, #16]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	615a      	str	r2, [r3, #20]
}
 800366c:	46c0      	nop			; (mov r8, r8)
 800366e:	46bd      	mov	sp, r7
 8003670:	b004      	add	sp, #16
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40012c00 	.word	0x40012c00
 8003678:	40000400 	.word	0x40000400
 800367c:	40002000 	.word	0x40002000
 8003680:	40014000 	.word	0x40014000
 8003684:	40014400 	.word	0x40014400
 8003688:	40014800 	.word	0x40014800
 800368c:	fffffcff 	.word	0xfffffcff

08003690 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	2201      	movs	r2, #1
 80036a0:	4393      	bics	r3, r2
 80036a2:	001a      	movs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2270      	movs	r2, #112	; 0x70
 80036be:	4393      	bics	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2203      	movs	r2, #3
 80036c6:	4393      	bics	r3, r2
 80036c8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	2202      	movs	r2, #2
 80036d8:	4393      	bics	r3, r2
 80036da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a27      	ldr	r2, [pc, #156]	; (8003788 <TIM_OC1_SetConfig+0xf8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00b      	beq.n	8003706 <TIM_OC1_SetConfig+0x76>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a26      	ldr	r2, [pc, #152]	; (800378c <TIM_OC1_SetConfig+0xfc>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d007      	beq.n	8003706 <TIM_OC1_SetConfig+0x76>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a25      	ldr	r2, [pc, #148]	; (8003790 <TIM_OC1_SetConfig+0x100>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d003      	beq.n	8003706 <TIM_OC1_SetConfig+0x76>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a24      	ldr	r2, [pc, #144]	; (8003794 <TIM_OC1_SetConfig+0x104>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d10c      	bne.n	8003720 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	2208      	movs	r2, #8
 800370a:	4393      	bics	r3, r2
 800370c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	4313      	orrs	r3, r2
 8003716:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	2204      	movs	r2, #4
 800371c:	4393      	bics	r3, r2
 800371e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a19      	ldr	r2, [pc, #100]	; (8003788 <TIM_OC1_SetConfig+0xf8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d00b      	beq.n	8003740 <TIM_OC1_SetConfig+0xb0>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a18      	ldr	r2, [pc, #96]	; (800378c <TIM_OC1_SetConfig+0xfc>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d007      	beq.n	8003740 <TIM_OC1_SetConfig+0xb0>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a17      	ldr	r2, [pc, #92]	; (8003790 <TIM_OC1_SetConfig+0x100>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d003      	beq.n	8003740 <TIM_OC1_SetConfig+0xb0>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a16      	ldr	r2, [pc, #88]	; (8003794 <TIM_OC1_SetConfig+0x104>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d111      	bne.n	8003764 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	4a15      	ldr	r2, [pc, #84]	; (8003798 <TIM_OC1_SetConfig+0x108>)
 8003744:	4013      	ands	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	4a14      	ldr	r2, [pc, #80]	; (800379c <TIM_OC1_SetConfig+0x10c>)
 800374c:	4013      	ands	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4313      	orrs	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	4313      	orrs	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	621a      	str	r2, [r3, #32]
}
 800377e:	46c0      	nop			; (mov r8, r8)
 8003780:	46bd      	mov	sp, r7
 8003782:	b006      	add	sp, #24
 8003784:	bd80      	pop	{r7, pc}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	40012c00 	.word	0x40012c00
 800378c:	40014000 	.word	0x40014000
 8003790:	40014400 	.word	0x40014400
 8003794:	40014800 	.word	0x40014800
 8003798:	fffffeff 	.word	0xfffffeff
 800379c:	fffffdff 	.word	0xfffffdff

080037a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	2210      	movs	r2, #16
 80037b0:	4393      	bics	r3, r2
 80037b2:	001a      	movs	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	4a2e      	ldr	r2, [pc, #184]	; (8003888 <TIM_OC2_SetConfig+0xe8>)
 80037ce:	4013      	ands	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4a2d      	ldr	r2, [pc, #180]	; (800388c <TIM_OC2_SetConfig+0xec>)
 80037d6:	4013      	ands	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	021b      	lsls	r3, r3, #8
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2220      	movs	r2, #32
 80037ea:	4393      	bics	r3, r2
 80037ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a24      	ldr	r2, [pc, #144]	; (8003890 <TIM_OC2_SetConfig+0xf0>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d10d      	bne.n	800381e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	2280      	movs	r2, #128	; 0x80
 8003806:	4393      	bics	r3, r2
 8003808:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	4313      	orrs	r3, r2
 8003814:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	2240      	movs	r2, #64	; 0x40
 800381a:	4393      	bics	r3, r2
 800381c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a1b      	ldr	r2, [pc, #108]	; (8003890 <TIM_OC2_SetConfig+0xf0>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d00b      	beq.n	800383e <TIM_OC2_SetConfig+0x9e>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a1a      	ldr	r2, [pc, #104]	; (8003894 <TIM_OC2_SetConfig+0xf4>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d007      	beq.n	800383e <TIM_OC2_SetConfig+0x9e>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a19      	ldr	r2, [pc, #100]	; (8003898 <TIM_OC2_SetConfig+0xf8>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d003      	beq.n	800383e <TIM_OC2_SetConfig+0x9e>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a18      	ldr	r2, [pc, #96]	; (800389c <TIM_OC2_SetConfig+0xfc>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d113      	bne.n	8003866 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	4a17      	ldr	r2, [pc, #92]	; (80038a0 <TIM_OC2_SetConfig+0x100>)
 8003842:	4013      	ands	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	4a16      	ldr	r2, [pc, #88]	; (80038a4 <TIM_OC2_SetConfig+0x104>)
 800384a:	4013      	ands	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4313      	orrs	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	621a      	str	r2, [r3, #32]
}
 8003880:	46c0      	nop			; (mov r8, r8)
 8003882:	46bd      	mov	sp, r7
 8003884:	b006      	add	sp, #24
 8003886:	bd80      	pop	{r7, pc}
 8003888:	ffff8fff 	.word	0xffff8fff
 800388c:	fffffcff 	.word	0xfffffcff
 8003890:	40012c00 	.word	0x40012c00
 8003894:	40014000 	.word	0x40014000
 8003898:	40014400 	.word	0x40014400
 800389c:	40014800 	.word	0x40014800
 80038a0:	fffffbff 	.word	0xfffffbff
 80038a4:	fffff7ff 	.word	0xfffff7ff

080038a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	4a35      	ldr	r2, [pc, #212]	; (800398c <TIM_OC3_SetConfig+0xe4>)
 80038b8:	401a      	ands	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2270      	movs	r2, #112	; 0x70
 80038d4:	4393      	bics	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2203      	movs	r2, #3
 80038dc:	4393      	bics	r3, r2
 80038de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	4a28      	ldr	r2, [pc, #160]	; (8003990 <TIM_OC3_SetConfig+0xe8>)
 80038ee:	4013      	ands	r3, r2
 80038f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	021b      	lsls	r3, r3, #8
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a24      	ldr	r2, [pc, #144]	; (8003994 <TIM_OC3_SetConfig+0xec>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d10d      	bne.n	8003922 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	4a23      	ldr	r2, [pc, #140]	; (8003998 <TIM_OC3_SetConfig+0xf0>)
 800390a:	4013      	ands	r3, r2
 800390c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	021b      	lsls	r3, r3, #8
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	4313      	orrs	r3, r2
 8003918:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	4a1f      	ldr	r2, [pc, #124]	; (800399c <TIM_OC3_SetConfig+0xf4>)
 800391e:	4013      	ands	r3, r2
 8003920:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a1b      	ldr	r2, [pc, #108]	; (8003994 <TIM_OC3_SetConfig+0xec>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d00b      	beq.n	8003942 <TIM_OC3_SetConfig+0x9a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a1c      	ldr	r2, [pc, #112]	; (80039a0 <TIM_OC3_SetConfig+0xf8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d007      	beq.n	8003942 <TIM_OC3_SetConfig+0x9a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a1b      	ldr	r2, [pc, #108]	; (80039a4 <TIM_OC3_SetConfig+0xfc>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d003      	beq.n	8003942 <TIM_OC3_SetConfig+0x9a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a1a      	ldr	r2, [pc, #104]	; (80039a8 <TIM_OC3_SetConfig+0x100>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d113      	bne.n	800396a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	4a19      	ldr	r2, [pc, #100]	; (80039ac <TIM_OC3_SetConfig+0x104>)
 8003946:	4013      	ands	r3, r2
 8003948:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	4a18      	ldr	r2, [pc, #96]	; (80039b0 <TIM_OC3_SetConfig+0x108>)
 800394e:	4013      	ands	r3, r2
 8003950:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	4313      	orrs	r3, r2
 800395c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	4313      	orrs	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	621a      	str	r2, [r3, #32]
}
 8003984:	46c0      	nop			; (mov r8, r8)
 8003986:	46bd      	mov	sp, r7
 8003988:	b006      	add	sp, #24
 800398a:	bd80      	pop	{r7, pc}
 800398c:	fffffeff 	.word	0xfffffeff
 8003990:	fffffdff 	.word	0xfffffdff
 8003994:	40012c00 	.word	0x40012c00
 8003998:	fffff7ff 	.word	0xfffff7ff
 800399c:	fffffbff 	.word	0xfffffbff
 80039a0:	40014000 	.word	0x40014000
 80039a4:	40014400 	.word	0x40014400
 80039a8:	40014800 	.word	0x40014800
 80039ac:	ffffefff 	.word	0xffffefff
 80039b0:	ffffdfff 	.word	0xffffdfff

080039b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	4a28      	ldr	r2, [pc, #160]	; (8003a64 <TIM_OC4_SetConfig+0xb0>)
 80039c4:	401a      	ands	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4a22      	ldr	r2, [pc, #136]	; (8003a68 <TIM_OC4_SetConfig+0xb4>)
 80039e0:	4013      	ands	r3, r2
 80039e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4a21      	ldr	r2, [pc, #132]	; (8003a6c <TIM_OC4_SetConfig+0xb8>)
 80039e8:	4013      	ands	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	021b      	lsls	r3, r3, #8
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	4a1d      	ldr	r2, [pc, #116]	; (8003a70 <TIM_OC4_SetConfig+0xbc>)
 80039fc:	4013      	ands	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	031b      	lsls	r3, r3, #12
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a19      	ldr	r2, [pc, #100]	; (8003a74 <TIM_OC4_SetConfig+0xc0>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d00b      	beq.n	8003a2c <TIM_OC4_SetConfig+0x78>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a18      	ldr	r2, [pc, #96]	; (8003a78 <TIM_OC4_SetConfig+0xc4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d007      	beq.n	8003a2c <TIM_OC4_SetConfig+0x78>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a17      	ldr	r2, [pc, #92]	; (8003a7c <TIM_OC4_SetConfig+0xc8>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d003      	beq.n	8003a2c <TIM_OC4_SetConfig+0x78>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a16      	ldr	r2, [pc, #88]	; (8003a80 <TIM_OC4_SetConfig+0xcc>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d109      	bne.n	8003a40 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	4a15      	ldr	r2, [pc, #84]	; (8003a84 <TIM_OC4_SetConfig+0xd0>)
 8003a30:	4013      	ands	r3, r2
 8003a32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	019b      	lsls	r3, r3, #6
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	621a      	str	r2, [r3, #32]
}
 8003a5a:	46c0      	nop			; (mov r8, r8)
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	b006      	add	sp, #24
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	46c0      	nop			; (mov r8, r8)
 8003a64:	ffffefff 	.word	0xffffefff
 8003a68:	ffff8fff 	.word	0xffff8fff
 8003a6c:	fffffcff 	.word	0xfffffcff
 8003a70:	ffffdfff 	.word	0xffffdfff
 8003a74:	40012c00 	.word	0x40012c00
 8003a78:	40014000 	.word	0x40014000
 8003a7c:	40014400 	.word	0x40014400
 8003a80:	40014800 	.word	0x40014800
 8003a84:	ffffbfff 	.word	0xffffbfff

08003a88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	4393      	bics	r3, r2
 8003aa2:	001a      	movs	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	22f0      	movs	r2, #240	; 0xf0
 8003ab2:	4393      	bics	r3, r2
 8003ab4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	220a      	movs	r2, #10
 8003ac4:	4393      	bics	r3, r2
 8003ac6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	621a      	str	r2, [r3, #32]
}
 8003adc:	46c0      	nop			; (mov r8, r8)
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	b006      	add	sp, #24
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	2210      	movs	r2, #16
 8003af6:	4393      	bics	r3, r2
 8003af8:	001a      	movs	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	4a0d      	ldr	r2, [pc, #52]	; (8003b44 <TIM_TI2_ConfigInputStage+0x60>)
 8003b0e:	4013      	ands	r3, r2
 8003b10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	031b      	lsls	r3, r3, #12
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	22a0      	movs	r2, #160	; 0xa0
 8003b20:	4393      	bics	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	011b      	lsls	r3, r3, #4
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	621a      	str	r2, [r3, #32]
}
 8003b3a:	46c0      	nop			; (mov r8, r8)
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	b006      	add	sp, #24
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	46c0      	nop			; (mov r8, r8)
 8003b44:	ffff0fff 	.word	0xffff0fff

08003b48 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2270      	movs	r2, #112	; 0x70
 8003b5c:	4393      	bics	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	2207      	movs	r2, #7
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	609a      	str	r2, [r3, #8]
}
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	46bd      	mov	sp, r7
 8003b76:	b004      	add	sp, #16
 8003b78:	bd80      	pop	{r7, pc}
	...

08003b7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
 8003b88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	4a09      	ldr	r2, [pc, #36]	; (8003bb8 <TIM_ETR_SetConfig+0x3c>)
 8003b94:	4013      	ands	r3, r2
 8003b96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	021a      	lsls	r2, r3, #8
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	609a      	str	r2, [r3, #8]
}
 8003bb0:	46c0      	nop			; (mov r8, r8)
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	b006      	add	sp, #24
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	ffff00ff 	.word	0xffff00ff

08003bbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	221f      	movs	r2, #31
 8003bcc:	4013      	ands	r3, r2
 8003bce:	2201      	movs	r2, #1
 8003bd0:	409a      	lsls	r2, r3
 8003bd2:	0013      	movs	r3, r2
 8003bd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	43d2      	mvns	r2, r2
 8003bde:	401a      	ands	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a1a      	ldr	r2, [r3, #32]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	211f      	movs	r1, #31
 8003bec:	400b      	ands	r3, r1
 8003bee:	6879      	ldr	r1, [r7, #4]
 8003bf0:	4099      	lsls	r1, r3
 8003bf2:	000b      	movs	r3, r1
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	621a      	str	r2, [r3, #32]
}
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	b006      	add	sp, #24
 8003c00:	bd80      	pop	{r7, pc}
	...

08003c04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	223c      	movs	r2, #60	; 0x3c
 8003c12:	5c9b      	ldrb	r3, [r3, r2]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d101      	bne.n	8003c1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	e041      	b.n	8003ca0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	223c      	movs	r2, #60	; 0x3c
 8003c20:	2101      	movs	r1, #1
 8003c22:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	223d      	movs	r2, #61	; 0x3d
 8003c28:	2102      	movs	r1, #2
 8003c2a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2270      	movs	r2, #112	; 0x70
 8003c40:	4393      	bics	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a13      	ldr	r2, [pc, #76]	; (8003ca8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d009      	beq.n	8003c74 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a11      	ldr	r2, [pc, #68]	; (8003cac <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d004      	beq.n	8003c74 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a10      	ldr	r2, [pc, #64]	; (8003cb0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d10c      	bne.n	8003c8e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2280      	movs	r2, #128	; 0x80
 8003c78:	4393      	bics	r3, r2
 8003c7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	223d      	movs	r2, #61	; 0x3d
 8003c92:	2101      	movs	r1, #1
 8003c94:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	223c      	movs	r2, #60	; 0x3c
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	b004      	add	sp, #16
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40012c00 	.word	0x40012c00
 8003cac:	40000400 	.word	0x40000400
 8003cb0:	40014000 	.word	0x40014000

08003cb4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	223c      	movs	r2, #60	; 0x3c
 8003cc6:	5c9b      	ldrb	r3, [r3, r2]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e03e      	b.n	8003d4e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	223c      	movs	r2, #60	; 0x3c
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	22ff      	movs	r2, #255	; 0xff
 8003cdc:	4393      	bics	r3, r2
 8003cde:	001a      	movs	r2, r3
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4a1b      	ldr	r2, [pc, #108]	; (8003d58 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003cec:	401a      	ands	r2, r3
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4a18      	ldr	r2, [pc, #96]	; (8003d5c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003cfa:	401a      	ands	r2, r3
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4a16      	ldr	r2, [pc, #88]	; (8003d60 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003d08:	401a      	ands	r2, r3
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	4a13      	ldr	r2, [pc, #76]	; (8003d64 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003d16:	401a      	ands	r2, r3
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4a11      	ldr	r2, [pc, #68]	; (8003d68 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003d24:	401a      	ands	r2, r3
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	4a0e      	ldr	r2, [pc, #56]	; (8003d6c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003d32:	401a      	ands	r2, r3
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	223c      	movs	r2, #60	; 0x3c
 8003d48:	2100      	movs	r1, #0
 8003d4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	0018      	movs	r0, r3
 8003d50:	46bd      	mov	sp, r7
 8003d52:	b004      	add	sp, #16
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	46c0      	nop			; (mov r8, r8)
 8003d58:	fffffcff 	.word	0xfffffcff
 8003d5c:	fffffbff 	.word	0xfffffbff
 8003d60:	fffff7ff 	.word	0xfffff7ff
 8003d64:	ffffefff 	.word	0xffffefff
 8003d68:	ffffdfff 	.word	0xffffdfff
 8003d6c:	ffffbfff 	.word	0xffffbfff

08003d70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d78:	46c0      	nop			; (mov r8, r8)
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	b002      	add	sp, #8
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d88:	46c0      	nop			; (mov r8, r8)
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	b002      	add	sp, #8
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <__libc_init_array>:
 8003d90:	b570      	push	{r4, r5, r6, lr}
 8003d92:	2600      	movs	r6, #0
 8003d94:	4d0c      	ldr	r5, [pc, #48]	; (8003dc8 <__libc_init_array+0x38>)
 8003d96:	4c0d      	ldr	r4, [pc, #52]	; (8003dcc <__libc_init_array+0x3c>)
 8003d98:	1b64      	subs	r4, r4, r5
 8003d9a:	10a4      	asrs	r4, r4, #2
 8003d9c:	42a6      	cmp	r6, r4
 8003d9e:	d109      	bne.n	8003db4 <__libc_init_array+0x24>
 8003da0:	2600      	movs	r6, #0
 8003da2:	f000 f821 	bl	8003de8 <_init>
 8003da6:	4d0a      	ldr	r5, [pc, #40]	; (8003dd0 <__libc_init_array+0x40>)
 8003da8:	4c0a      	ldr	r4, [pc, #40]	; (8003dd4 <__libc_init_array+0x44>)
 8003daa:	1b64      	subs	r4, r4, r5
 8003dac:	10a4      	asrs	r4, r4, #2
 8003dae:	42a6      	cmp	r6, r4
 8003db0:	d105      	bne.n	8003dbe <__libc_init_array+0x2e>
 8003db2:	bd70      	pop	{r4, r5, r6, pc}
 8003db4:	00b3      	lsls	r3, r6, #2
 8003db6:	58eb      	ldr	r3, [r5, r3]
 8003db8:	4798      	blx	r3
 8003dba:	3601      	adds	r6, #1
 8003dbc:	e7ee      	b.n	8003d9c <__libc_init_array+0xc>
 8003dbe:	00b3      	lsls	r3, r6, #2
 8003dc0:	58eb      	ldr	r3, [r5, r3]
 8003dc2:	4798      	blx	r3
 8003dc4:	3601      	adds	r6, #1
 8003dc6:	e7f2      	b.n	8003dae <__libc_init_array+0x1e>
 8003dc8:	08003ee0 	.word	0x08003ee0
 8003dcc:	08003ee0 	.word	0x08003ee0
 8003dd0:	08003ee0 	.word	0x08003ee0
 8003dd4:	08003ee4 	.word	0x08003ee4

08003dd8 <memset>:
 8003dd8:	0003      	movs	r3, r0
 8003dda:	1882      	adds	r2, r0, r2
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d100      	bne.n	8003de2 <memset+0xa>
 8003de0:	4770      	bx	lr
 8003de2:	7019      	strb	r1, [r3, #0]
 8003de4:	3301      	adds	r3, #1
 8003de6:	e7f9      	b.n	8003ddc <memset+0x4>

08003de8 <_init>:
 8003de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dee:	bc08      	pop	{r3}
 8003df0:	469e      	mov	lr, r3
 8003df2:	4770      	bx	lr

08003df4 <_fini>:
 8003df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df6:	46c0      	nop			; (mov r8, r8)
 8003df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dfa:	bc08      	pop	{r3}
 8003dfc:	469e      	mov	lr, r3
 8003dfe:	4770      	bx	lr
